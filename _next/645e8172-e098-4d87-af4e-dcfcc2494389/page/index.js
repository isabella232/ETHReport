module.exports=__NEXT_REGISTER_PAGE("/",function(){return{page:webpackJsonp([0],{102:function(e,t,n){"use strict";var o=/-(.)/g;e.exports={camelCase:function(e){if("string"!=typeof e)throw new TypeError("First argument must be a string");return e.indexOf("-")<0?e:e.toLowerCase().replace(o,function(e,t){return t.toUpperCase()})},invertObject:function(e,t){if("object"!=typeof e||!e)throw new TypeError("First argument must be an object");var n,o,a="function"==typeof t,r={},i={};for(n in e)o=e[n],a&&(r=t(n,o))&&2===r.length?i[r[0]]=r[1]:"string"==typeof o&&(i[o]=n);return i}}},103:function(e,t,n){"use strict";var o=n(215);n(68);function a(e,t){return(e&t)===t}var r={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(e){var t=r,n=e.Properties||{},i=e.DOMAttributeNamespaces||{},l=e.DOMAttributeNames||{},p=e.DOMPropertyNames||{},u=e.DOMMutationMethods||{};for(var c in e.isCustomAttribute&&s._isCustomAttributeFunctions.push(e.isCustomAttribute),n){s.properties.hasOwnProperty(c)&&o("48",c);var h=c.toLowerCase(),d=n[c],f={attributeName:h,attributeNamespace:null,propertyName:c,mutationMethod:null,mustUseProperty:a(d,t.MUST_USE_PROPERTY),hasBooleanValue:a(d,t.HAS_BOOLEAN_VALUE),hasNumericValue:a(d,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:a(d,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:a(d,t.HAS_OVERLOADED_BOOLEAN_VALUE)};if(f.hasBooleanValue+f.hasNumericValue+f.hasOverloadedBooleanValue<=1||o("50",c),l.hasOwnProperty(c)){var m=l[c];f.attributeName=m}i.hasOwnProperty(c)&&(f.attributeNamespace=i[c]),p.hasOwnProperty(c)&&(f.propertyName=p[c]),u.hasOwnProperty(c)&&(f.mutationMethod=u[c]),s.properties[c]=f}}},i=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",s={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:i,ATTRIBUTE_NAME_CHAR:i+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<s._isCustomAttributeFunctions.length;t++){if((0,s._isCustomAttributeFunctions[t])(e))return!0}return!1},injection:r};e.exports=s},104:function(e,t,n){"use strict";function o(e){for(var t,n={},o=0,a=e.length;o<a;o++)n[(t=e[o]).name]=t.value;return n}e.exports={formatAttributes:o,formatDOM:function e(t,n,a){n=n||null;for(var r,i,s,l=[],p=0,u=t.length;p<u;p++){switch(r=t[p],s={next:null,prev:l[p-1]||null,parent:n},(i=l[p-1])&&(i.next=s),0!==r.nodeName.indexOf("#")&&(s.name=r.nodeName.toLowerCase(),s.attribs={},r.attributes&&r.attributes.length&&(s.attribs=o(r.attributes))),r.nodeType){case 1:"script"===s.name||"style"===s.name?s.type=s.name:s.type="tag",s.children=e(r.childNodes,s);break;case 3:s.type="text",s.data=r.nodeValue;break;case 8:s.type="comment",s.data=r.nodeValue}l.push(s)}return a&&(l.unshift({name:a.substring(0,a.indexOf(" ")).toLowerCase(),data:a,type:"directive",next:l[0]?l[0]:null,prev:null,parent:n}),l[1]&&(l[1].prev=l[0])),l},isIE:function(e){return e?document.documentMode===e:/(MSIE |Trident\/|Edge\/)/.test(navigator.userAgent)}}},197:function(e,t,n){e.exports=n(198)},198:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n.n(o),r=n(37),i=n.n(r),s=n(199),l=n.n(s),p=n(74),u=n.n(p),c=(n(208),function(){return a.a.createElement("nav",{className:"page-header-nav"},a.a.createElement(u.a,{href:"#resources"},"Resources"),a.a.createElement(u.a,{href:"#browse"},"Browse Archives"))}),h=(n(209),i()().publicRuntimeConfig),d=function(){return a.a.createElement("div",{className:"page-header",style:{backgroundImage:"url(".concat(h.subDirPath,"/static/img/header-bg.jpg)")}},a.a.createElement(l.a,{disableInlineStyles:!0,downTolerance:120},a.a.createElement("div",{className:"sticky-header"},a.a.createElement("div",{className:"container"},a.a.createElement("div",{className:"logo"},a.a.createElement("img",{src:"".concat(h.subDirPath,"/static/img/ETHPrize-logo.png"),alt:"ETHPrize logo"})),a.a.createElement(c,null)))),a.a.createElement("img",{className:"page-header-bg",src:"".concat(h.subDirPath,"/static/img/header-bg.jpg"),alt:"Header background"}),a.a.createElement("div",{className:"inline-header"},a.a.createElement("div",{className:"container"},a.a.createElement("div",{className:"logo"},a.a.createElement("img",{src:"".concat(h.subDirPath,"/static/img/ETHPrize-logo.png"),alt:"ETHPrize logo"})),a.a.createElement("div",{className:"page-header-content"},a.a.createElement("h1",{className:"main-heading",style:{backgroundImage:"url(".concat(h.subDirPath,"/static/img/heading-textured-bg.jpg)")}},"Eth Report ",a.a.createElement("br",null),"2018"),a.a.createElement("p",null,"We’ve interviewed 100+ developers to showcase the biggest opportunities in the Ethereum ecosystem"),a.a.createElement("p",null,"Help us ",a.a.createElement("a",{href:"https://goo.gl/forms/lw5i2Ku9F0tMBWPD3"},"answer these questions")," to be included on this site and add your voice to the distributed future!")),a.a.createElement(c,null))))},f=(n(210),function(){return a.a.createElement("div",{className:"page-footer"},a.a.createElement("div",{className:"container"},a.a.createElement("p",null,"Sponsored by ",a.a.createElement("a",{href:"//status.im",target:"_blank",rel:"noopener noreferrer"},"Status"),". Built by ",a.a.createElement("a",{href:"//nona.digital",target:"_blank",rel:"noopener noreferrer"},"Nona"))))}),m=n(26),g=n.n(m),w=(n(6),n(221),function(e){return a.a.createElement("div",{className:"wordcloud","data-index":e.index},a.a.createElement("div",{className:"wordcloud-header"},a.a.createElement("p",{className:"number"},(e.index+1).toString().padStart(3,"0")),a.a.createElement("h3",null,g()(e.words.title))),a.a.createElement("div",{className:"words-wrap"},a.a.createElement("div",null,e.words.cloud.map(function(e){return a.a.createElement("span",{key:e.word,className:"size-".concat(e.size)},e.url?a.a.createElement("a",{href:e.url,target:"_blank",rel:"noopener noreferrer"},e.word):a.a.createElement("span",null,e.word))}))))}),y=[{title:"Frustrations <br/>and Problems",cloud:[{word:"Testing",size:1,url:""},{word:"Verification",size:3,url:""},{word:"Scaling",size:4,url:""},{word:"Solidity",size:2,url:""},{word:"Deployment",size:2,url:""},{word:"Speed",size:3,url:""},{word:"Expense",size:4,url:""},{word:"Documentation",size:1,url:""},{word:"Debugging",size:2,url:""}]},{title:"Commonly <br/>Used Tools",cloud:[{word:"Truffle",size:1,url:"//truffleframework.com"},{word:"Embark",size:3,url:"//embark.status.im"},{word:"Remix",size:1,url:"//remix.ethereum.org"},{word:"Ganache",size:2,url:"//truffleframework.com/ganache"},{word:"Ethers.js",size:2,url:"//docs.ethers.io/ethers.js/html"},{word:"Web3.js",size:1,url:"//web3js.readthedocs.io/en/1.0/index.html"},{word:"Mythril",size:4,url:"//github.com/ConsenSys/mythril"},{word:"Trail of Bits",size:4,url:"//blog.trailofbits.com/2018/03/23/use-our-suite-of-ethereum-security-tools"},{word:"Code coverage",size:4,url:"//0xproject.com/docs/sol-cov"},{word:"MetaMask",size:2,url:"//metamask.io"},{word:"Infura",size:3,url:"//infura.io"}]},{title:"Educational <br/>Resources",cloud:[{word:"Cryptozombies",size:1,url:"//cryptozombies.io"},{word:"Gas Golf",size:4,url:"//g.solidity.cc"},{word:"Ethernauts",size:2,url:"//ethernaut.zeppelin.solutions"},{word:"Readthedocs",size:1,url:"//solidity.readthedocs.io/en/latest"},{word:"Reddit",size:3,url:"//www.reddit.com/r/ethereum"},{word:"Ethresear.ch",size:1,url:"//ethresear.ch"},{word:"Mastering Ethereum",size:4,url:"//github.com/ethereumbook/ethereumbook"},{word:"Github",size:2,url:"//github.com/ConsenSysLabs/ethereum-developer-tools-list"},{word:"Cryptoeconomics",size:4,url:"//cryptoeconomics.study"},{word:"Stackexchange",size:3,url:"//ethereum.stackexchange.com"},{word:"Vitalik",size:2,url:"//vitalik.ca"}]},{title:"Other <br/>Great Ideas",cloud:[{word:"Event Monitoring Service",size:4,url:""},{word:"Mainnet Fork Testing Instance",size:1,url:""},{word:"Fuzz Testing Tools",size:3,url:""},{word:"Better Debuggers",size:1,url:""},{word:"Dappnode",size:4,url:"//github.com/dappnode/DAppNode"},{word:"Solidity IDE with Visual Debugger",size:2,url:""},{word:"Decentralized Infura",size:3,url:""},{word:"Solidity Interpreter",size:2,url:""}]}],b=(n(222),i()().publicRuntimeConfig),v=function(){return a.a.createElement("div",{className:"resources-wrap",id:"resources"},a.a.createElement("div",{className:"container"},a.a.createElement("h2",{className:"main-heading",style:{backgroundImage:"url(".concat(b.subDirPath,"/static/img/heading-textured-bg.jpg)")}},"Resources"),a.a.createElement("div",{className:"wordclouds-wrap"},y.map(function(e,t){return a.a.createElement(w,{index:t,key:e.title,words:e})}))))},k={blurb:"<p>The community behind ETHPrize has interviewed over 100 developers in order to produce this website which showcases the biggest frustrations and opportunities in the ecosystem.</p><p>We invite all developers, product managers, designers and #buidlers to use the ideas here and figure out what to make next so that we can all continue to build the world’s best cryptocurrency community and ship great products that actually improve the lives of as many people as possible.</p>"},q=(n(223),function(){return a.a.createElement("div",{className:"content-blurb"},a.a.createElement("div",{className:"container"},g()(k.blurb)))}),I=n(224),x=n.n(I),S=(n(225),function(e){return e.data&&null!==e.data[0]?e.data.length<1?a.a.createElement("div",null,"No results found"):a.a.createElement("div",{className:"related-interviews-list"},a.a.createElement("h5",null,"Related ",a.a.createElement("br",null),"Interviews"),a.a.createElement("ul",null,e.data.map(function(t){return a.a.createElement("li",{id:t.id,key:t.id},a.a.createElement("button",{onClick:e.toggleSingleInterview},g()(t.name)))}))):a.a.createElement("div",null,"Loading...")}),_=(n(226),function(e){return a.a.createElement("div",{className:"modal ".concat(e.isModalOpen?"modal-open":""," ").concat(e.modalOnMobileOnly?"modal-on-mobile-only":""," ")},a.a.createElement("div",{className:"modal-inner container"},e.children,a.a.createElement("button",{onClick:e.closeModal,className:"modal-close"},a.a.createElement("svg",{width:"23",height:"23",viewBox:"0 0 23 23",xmlns:"http://www.w3.org/2000/svg"},a.a.createElement("title",null,"close"),a.a.createElement("g",{fill:"none",fillRule:"evenodd"},a.a.createElement("path",{fill:"#0D1434",d:"M-282-19H38v3197h-320z"}),a.a.createElement("path",{d:"M19.632 3.368A11.425 11.425 0 0 0 11.5 0C8.428 0 5.54 1.196 3.368 3.368A11.425 11.425 0 0 0 0 11.5c0 3.072 1.196 5.96 3.368 8.132A11.425 11.425 0 0 0 11.5 23c3.072 0 5.96-1.196 8.132-3.368A11.425 11.425 0 0 0 23 11.5c0-3.072-1.196-5.96-3.368-8.132zm-5.57 8.343l2.866 2.866a.594.594 0 0 1 0 .839l-1.655 1.655a.589.589 0 0 1-.42.173.589.589 0 0 1-.419-.173l-2.866-2.866a.153.153 0 0 0-.21 0L8.492 17.07a.589.589 0 0 1-.42.173.59.59 0 0 1-.419-.173l-1.655-1.655a.589.589 0 0 1-.174-.42c0-.158.062-.307.174-.419l2.866-2.866a.15.15 0 0 0 0-.21L5.876 8.514a.589.589 0 0 1-.173-.42c0-.158.062-.307.173-.419L7.532 6.02a.589.589 0 0 1 .42-.174c.158 0 .307.062.418.174l2.988 2.987a.153.153 0 0 0 .21 0l2.987-2.987a.589.589 0 0 1 .42-.174c.158 0 .307.062.419.174l1.655 1.655c.112.112.173.26.173.42a.59.59 0 0 1-.173.419L14.062 11.5a.15.15 0 0 0 0 .21z",fill:"#D53337",fillRule:"nonzero"}))))))});_.defaultProps={modalOnMobileOnly:!1,isModalOpen:!1};var T=_;n(227);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function M(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}var C=i()().publicRuntimeConfig,W=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=M(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).state={activeLetter:"A"},n}var n,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.a.Component),n=t,(o=[{key:"render",value:function(){var e=this,t=this.state.activeLetter,n={};return this.props.data.sort(function(e,t){return e.name.localeCompare(t.name)}).forEach(function(e){var t=e.name.charAt(0);void 0===n[t]&&(n[t]=[]),n[t].push(e)}),a.a.createElement("div",{className:"interviews-wrap"},a.a.createElement("div",{className:"mob-interviews-link"},a.a.createElement("button",{onClick:this.props.toggleInterviewsListModal},a.a.createElement("span",null,"Interviews (",this.props.data.length,")")),a.a.createElement("button",{onClick:this.props.toggleInterviewsListModal},a.a.createElement("span",null,"View")," ",a.a.createElement("img",{src:"".concat(C.subDirPath,"/static/img/right-chevron-icon.svg"),alt:"right chevron icon"}))),a.a.createElement(T,{isModalOpen:this.props.isInterviewsListModalOpen,closeModal:this.props.toggleInterviewsListModal,modalOnMobileOnly:!0},a.a.createElement(a.a.Fragment,null,a.a.createElement("h4",null,"Interviews"),a.a.createElement("div",{className:"interviews-nav-wrap"},a.a.createElement("div",{className:"interviews-list"},Object.keys(n).map(function(t){return a.a.createElement("div",{className:"letter-block",key:t},a.a.createElement("div",{id:t},t),a.a.createElement("ul",null,n[t].map(function(t){return a.a.createElement("li",{id:t.id,key:t.id},a.a.createElement("button",{onClick:e.props.toggleSingleInterview},g()(t.name)))})))})),a.a.createElement("div",{className:"letters-nav"},Object.keys(n).map(function(n){return a.a.createElement("button",{key:n,onClick:function(){document.querySelector("#".concat(n)).scrollIntoView({behavior:"smooth"}),e.setState({activeLetter:n})},className:t===n?"active":""},n)}))))))}}])&&A(n.prototype,o),r&&A(n,r),t}(),O=(n(228),function(e){return a.a.createElement(T,{isModalOpen:!0,closeModal:e.toggleSingleInterview},a.a.createElement("div",{className:"single-interview"},a.a.createElement("div",{className:"number"},e.activeSingleInterviewId.toString().padStart(3,"0")),a.a.createElement("div",{className:"name"}," ",g()(e.selectedInterview.name)," "),e.selectedInterview.interview.filter(function(e){return null!==e.answer}).map(function(t,n){var o=e.questions.find(function(e){return e.id===t.question});return a.a.createElement("div",{className:"qa-block",key:"question-".concat(o.id)},a.a.createElement("p",{className:"question"},n+1,") ",o.text),a.a.createElement("div",{className:"answer"},g()(t.answer)))})))}),P=["solidity","gas","protocol","transaction","event","network","documentation","blockchain","client","bounty","deployment","audit","contract","verification","token","governance","payment","consensus","NFT","compiler","signature","hash","testing","wallet","community","decentralized"],R=(n(229),function(e){return a.a.createElement("div",{className:"topics-list"},a.a.createElement("h4",null,"Topics"),a.a.createElement("ul",null,P.map(function(t){return a.a.createElement("li",{key:t},a.a.createElement(u.a,{href:"#browse",onClick:e.setSearchTerm},t))})))}),j=["Ethereum","Geth","Truffle","Infura","MetaMask","Parity","Remix","Mythril","Casper","Plasma","Status","Embark","Swarm","eWASM","Sharding","State channels","Gitcoin","Augur","Vyper","Bamboo"],D=(n(230),function(e){return a.a.createElement("div",{className:"projects-list"},a.a.createElement("h4",null,"Projects"),a.a.createElement("ul",null,j.map(function(t){return a.a.createElement("li",{key:t},a.a.createElement(u.a,{href:"#browse",onClick:e.setSearchTerm},t))})))}),B=(n(231),i()().publicRuntimeConfig),N=function(e){return a.a.createElement("div",{className:"search-bar ".concat(e.isSearchActive?"search-active":""),style:{backgroundImage:"url(".concat(B.subDirPath,"/static/img/header-bg.jpg)")}},a.a.createElement("div",{className:"container"},a.a.createElement("h3",{className:"main-heading",style:{backgroundImage:"url(".concat(B.subDirPath,"/static/img/heading-textured-bg.jpg)")}},"Archives"),a.a.createElement("form",{className:"search-form"},a.a.createElement("input",{className:"search-input",type:"search",placeholder:"Search",value:e.term,onChange:e.onSearchInputChange}),a.a.createElement("img",{className:"search-icon",src:"".concat(B.subDirPath,"/static/img/search-icon.svg"),alt:"Search"}),e.isSearchActive&&a.a.createElement("button",{className:"search-clear-button",onClick:e.clearSearchInput},a.a.createElement("img",{src:"".concat(B.subDirPath,"/static/img/clear-search-icon.svg"),alt:"Clear search"}))),e.numResults>0&&null!==e.numResults[0]?a.a.createElement("p",{className:"search-count"},e.numMatchedTerms," search term matches | ",e.numResults," interview matches"):""))},z=(n(232),i()().publicRuntimeConfig),L=function(e){if(!e.data||null===e.data[0])return a.a.createElement("div",null,"Loading...");if(e.data.length<1)return a.a.createElement("div",null,"No results found");var t=e.data.sort(function(e,t){return e.name.localeCompare(t.name)}),n=function(t,n){return function(t){var n=e.term.replace(/[^a-zA-Z 0-9]+/g,""),o=new RegExp(n,"ig");return t.replace(o,function(e){return"<span>".concat(e,"</span>")})}(function(t,n,o){var a=0,r="",i="",s=e.term.length+5,l=t.replace(/<(?:.|\n)*?>/gm,"");if(null===t)return"";n>o&&-1!==n&&o>50&&t.length>o&&(a=n-(o-s),r="...");var p=l.substr(a,o+a);return"."!==p.substr(p.length-1,1)&&(i="..."),l.length<=o?"<p>".concat(p,"</p>"):"<p>".concat(r).concat(p).concat(i,"</p>")}(t,n,arguments.length>2&&void 0!==arguments[2]?arguments[2]:500))};return a.a.createElement("div",{className:"search-results"},a.a.createElement("ul",null,t.map(function(t){return a.a.createElement("li",{key:t.id},a.a.createElement("button",{id:t.id,onClick:e.toggleSingleInterview},a.a.createElement("div",{className:"li-header"},a.a.createElement("h3",{className:(o=t.name,r=e.term,o.toLowerCase().includes(r.toLowerCase())?"matched-name":"")},g()(t.name)),a.a.createElement("div",null,a.a.createElement("span",null,"View"),a.a.createElement("img",{src:"".concat(z.subDirPath,"/static/img/right-chevron-icon.svg"),alt:"right chevron icon"}))),t.matchingQuestionAnswerPositions?t.matchingQuestionAnswerPositions.map(function(t){return a.a.createElement("div",{className:"question-wrap",key:t.index+1},a.a.createElement("h5",null,t.index+1,") ",(o=t.id,e.questions.find(function(e){return e.id===o}).text)),a.a.createElement("div",null,g()(n(t.answer,t.strpos))));var o}):""));var o,r})))},H=n(233),U=n(234),F=n.n(U);n(235);function G(e){return(G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function J(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Z=function(e){function t(e){var n,o,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,a=(t.__proto__||Object.getPrototypeOf(t)).call(this,e),n=!a||"object"!==G(a)&&"function"!=typeof a?Y(o):a,Object.defineProperty(Y(n),"onSearchInputChange",{configurable:!0,enumerable:!0,writable:!0,value:function(e){n.setState({term:e.target.value,isSearchActive:!0,searchResults:[]}),0===e.target.value.length&&n.setState({isSearchActive:!1}),n.getSearchResultsDebounce()}}),Object.defineProperty(Y(n),"getSearchResults",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=n.state.interviewData.reduce(function(t,o){var a=n.termIsInInterview(e,o),r=a.foundIndex,i=a.matchingQuestionAnswerPositions,s=a.matchCount;return a.found&&t.push(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){V(e,t,n[t])})}return e}({},o,{matchedIndex:r,matchingQuestionAnswerPositions:i,matchCount:s})),t},[]),o=t.reduce(function(e,t){return e+t.matchCount},0);n.setState({searchResults:t,debounceTerm:e,matchedCount:o})}}),Object.defineProperty(Y(n),"getSelectedInterview",{configurable:!0,enumerable:!0,writable:!0,value:function(){var e=n.state,t=e.activeSingleInterviewId;return e.interviewData.find(function(e){return e.id===t})}}),Object.defineProperty(Y(n),"setSearchTerm",{configurable:!0,enumerable:!0,writable:!0,value:function(e){n.setState({term:e.target.innerText,isSearchActive:!0}),n.getSearchResults(e.target.innerText)}}),Object.defineProperty(Y(n),"getSearchResultsDebounce",{configurable:!0,enumerable:!0,writable:!0,value:x.a.debounce(function(){var e=n.state.term;n.getSearchResults(e)},700)}),Object.defineProperty(Y(n),"clearSearchInput",{configurable:!0,enumerable:!0,writable:!0,value:function(){n.setState({isSearchActive:!1,term:"",matchedCount:0,searchResults:[]})}}),Object.defineProperty(Y(n),"toggleInterviewsListModal",{configurable:!0,enumerable:!0,writable:!0,value:function(){var e=n.state.isInterviewsListModalOpen;n.setState({isInterviewsListModalOpen:!e,isSingleInterviewModalOpen:!1})}}),Object.defineProperty(Y(n),"toggleSingleInterview",{configurable:!0,enumerable:!0,writable:!0,value:function(e){for(var t=n.state,o=t.isSingleInterviewModalOpen,a=t.isInterviewsListModalOpen,r=e.target;""===r.id;)r=r.parentNode;var i=r.id;n.setState({isInterviewsListModalOpen:!a,isSingleInterviewModalOpen:!o,activeSingleInterviewId:Number(i)})}}),Object.defineProperty(Y(n),"termIsInInterview",{configurable:!0,enumerable:!0,writable:!0,value:function(e,t){var n=e.toLowerCase(),o=0,a=-1;if(t.name.toLowerCase().includes(n))return{found:!0,foundIndex:0,matchCount:0};var r=[],i=t.interview.filter(function(i,s){if(null===i.answer)return!1;var l=i.answer.toLowerCase().indexOf(n);if(-1!==l&&-1!==t.activeIndex){var p=e.replace(/[^a-zA-Z 0-9]+/g,""),u=new RegExp(p,"ig"),c=i.answer.match(u).length;o=s,a=l,r.push({id:i.question,strpos:l,answer:i.answer,index:s,count:c})}return-1!==l}),s=r.reduce(function(e,t){return e+t.count},0);return i.length>0&&{found:!0,foundIndex:o,positionInAnswer:a,matchingQuestionAnswerPositions:r,matchCount:s}}}),n.state={term:"",debounceTerm:"",searchResults:[],isSingleInterviewModalOpen:!1,isInterviewsListModalOpen:!1,activeSingleInterviewId:1,isSearchActive:!1,interviewData:F.a,matchedCount:0},n.onSearchInputChange=n.onSearchInputChange.bind(Y(n)),n.toggleSingleInterview=n.toggleSingleInterview.bind(Y(n)),n.toggleInterviewsListModal=n.toggleInterviewsListModal.bind(Y(n)),n.setSearchTerm=n.setSearchTerm.bind(Y(n)),n.clearSearchInput=n.clearSearchInput.bind(Y(n)),n.termIsInInterview=n.termIsInInterview.bind(Y(n)),n.getSearchResultsDebounce=n.getSearchResultsDebounce.bind(Y(n)),n}var n,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.a.Component),n=t,(o=[{key:"render",value:function(){var e=this.state,t=e.isSingleInterviewModalOpen,n=e.isInterviewsListModalOpen,o=e.isSearchActive,r=e.activeSingleInterviewId,i=e.term,s=e.searchResults,l=e.interviewData,p=e.debounceTerm,u=e.matchedCount;return a.a.createElement("div",{className:"browse-wrap",id:"browse"},a.a.createElement(N,{onSearchInputChange:this.onSearchInputChange,clearSearchInput:this.clearSearchInput,isSearchActive:o,term:i,numResults:s.length,numMatchedTerms:u}),a.a.createElement("div",{className:"browse-content-wrap container"},a.a.createElement("div",{className:"browse-content-left"},o&&a.a.createElement(S,{data:s,toggleSingleInterview:this.toggleSingleInterview})),a.a.createElement("div",{className:"browse-content-right"},o?a.a.createElement(L,{data:s,questions:H.Questions,term:p,toggleSingleInterview:this.toggleSingleInterview}):a.a.createElement(a.a.Fragment,null,a.a.createElement(W,{data:l,isInterviewsListModalOpen:n,toggleSingleInterview:this.toggleSingleInterview,toggleInterviewsListModal:this.toggleInterviewsListModal}),a.a.createElement(R,{setSearchTerm:this.setSearchTerm}),a.a.createElement(D,{setSearchTerm:this.setSearchTerm}))),t&&a.a.createElement(O,{activeSingleInterviewId:r,selectedInterview:this.getSelectedInterview(),toggleSingleInterview:this.toggleSingleInterview,questions:H.Questions})))}}])&&J(n.prototype,o),r&&J(n,r),t}();n(236);function X(e){return(X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function K(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function $(e,t){return!t||"object"!==X(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}var Q=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),$(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}var n,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.a.Component),n=t,(o=[{key:"render",value:function(){return a.a.createElement("div",{className:"page-wrapper"},a.a.createElement(d,null),a.a.createElement(v,null),a.a.createElement(q,null),a.a.createElement(Z,null),a.a.createElement(f,null))}}])&&K(n.prototype,o),r&&K(n,r),t}();t.default=Q},199:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=c(r),s=c(n(6)),l=c(n(200)),p=c(n(205)),u=c(n(207));function c(e){return e&&e.__esModule?e:{default:e}}function h(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var d=function(){},f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setRef=function(e){return n.inner=e},n.setHeightOffset=function(){n.setState({height:n.inner.offsetHeight}),n.resizeTicking=!1},n.getScrollY=function(){return void 0!==n.props.parent().pageYOffset?n.props.parent().pageYOffset:void 0!==n.props.parent().scrollTop?n.props.parent().scrollTop:(document.documentElement||document.body.parentNode||document.body).scrollTop},n.getViewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight},n.getDocumentHeight=function(){var e=document.body,t=document.documentElement;return Math.max(e.scrollHeight,t.scrollHeight,e.offsetHeight,t.offsetHeight,e.clientHeight,t.clientHeight)},n.getElementPhysicalHeight=function(e){return Math.max(e.offsetHeight,e.clientHeight)},n.getElementHeight=function(e){return Math.max(e.scrollHeight,e.offsetHeight,e.clientHeight)},n.getScrollerPhysicalHeight=function(){var e=n.props.parent();return e===window||e===document.body?n.getViewportHeight():n.getElementPhysicalHeight(e)},n.getScrollerHeight=function(){var e=n.props.parent();return e===window||e===document.body?n.getDocumentHeight():n.getElementHeight(e)},n.isOutOfBound=function(e){var t=e<0,o=n.getScrollerPhysicalHeight(),a=n.getScrollerHeight();return t||e+o>a},n.handleScroll=function(){n.scrollTicking||(n.scrollTicking=!0,(0,p.default)(n.update))},n.handleResize=function(){n.resizeTicking||(n.resizeTicking=!0,(0,p.default)(n.setHeightOffset))},n.unpin=function(){n.props.onUnpin(),n.setState({translateY:"-100%",className:"headroom headroom--unpinned"},function(){setTimeout(function(){n.setState({state:"unpinned"})},0)})},n.pin=function(){n.props.onPin(),n.setState({translateY:0,className:"headroom headroom--pinned",state:"pinned"})},n.unfix=function(){n.props.onUnfix(),n.setState({translateY:0,className:"headroom headroom--unfixed",state:"unfixed"})},n.update=function(){if(n.currentScrollY=n.getScrollY(),!n.isOutOfBound(n.currentScrollY)){var e=(0,u.default)(n.lastKnownScrollY,n.currentScrollY,n.props,n.state).action;"pin"===e?n.pin():"unpin"===e?n.unpin():"unfix"===e&&n.unfix()}n.lastKnownScrollY=n.currentScrollY,n.scrollTicking=!1},n.currentScrollY=0,n.lastKnownScrollY=0,n.scrollTicking=!1,n.resizeTicking=!1,n.state={state:"unfixed",translateY:0,className:"headroom headroom--unfixed"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"componentDidMount",value:function(){this.setHeightOffset(),this.props.disable||(this.props.parent().addEventListener("scroll",this.handleScroll),this.props.calcHeightOnResize&&this.props.parent().addEventListener("resize",this.handleResize))}},{key:"componentWillReceiveProps",value:function(e){e.disable&&!this.props.disable?(this.unfix(),this.props.parent().removeEventListener("scroll",this.handleScroll),this.props.parent().removeEventListener("resize",this.handleResize)):!e.disable&&this.props.disable&&(this.props.parent().addEventListener("scroll",this.handleScroll),this.props.calcHeightOnResize&&this.props.parent().addEventListener("resize",this.handleResize))}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,l.default)(this.props,e)||!(0,l.default)(this.state,t)}},{key:"componentDidUpdate",value:function(e){e.children!==this.props.children&&this.setHeightOffset()}},{key:"componentWillUnmount",value:function(){this.props.parent().removeEventListener("scroll",this.handleScroll),window.removeEventListener("scroll",this.handleScroll),this.props.parent().removeEventListener("resize",this.handleResize)}},{key:"render",value:function(){var e=this.props,t=e.className,n=h(e,["className"]);delete n.onUnpin,delete n.onPin,delete n.onUnfix,delete n.disableInlineStyles,delete n.disable,delete n.parent,delete n.children,delete n.upTolerance,delete n.downTolerance,delete n.pinStart,delete n.calcHeightOnResize;var a=n.style,r=n.wrapperStyle,s=h(n,["style","wrapperStyle"]),l={position:this.props.disable||"unfixed"===this.state.state?"relative":"fixed",top:0,left:0,right:0,zIndex:1,WebkitTransform:"translateY("+this.state.translateY+")",MsTransform:"translateY("+this.state.translateY+")",transform:"translateY("+this.state.translateY+")"},p=this.state.className;"unfixed"!==this.state.state&&(l=o({},l,{WebkitTransition:"all .2s ease-in-out",MozTransition:"all .2s ease-in-out",OTransition:"all .2s ease-in-out",transition:"all .2s ease-in-out"}),p+=" headroom--scrolled"),l=this.props.disableInlineStyles?a:o({},l,a);var u=o({},r,{height:this.state.height?this.state.height:null}),c=t?t+" headroom-wrapper":"headroom-wrapper";return i.default.createElement("div",{style:u,className:c},i.default.createElement("div",o({ref:this.setRef},s,{style:l,className:p}),this.props.children))}}]),t}();f.propTypes={className:s.default.string,parent:s.default.func,children:s.default.any.isRequired,disableInlineStyles:s.default.bool,disable:s.default.bool,upTolerance:s.default.number,downTolerance:s.default.number,onPin:s.default.func,onUnpin:s.default.func,onUnfix:s.default.func,wrapperStyle:s.default.object,pinStart:s.default.number,style:s.default.object,calcHeightOnResize:s.default.bool},f.defaultProps={parent:function(){return window},disableInlineStyles:!1,disable:!1,upTolerance:5,downTolerance:0,onPin:d,onUnpin:d,onUnfix:d,wrapperStyle:{},pinStart:0,calcHeightOnResize:!0},t.default=f},200:function(e,t,n){"use strict";var o=n(201);e.exports=function(e,t,n,a){var r=n?n.call(a,e,t):void 0;if(void 0!==r)return!!r;if(e===t)return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var i=o(e),s=o(t),l=i.length;if(l!==s.length)return!1;a=a||null;for(var p=Object.prototype.hasOwnProperty.bind(t),u=0;u<l;u++){var c=i[u];if(!p(c))return!1;var h=e[c],d=t[c],f=n?n.call(a,h,d,c):void 0;if(!1===f||void 0===f&&h!==d)return!1}return!0}},201:function(e,t,n){var o=n(202),a=n(203),r=n(204),i=/^\d+$/,s=Object.prototype.hasOwnProperty,l=o(Object,"keys"),p=9007199254740991;var u,c=(u="length",function(e){return null==e?void 0:e[u]});function h(e,t){return e="number"==typeof e||i.test(e)?+e:-1,t=null==t?p:t,e>-1&&e%1==0&&e<t}function d(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=p}function f(e){for(var t=function(e){if(null==e)return[];m(e)||(e=Object(e));var t=e.length;t=t&&d(t)&&(r(e)||a(e))&&t||0;var n=e.constructor,o=-1,i="function"==typeof n&&n.prototype===e,l=Array(t),p=t>0;for(;++o<t;)l[o]=o+"";for(var u in e)p&&h(u,t)||"constructor"==u&&(i||!s.call(e,u))||l.push(u);return l}(e),n=t.length,o=n&&e.length,i=!!o&&d(o)&&(r(e)||a(e)),l=-1,p=[];++l<n;){var u=t[l];(i&&h(u,o)||s.call(e,u))&&p.push(u)}return p}function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}var g=l?function(e){var t,n=null==e?void 0:e.constructor;return"function"==typeof n&&n.prototype===e||"function"!=typeof e&&(null!=(t=e)&&d(c(t)))?f(e):m(e)?l(e):[]}:f;e.exports=g},202:function(e,t){var n="[object Function]",o=/^\[object .+?Constructor\]$/;var a=Object.prototype,r=Function.prototype.toString,i=a.hasOwnProperty,s=a.toString,l=RegExp("^"+r.call(i).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e,t){var a=null==e?void 0:e[t];return function(e){return null!=e&&(function(e){return function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)&&s.call(e)==n}(e)?l.test(r.call(e)):function(e){return!!e&&"object"==typeof e}(e)&&o.test(e))}(a)?a:void 0}},203:function(e,t){var n=9007199254740991,o="[object Arguments]",a="[object Function]",r="[object GeneratorFunction]",i=Object.prototype,s=i.hasOwnProperty,l=i.toString,p=i.propertyIsEnumerable;e.exports=function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&function(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)?l.call(e):"";return t==a||t==r}(e)}(e)}(e)&&s.call(e,"callee")&&(!p.call(e,"callee")||l.call(e)==o)}},204:function(e,t){var n="[object Function]",o=/^\[object .+?Constructor\]$/;function a(e){return!!e&&"object"==typeof e}var r,i,s=Object.prototype,l=Function.prototype.toString,p=s.hasOwnProperty,u=s.toString,c=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),h=9007199254740991;var d=(r=Array,function(e){return null!=e&&(function(e){return function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)&&u.call(e)==n}(e)?c.test(l.call(e)):a(e)&&o.test(e))}(i=null==r?void 0:r["isArray"])?i:void 0)||function(e){return a(e)&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=h}(e.length)&&"[object Array]"==u.call(e)};e.exports=d},205:function(e,t,n){(function(t){for(var o=n(206),a="undefined"==typeof window?t:window,r=["moz","webkit"],i="AnimationFrame",s=a["request"+i],l=a["cancel"+i]||a["cancelRequest"+i],p=0;!s&&p<r.length;p++)s=a[r[p]+"Request"+i],l=a[r[p]+"Cancel"+i]||a[r[p]+"CancelRequest"+i];if(!s||!l){var u=0,c=0,h=[];s=function(e){if(0===h.length){var t=o(),n=Math.max(0,1e3/60-(t-u));u=n+t,setTimeout(function(){var e=h.slice(0);h.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(u)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return h.push({handle:++c,callback:e,cancelled:!1}),c},l=function(e){for(var t=0;t<h.length;t++)h[t].handle===e&&(h[t].cancelled=!0)}}e.exports=function(e){return s.call(a,e)},e.exports.cancel=function(){l.apply(a,arguments)},e.exports.polyfill=function(e){e||(e=a),e.requestAnimationFrame=s,e.cancelAnimationFrame=l}}).call(t,n(46))},206:function(e,t,n){(function(t){(function(){var n,o,a,r,i,s;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:void 0!==t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},o=t.hrtime,r=(n=function(){var e;return 1e9*(e=o())[0]+e[1]})(),s=1e9*t.uptime(),i=r-s):Date.now?(e.exports=function(){return Date.now()-a},a=Date.now()):(e.exports=function(){return(new Date).getTime()-a},a=(new Date).getTime())}).call(this)}).call(t,n(99))},207:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=t>=e?"down":"up",r=Math.abs(t-e);return n.disable?{action:"none",scrollDirection:a,distanceScrolled:r}:t<=n.pinStart&&"unfixed"!==o.state?{action:"unfix",scrollDirection:a,distanceScrolled:r}:t<=o.height&&"down"===a&&"unfixed"===o.state?{action:"none",scrollDirection:a,distanceScrolled:r}:"down"===a&&["pinned","unfixed"].indexOf(o.state)>=0&&t>o.height+n.pinStart&&r>n.downTolerance?{action:"unpin",scrollDirection:a,distanceScrolled:r}:"up"===a&&r>n.upTolerance&&["pinned","unfixed"].indexOf(o.state)<0?{action:"pin",scrollDirection:a,distanceScrolled:r}:"up"===a&&t<=o.height&&["pinned","unfixed"].indexOf(o.state)<0?{action:"pin",scrollDirection:a,distanceScrolled:r}:{action:"none",scrollDirection:a,distanceScrolled:r}}},211:function(e,t,n){"use strict";var o=n(0),a=n(212);e.exports=function e(t,n){for(var r,i,s,l,p=[],u="function"==typeof(n=n||{}).replace,c=0,h=t.length;c<h;c++)if(r=t[c],u&&(i=n.replace(r),o.isValidElement(i)))h>1&&(i=o.cloneElement(i,{key:c})),p.push(i);else if("text"!==r.type){if(s=a(r.attribs),l=null,"script"===r.type||"style"===r.type)r.children[0]&&(s.dangerouslySetInnerHTML={__html:r.children[0].data});else{if("tag"!==r.type)continue;"textarea"===r.name&&r.children[0]?s.defaultValue=r.children[0].data:r.children&&r.children.length&&(l=e(r.children,n))}h>1&&(s.key=c),p.push(o.createElement(r.name,s,l))}else p.push(r.data);return 1===p.length?p[0]:p}},212:function(e,t,n){"use strict";var o=n(102),a=n(213),r=n(217),i=a.config,s=a.HTMLDOMPropertyConfig.isCustomAttribute,l=n(103);l.injection.injectDOMPropertyConfig(a.HTMLDOMPropertyConfig),e.exports=function(e){e=e||{};var t,n,a,p={};for(t in e)n=e[t],s(t)?p[t]=n:(a=i.html[t.toLowerCase()])?l.properties.hasOwnProperty(a)&&l.properties[a].hasBooleanValue?p[a]=!0:p[a]=n:(a=i.svg[t])&&(p[a]=n);return null!=e.style&&(p.style=function(e){if("string"!=typeof e)throw new Error("`cssToJs`: first argument must be a string. ");var t={};return r(e,function(e,n){e&&n&&(t[o.camelCase(e)]=n)}),t}(e.style)),p}},213:function(e,t,n){"use strict";var o,a=n(102),r=n(214),i=n(216),s={html:{},svg:{}};for(o in s.html=a.invertObject(r.DOMAttributeNames),r.Properties)s.html[o.toLowerCase()]=o;for(o in s.svg=a.invertObject(i.DOMAttributeNames),i.Properties)s.html[o]=o;e.exports={config:s,HTMLDOMPropertyConfig:r,SVGDOMPropertyConfig:i}},214:function(e,t,n){"use strict";var o=n(103),a=o.injection.MUST_USE_PROPERTY,r=o.injection.HAS_BOOLEAN_VALUE,i=o.injection.HAS_NUMERIC_VALUE,s=o.injection.HAS_POSITIVE_NUMERIC_VALUE,l=o.injection.HAS_OVERLOADED_BOOLEAN_VALUE,p={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+o.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:r,allowTransparency:0,alt:0,as:0,async:r,autoComplete:0,autoPlay:r,capture:r,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:a|r,cite:0,classID:0,className:0,cols:s,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:r,controlsList:0,coords:0,crossOrigin:0,data:0,dateTime:0,default:r,defer:r,dir:0,disabled:r,download:l,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:r,formTarget:0,frameBorder:0,headers:0,height:0,hidden:r,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:r,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:a|r,muted:a|r,name:0,nonce:0,noValidate:r,open:r,optimum:0,pattern:0,placeholder:0,playsInline:r,poster:0,preload:0,profile:0,radioGroup:0,readOnly:r,referrerPolicy:0,rel:0,required:r,reversed:r,role:0,rows:s,rowSpan:i,sandbox:0,scope:0,scoped:r,scrolling:0,seamless:r,selected:a|r,shape:0,size:s,sizes:0,span:s,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:i,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:r,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}};e.exports=p},215:function(e,t,n){"use strict";e.exports=function(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var a=new Error(n);throw a.name="Invariant Violation",a.framesToPop=1,a}},216:function(e,t,n){"use strict";var o="http://www.w3.org/1999/xlink",a="http://www.w3.org/XML/1998/namespace",r={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},i={Properties:{},DOMAttributeNamespaces:{xlinkActuate:o,xlinkArcrole:o,xlinkHref:o,xlinkRole:o,xlinkShow:o,xlinkTitle:o,xlinkType:o,xmlBase:a,xmlLang:a,xmlSpace:a},DOMAttributeNames:{}};Object.keys(r).forEach(function(e){i.Properties[e]=0,r[e]&&(i.DOMAttributeNames[e]=r[e])}),e.exports=i},217:function(e,t,n){var o=n(218);e.exports=function(e,t){if(!e||"string"!=typeof e)return null;for(var n,a,r,i=o("p{"+e+"}").stylesheet.rules[0].declarations,s=null,l="function"==typeof t,p=0,u=i.length;p<u;p++)a=(n=i[p]).property,r=n.value,l?t(a,r,n):r&&(s||(s={}),s[a]=r);return s}},218:function(e,t){var n=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;function o(e){return e?e.replace(/^\s+|\s+$/g,""):""}e.exports=function(e,t){t=t||{};var a=1,r=1;function i(e){var t=e.match(/\n/g);t&&(a+=t.length);var n=e.lastIndexOf("\n");r=~n?e.length-n:r+e.length}function s(){var e={line:a,column:r};return function(t){return t.position=new l(e),m(),t}}function l(e){this.start=e,this.end={line:a,column:r},this.source=t.source}l.prototype.content=e;var p=[];function u(n){var o=new Error(t.source+":"+a+":"+r+": "+n);if(o.reason=n,o.filename=t.source,o.line=a,o.column=r,o.source=e,!t.silent)throw o;p.push(o)}function c(){return f(/^{\s*/)}function h(){return f(/^}/)}function d(){var t,n=[];for(m(),g(n);e.length&&"}"!=e.charAt(0)&&(t=T()||E());)!1!==t&&(n.push(t),g(n));return n}function f(t){var n=t.exec(e);if(n){var o=n[0];return i(o),e=e.slice(o.length),n}}function m(){f(/^\s*/)}function g(e){var t;for(e=e||[];t=w();)!1!==t&&e.push(t);return e}function w(){var t=s();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var n=2;""!=e.charAt(n)&&("*"!=e.charAt(n)||"/"!=e.charAt(n+1));)++n;if(n+=2,""===e.charAt(n-1))return u("End of comment missing");var o=e.slice(2,n-2);return r+=2,i(o),e=e.slice(n),r+=2,t({type:"comment",comment:o})}}function y(){var e=f(/^([^{]+)/);if(e)return o(e[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g,"").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g,function(e){return e.replace(/,/g,"‌")}).split(/\s*(?![^(]*\)),\s*/).map(function(e){return e.replace(/\u200C/g,",")})}function b(){var e=s(),t=f(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);if(t){if(t=o(t[0]),!f(/^:\s*/))return u("property missing ':'");var a=f(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/),r=e({type:"declaration",property:t.replace(n,""),value:a?o(a[0]).replace(n,""):""});return f(/^[;\s]*/),r}}function v(){var e,t=[];if(!c())return u("missing '{'");for(g(t);e=b();)!1!==e&&(t.push(e),g(t));return h()?t:u("missing '}'")}function k(){for(var e,t=[],n=s();e=f(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);)t.push(e[1]),f(/^,\s*/);if(t.length)return n({type:"keyframe",values:t,declarations:v()})}var q,I=_("import"),x=_("charset"),S=_("namespace");function _(e){var t=new RegExp("^@"+e+"\\s*([^;]+);");return function(){var n=s(),o=f(t);if(o){var a={type:e};return a[e]=o[1].trim(),n(a)}}}function T(){if("@"==e[0])return function(){var e=s();if(t=f(/^@([-\w]+)?keyframes\s*/)){var t,n=t[1];if(!(t=f(/^([-\w]+)\s*/)))return u("@keyframes missing name");var o,a=t[1];if(!c())return u("@keyframes missing '{'");for(var r=g();o=k();)r.push(o),r=r.concat(g());return h()?e({type:"keyframes",name:a,vendor:n,keyframes:r}):u("@keyframes missing '}'")}}()||function(){var e=s(),t=f(/^@media *([^{]+)/);if(t){var n=o(t[1]);if(!c())return u("@media missing '{'");var a=g().concat(d());return h()?e({type:"media",media:n,rules:a}):u("@media missing '}'")}}()||function(){var e=s(),t=f(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);if(t)return e({type:"custom-media",name:o(t[1]),media:o(t[2])})}()||function(){var e=s(),t=f(/^@supports *([^{]+)/);if(t){var n=o(t[1]);if(!c())return u("@supports missing '{'");var a=g().concat(d());return h()?e({type:"supports",supports:n,rules:a}):u("@supports missing '}'")}}()||I()||x()||S()||function(){var e=s(),t=f(/^@([-\w]+)?document *([^{]+)/);if(t){var n=o(t[1]),a=o(t[2]);if(!c())return u("@document missing '{'");var r=g().concat(d());return h()?e({type:"document",document:a,vendor:n,rules:r}):u("@document missing '}'")}}()||function(){var e=s();if(f(/^@page */)){var t=y()||[];if(!c())return u("@page missing '{'");for(var n,o=g();n=b();)o.push(n),o=o.concat(g());return h()?e({type:"page",selectors:t,declarations:o}):u("@page missing '}'")}}()||function(){var e=s();if(f(/^@host\s*/)){if(!c())return u("@host missing '{'");var t=g().concat(d());return h()?e({type:"host",rules:t}):u("@host missing '}'")}}()||function(){var e=s();if(f(/^@font-face\s*/)){if(!c())return u("@font-face missing '{'");for(var t,n=g();t=b();)n.push(t),n=n.concat(g());return h()?e({type:"font-face",declarations:n}):u("@font-face missing '}'")}}()}function E(){var e=s(),t=y();return t?(g(),e({type:"rule",selectors:t,declarations:v()})):u("selector missing")}return function e(t,n){var o=t&&"string"==typeof t.type;var a=o?t:n;for(var r in t){var i=t[r];Array.isArray(i)?i.forEach(function(t){e(t,a)}):i&&"object"==typeof i&&e(i,a)}o&&Object.defineProperty(t,"parent",{configurable:!0,writable:!0,enumerable:!1,value:n||null});return t}((q=d(),{type:"stylesheet",stylesheet:{source:t.source,rules:q,parsingErrors:p}}))}},219:function(e,t,n){"use strict";var o=n(220),a=n(104),r=a.formatDOM,i=a.isIE(9),s=/<(![a-zA-Z\s]+)>/;e.exports=function(e){if("string"!=typeof e)throw new TypeError("First argument must be a string.");if(!e)return[];var t,n=e.match(s);return n&&n[1]&&(t=n[1],i&&(e=e.replace(n[0],""))),r(o(e),null,t)}},220:function(e,t,n){"use strict";var o,a,r,i=n(104).isIE,s=/<([a-zA-Z]+[0-9]?)/,l=/<\/head>/i,p=/<\/body>/i,u=/<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\/?>/gi,c=i(),h=i(9);if("function"==typeof window.DOMParser){var d=new window.DOMParser,f=h?"text/xml":"text/html";o=function(e,t){return t&&(e=["<",t,">",e,"</",t,">"].join("")),h&&(e=e.replace(u,"<$1$2$3/>")),d.parseFromString(e,f)}}if("object"==typeof document.implementation){var m=document.implementation.createHTMLDocument(c?"HTML_DOM_PARSER_TITLE":void 0);a=function(e,t){if(t)return m.documentElement.getElementsByTagName(t)[0].innerHTML=e,m;try{return m.documentElement.innerHTML=e,m}catch(t){if(o)return o(e)}}}var g=document.createElement("template");g.content&&(r=function(e){return g.innerHTML=e,g.content.childNodes});var w=a||o;e.exports=function(e){var t,n,a,i,u=e.match(s);switch(u&&u[1]&&(t=u[1].toLowerCase()),t){case"html":if(o)return n=o(e),l.test(e)||(a=n.getElementsByTagName("head")[0])&&a.parentNode.removeChild(a),p.test(e)||(a=n.getElementsByTagName("body")[0])&&a.parentNode.removeChild(a),n.getElementsByTagName("html");break;case"head":if(w)return i=w(e).getElementsByTagName("head"),p.test(e)?i[0].parentNode.childNodes:i;break;case"body":if(w)return i=w(e).getElementsByTagName("body"),l.test(e)?i[0].parentNode.childNodes:i;break;default:if(r)return r(e);if(w)return w(e,"body").getElementsByTagName("body")[0].childNodes}return[]}},224:function(e,t,n){(function(e,o){var a;(function(){var r,i=200,s="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",p="__lodash_hash_undefined__",u=500,c="__lodash_placeholder__",h=1,d=2,f=4,m=1,g=2,w=1,y=2,b=4,v=8,k=16,q=32,I=64,x=128,S=256,_=512,T=30,E="...",A=800,M=16,C=1,W=2,O=1/0,P=9007199254740991,R=1.7976931348623157e308,j=NaN,D=4294967295,B=D-1,N=D>>>1,z=[["ary",x],["bind",w],["bindKey",y],["curry",v],["curryRight",k],["flip",_],["partial",q],["partialRight",I],["rearg",S]],L="[object Arguments]",H="[object Array]",U="[object AsyncFunction]",F="[object Boolean]",G="[object Date]",V="[object DOMException]",J="[object Error]",Y="[object Function]",Z="[object GeneratorFunction]",X="[object Map]",K="[object Number]",$="[object Null]",Q="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",oe="[object String]",ae="[object Symbol]",re="[object Undefined]",ie="[object WeakMap]",se="[object WeakSet]",le="[object ArrayBuffer]",pe="[object DataView]",ue="[object Float32Array]",ce="[object Float64Array]",he="[object Int8Array]",de="[object Int16Array]",fe="[object Int32Array]",me="[object Uint8Array]",ge="[object Uint8ClampedArray]",we="[object Uint16Array]",ye="[object Uint32Array]",be=/\b__p \+= '';/g,ve=/\b(__p \+=) '' \+/g,ke=/(__e\(.*?\)|\b__t\)) \+\n'';/g,qe=/&(?:amp|lt|gt|quot|#39);/g,Ie=/[&<>"']/g,xe=RegExp(qe.source),Se=RegExp(Ie.source),_e=/<%-([\s\S]+?)%>/g,Te=/<%([\s\S]+?)%>/g,Ee=/<%=([\s\S]+?)%>/g,Ae=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Me=/^\w*$/,Ce=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,We=/[\\^$.*+?()[\]{}|]/g,Oe=RegExp(We.source),Pe=/^\s+|\s+$/g,Re=/^\s+/,je=/\s+$/,De=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Be=/\{\n\/\* \[wrapped with (.+)\] \*/,Ne=/,? & /,ze=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Le=/\\(\\)?/g,He=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ue=/\w*$/,Fe=/^[-+]0x[0-9a-f]+$/i,Ge=/^0b[01]+$/i,Ve=/^\[object .+?Constructor\]$/,Je=/^0o[0-7]+$/i,Ye=/^(?:0|[1-9]\d*)$/,Ze=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Xe=/($^)/,Ke=/['\n\r\u2028\u2029\\]/g,$e="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qe="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Qe+"]",nt="["+$e+"]",ot="\\d+",at="[\\u2700-\\u27bf]",rt="[a-z\\xdf-\\xf6\\xf8-\\xff]",it="[^\\ud800-\\udfff"+Qe+ot+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",st="\\ud83c[\\udffb-\\udfff]",lt="[^\\ud800-\\udfff]",pt="(?:\\ud83c[\\udde6-\\uddff]){2}",ut="[\\ud800-\\udbff][\\udc00-\\udfff]",ct="[A-Z\\xc0-\\xd6\\xd8-\\xde]",ht="(?:"+rt+"|"+it+")",dt="(?:"+ct+"|"+it+")",ft="(?:"+nt+"|"+st+")"+"?",mt="[\\ufe0e\\ufe0f]?"+ft+("(?:\\u200d(?:"+[lt,pt,ut].join("|")+")[\\ufe0e\\ufe0f]?"+ft+")*"),gt="(?:"+[at,pt,ut].join("|")+")"+mt,wt="(?:"+[lt+nt+"?",nt,pt,ut,et].join("|")+")",yt=RegExp("['’]","g"),bt=RegExp(nt,"g"),vt=RegExp(st+"(?="+st+")|"+wt+mt,"g"),kt=RegExp([ct+"?"+rt+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ct,"$"].join("|")+")",dt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ct+ht,"$"].join("|")+")",ct+"?"+ht+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ct+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ot,gt].join("|"),"g"),qt=RegExp("[\\u200d\\ud800-\\udfff"+$e+"\\ufe0e\\ufe0f]"),It=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,xt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],St=-1,_t={};_t[ue]=_t[ce]=_t[he]=_t[de]=_t[fe]=_t[me]=_t[ge]=_t[we]=_t[ye]=!0,_t[L]=_t[H]=_t[le]=_t[F]=_t[pe]=_t[G]=_t[J]=_t[Y]=_t[X]=_t[K]=_t[Q]=_t[te]=_t[ne]=_t[oe]=_t[ie]=!1;var Tt={};Tt[L]=Tt[H]=Tt[le]=Tt[pe]=Tt[F]=Tt[G]=Tt[ue]=Tt[ce]=Tt[he]=Tt[de]=Tt[fe]=Tt[X]=Tt[K]=Tt[Q]=Tt[te]=Tt[ne]=Tt[oe]=Tt[ae]=Tt[me]=Tt[ge]=Tt[we]=Tt[ye]=!0,Tt[J]=Tt[Y]=Tt[ie]=!1;var Et={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},At=parseFloat,Mt=parseInt,Ct="object"==typeof e&&e&&e.Object===Object&&e,Wt="object"==typeof self&&self&&self.Object===Object&&self,Ot=Ct||Wt||Function("return this")(),Pt="object"==typeof t&&t&&!t.nodeType&&t,Rt=Pt&&"object"==typeof o&&o&&!o.nodeType&&o,jt=Rt&&Rt.exports===Pt,Dt=jt&&Ct.process,Bt=function(){try{var e=Rt&&Rt.require&&Rt.require("util").types;return e||Dt&&Dt.binding&&Dt.binding("util")}catch(e){}}(),Nt=Bt&&Bt.isArrayBuffer,zt=Bt&&Bt.isDate,Lt=Bt&&Bt.isMap,Ht=Bt&&Bt.isRegExp,Ut=Bt&&Bt.isSet,Ft=Bt&&Bt.isTypedArray;function Gt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Vt(e,t,n,o){for(var a=-1,r=null==e?0:e.length;++a<r;){var i=e[a];t(o,i,n(i),e)}return o}function Jt(e,t){for(var n=-1,o=null==e?0:e.length;++n<o&&!1!==t(e[n],n,e););return e}function Yt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Zt(e,t){for(var n=-1,o=null==e?0:e.length;++n<o;)if(!t(e[n],n,e))return!1;return!0}function Xt(e,t){for(var n=-1,o=null==e?0:e.length,a=0,r=[];++n<o;){var i=e[n];t(i,n,e)&&(r[a++]=i)}return r}function Kt(e,t){return!!(null==e?0:e.length)&&ln(e,t,0)>-1}function $t(e,t,n){for(var o=-1,a=null==e?0:e.length;++o<a;)if(n(t,e[o]))return!0;return!1}function Qt(e,t){for(var n=-1,o=null==e?0:e.length,a=Array(o);++n<o;)a[n]=t(e[n],n,e);return a}function en(e,t){for(var n=-1,o=t.length,a=e.length;++n<o;)e[a+n]=t[n];return e}function tn(e,t,n,o){var a=-1,r=null==e?0:e.length;for(o&&r&&(n=e[++a]);++a<r;)n=t(n,e[a],a,e);return n}function nn(e,t,n,o){var a=null==e?0:e.length;for(o&&a&&(n=e[--a]);a--;)n=t(n,e[a],a,e);return n}function on(e,t){for(var n=-1,o=null==e?0:e.length;++n<o;)if(t(e[n],n,e))return!0;return!1}var an=hn("length");function rn(e,t,n){var o;return n(e,function(e,n,a){if(t(e,n,a))return o=n,!1}),o}function sn(e,t,n,o){for(var a=e.length,r=n+(o?1:-1);o?r--:++r<a;)if(t(e[r],r,e))return r;return-1}function ln(e,t,n){return t==t?function(e,t,n){var o=n-1,a=e.length;for(;++o<a;)if(e[o]===t)return o;return-1}(e,t,n):sn(e,un,n)}function pn(e,t,n,o){for(var a=n-1,r=e.length;++a<r;)if(o(e[a],t))return a;return-1}function un(e){return e!=e}function cn(e,t){var n=null==e?0:e.length;return n?mn(e,t)/n:j}function hn(e){return function(t){return null==t?r:t[e]}}function dn(e){return function(t){return null==e?r:e[t]}}function fn(e,t,n,o,a){return a(e,function(e,a,r){n=o?(o=!1,e):t(n,e,a,r)}),n}function mn(e,t){for(var n,o=-1,a=e.length;++o<a;){var i=t(e[o]);i!==r&&(n=n===r?i:n+i)}return n}function gn(e,t){for(var n=-1,o=Array(e);++n<e;)o[n]=t(n);return o}function wn(e){return function(t){return e(t)}}function yn(e,t){return Qt(t,function(t){return e[t]})}function bn(e,t){return e.has(t)}function vn(e,t){for(var n=-1,o=e.length;++n<o&&ln(t,e[n],0)>-1;);return n}function kn(e,t){for(var n=e.length;n--&&ln(t,e[n],0)>-1;);return n}var qn=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),In=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function xn(e){return"\\"+Et[e]}function Sn(e){return qt.test(e)}function _n(e){var t=-1,n=Array(e.size);return e.forEach(function(e,o){n[++t]=[o,e]}),n}function Tn(e,t){return function(n){return e(t(n))}}function En(e,t){for(var n=-1,o=e.length,a=0,r=[];++n<o;){var i=e[n];i!==t&&i!==c||(e[n]=c,r[a++]=n)}return r}function An(e,t){return"__proto__"==t?r:e[t]}function Mn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function Cn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function Wn(e){return Sn(e)?function(e){var t=vt.lastIndex=0;for(;vt.test(e);)++t;return t}(e):an(e)}function On(e){return Sn(e)?function(e){return e.match(vt)||[]}(e):function(e){return e.split("")}(e)}var Pn=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Rn=function e(t){var n,o=(t=null==t?Ot:Rn.defaults(Ot.Object(),t,Rn.pick(Ot,xt))).Array,a=t.Date,$e=t.Error,Qe=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,ot=t.String,at=t.TypeError,rt=o.prototype,it=Qe.prototype,st=tt.prototype,lt=t["__core-js_shared__"],pt=it.toString,ut=st.hasOwnProperty,ct=0,ht=(n=/[^.]+$/.exec(lt&&lt.keys&&lt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",dt=st.toString,ft=pt.call(tt),mt=Ot._,gt=nt("^"+pt.call(ut).replace(We,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),wt=jt?t.Buffer:r,vt=t.Symbol,qt=t.Uint8Array,Et=wt?wt.allocUnsafe:r,Ct=Tn(tt.getPrototypeOf,tt),Wt=tt.create,Pt=st.propertyIsEnumerable,Rt=rt.splice,Dt=vt?vt.isConcatSpreadable:r,Bt=vt?vt.iterator:r,an=vt?vt.toStringTag:r,dn=function(){try{var e=zr(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),jn=t.clearTimeout!==Ot.clearTimeout&&t.clearTimeout,Dn=a&&a.now!==Ot.Date.now&&a.now,Bn=t.setTimeout!==Ot.setTimeout&&t.setTimeout,Nn=et.ceil,zn=et.floor,Ln=tt.getOwnPropertySymbols,Hn=wt?wt.isBuffer:r,Un=t.isFinite,Fn=rt.join,Gn=Tn(tt.keys,tt),Vn=et.max,Jn=et.min,Yn=a.now,Zn=t.parseInt,Xn=et.random,Kn=rt.reverse,$n=zr(t,"DataView"),Qn=zr(t,"Map"),eo=zr(t,"Promise"),to=zr(t,"Set"),no=zr(t,"WeakMap"),oo=zr(tt,"create"),ao=no&&new no,ro={},io=ci($n),so=ci(Qn),lo=ci(eo),po=ci(to),uo=ci(no),co=vt?vt.prototype:r,ho=co?co.valueOf:r,fo=co?co.toString:r;function mo(e){if(Es(e)&&!ws(e)&&!(e instanceof bo)){if(e instanceof yo)return e;if(ut.call(e,"__wrapped__"))return hi(e)}return new yo(e)}var go=function(){function e(){}return function(t){if(!Ts(t))return{};if(Wt)return Wt(t);e.prototype=t;var n=new e;return e.prototype=r,n}}();function wo(){}function yo(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=r}function bo(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=D,this.__views__=[]}function vo(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}function ko(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}function qo(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}function Io(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new qo;++t<n;)this.add(e[t])}function xo(e){var t=this.__data__=new ko(e);this.size=t.size}function So(e,t){var n=ws(e),o=!n&&gs(e),a=!n&&!o&&ks(e),r=!n&&!o&&!a&&js(e),i=n||o||a||r,s=i?gn(e.length,ot):[],l=s.length;for(var p in e)!t&&!ut.call(e,p)||i&&("length"==p||a&&("offset"==p||"parent"==p)||r&&("buffer"==p||"byteLength"==p||"byteOffset"==p)||Jr(p,l))||s.push(p);return s}function _o(e){var t=e.length;return t?e[Ia(0,t-1)]:r}function To(e,t){return li(ar(e),jo(t,0,e.length))}function Eo(e){return li(ar(e))}function Ao(e,t,n){(n===r||ds(e[t],n))&&(n!==r||t in e)||Po(e,t,n)}function Mo(e,t,n){var o=e[t];ut.call(e,t)&&ds(o,n)&&(n!==r||t in e)||Po(e,t,n)}function Co(e,t){for(var n=e.length;n--;)if(ds(e[n][0],t))return n;return-1}function Wo(e,t,n,o){return Lo(e,function(e,a,r){t(o,e,n(e),r)}),o}function Oo(e,t){return e&&rr(t,al(t),e)}function Po(e,t,n){"__proto__"==t&&dn?dn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Ro(e,t){for(var n=-1,a=t.length,i=o(a),s=null==e;++n<a;)i[n]=s?r:Qs(e,t[n]);return i}function jo(e,t,n){return e==e&&(n!==r&&(e=e<=n?e:n),t!==r&&(e=e>=t?e:t)),e}function Do(e,t,n,o,a,i){var s,l=t&h,p=t&d,u=t&f;if(n&&(s=a?n(e,o,a,i):n(e)),s!==r)return s;if(!Ts(e))return e;var c=ws(e);if(c){if(s=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&ut.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!l)return ar(e,s)}else{var m=Ur(e),g=m==Y||m==Z;if(ks(e))return $a(e,l);if(m==Q||m==L||g&&!a){if(s=p||g?{}:Gr(e),!l)return p?function(e,t){return rr(e,Hr(e),t)}(e,function(e,t){return e&&rr(t,rl(t),e)}(s,e)):function(e,t){return rr(e,Lr(e),t)}(e,Oo(s,e))}else{if(!Tt[m])return a?e:{};s=function(e,t,n){var o,a,r,i=e.constructor;switch(t){case le:return Qa(e);case F:case G:return new i(+e);case pe:return function(e,t){var n=t?Qa(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case ue:case ce:case he:case de:case fe:case me:case ge:case we:case ye:return er(e,n);case X:return new i;case K:case oe:return new i(e);case te:return(r=new(a=e).constructor(a.source,Ue.exec(a))).lastIndex=a.lastIndex,r;case ne:return new i;case ae:return o=e,ho?tt(ho.call(o)):{}}}(e,m,l)}}i||(i=new xo);var w=i.get(e);if(w)return w;if(i.set(e,s),Os(e))return e.forEach(function(o){s.add(Do(o,t,n,o,e,i))}),s;if(As(e))return e.forEach(function(o,a){s.set(a,Do(o,t,n,a,e,i))}),s;var y=c?r:(u?p?Or:Wr:p?rl:al)(e);return Jt(y||e,function(o,a){y&&(o=e[a=o]),Mo(s,a,Do(o,t,n,a,e,i))}),s}function Bo(e,t,n){var o=n.length;if(null==e)return!o;for(e=tt(e);o--;){var a=n[o],i=t[a],s=e[a];if(s===r&&!(a in e)||!i(s))return!1}return!0}function No(e,t,n){if("function"!=typeof e)throw new at(l);return ai(function(){e.apply(r,n)},t)}function zo(e,t,n,o){var a=-1,r=Kt,s=!0,l=e.length,p=[],u=t.length;if(!l)return p;n&&(t=Qt(t,wn(n))),o?(r=$t,s=!1):t.length>=i&&(r=bn,s=!1,t=new Io(t));e:for(;++a<l;){var c=e[a],h=null==n?c:n(c);if(c=o||0!==c?c:0,s&&h==h){for(var d=u;d--;)if(t[d]===h)continue e;p.push(c)}else r(t,h,o)||p.push(c)}return p}mo.templateSettings={escape:_e,evaluate:Te,interpolate:Ee,variable:"",imports:{_:mo}},mo.prototype=wo.prototype,mo.prototype.constructor=mo,yo.prototype=go(wo.prototype),yo.prototype.constructor=yo,bo.prototype=go(wo.prototype),bo.prototype.constructor=bo,vo.prototype.clear=function(){this.__data__=oo?oo(null):{},this.size=0},vo.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},vo.prototype.get=function(e){var t=this.__data__;if(oo){var n=t[e];return n===p?r:n}return ut.call(t,e)?t[e]:r},vo.prototype.has=function(e){var t=this.__data__;return oo?t[e]!==r:ut.call(t,e)},vo.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=oo&&t===r?p:t,this},ko.prototype.clear=function(){this.__data__=[],this.size=0},ko.prototype.delete=function(e){var t=this.__data__,n=Co(t,e);return!(n<0||(n==t.length-1?t.pop():Rt.call(t,n,1),--this.size,0))},ko.prototype.get=function(e){var t=this.__data__,n=Co(t,e);return n<0?r:t[n][1]},ko.prototype.has=function(e){return Co(this.__data__,e)>-1},ko.prototype.set=function(e,t){var n=this.__data__,o=Co(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this},qo.prototype.clear=function(){this.size=0,this.__data__={hash:new vo,map:new(Qn||ko),string:new vo}},qo.prototype.delete=function(e){var t=Br(this,e).delete(e);return this.size-=t?1:0,t},qo.prototype.get=function(e){return Br(this,e).get(e)},qo.prototype.has=function(e){return Br(this,e).has(e)},qo.prototype.set=function(e,t){var n=Br(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this},Io.prototype.add=Io.prototype.push=function(e){return this.__data__.set(e,p),this},Io.prototype.has=function(e){return this.__data__.has(e)},xo.prototype.clear=function(){this.__data__=new ko,this.size=0},xo.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},xo.prototype.get=function(e){return this.__data__.get(e)},xo.prototype.has=function(e){return this.__data__.has(e)},xo.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ko){var o=n.__data__;if(!Qn||o.length<i-1)return o.push([e,t]),this.size=++n.size,this;n=this.__data__=new qo(o)}return n.set(e,t),this.size=n.size,this};var Lo=lr(Zo),Ho=lr(Xo,!0);function Uo(e,t){var n=!0;return Lo(e,function(e,o,a){return n=!!t(e,o,a)}),n}function Fo(e,t,n){for(var o=-1,a=e.length;++o<a;){var i=e[o],s=t(i);if(null!=s&&(l===r?s==s&&!Rs(s):n(s,l)))var l=s,p=i}return p}function Go(e,t){var n=[];return Lo(e,function(e,o,a){t(e,o,a)&&n.push(e)}),n}function Vo(e,t,n,o,a){var r=-1,i=e.length;for(n||(n=Vr),a||(a=[]);++r<i;){var s=e[r];t>0&&n(s)?t>1?Vo(s,t-1,n,o,a):en(a,s):o||(a[a.length]=s)}return a}var Jo=pr(),Yo=pr(!0);function Zo(e,t){return e&&Jo(e,t,al)}function Xo(e,t){return e&&Yo(e,t,al)}function Ko(e,t){return Xt(t,function(t){return xs(e[t])})}function $o(e,t){for(var n=0,o=(t=Ya(t,e)).length;null!=e&&n<o;)e=e[ui(t[n++])];return n&&n==o?e:r}function Qo(e,t,n){var o=t(e);return ws(e)?o:en(o,n(e))}function ea(e){return null==e?e===r?re:$:an&&an in tt(e)?function(e){var t=ut.call(e,an),n=e[an];try{e[an]=r;var o=!0}catch(e){}var a=dt.call(e);return o&&(t?e[an]=n:delete e[an]),a}(e):function(e){return dt.call(e)}(e)}function ta(e,t){return e>t}function na(e,t){return null!=e&&ut.call(e,t)}function oa(e,t){return null!=e&&t in tt(e)}function aa(e,t,n){for(var a=n?$t:Kt,i=e[0].length,s=e.length,l=s,p=o(s),u=1/0,c=[];l--;){var h=e[l];l&&t&&(h=Qt(h,wn(t))),u=Jn(h.length,u),p[l]=!n&&(t||i>=120&&h.length>=120)?new Io(l&&h):r}h=e[0];var d=-1,f=p[0];e:for(;++d<i&&c.length<u;){var m=h[d],g=t?t(m):m;if(m=n||0!==m?m:0,!(f?bn(f,g):a(c,g,n))){for(l=s;--l;){var w=p[l];if(!(w?bn(w,g):a(e[l],g,n)))continue e}f&&f.push(g),c.push(m)}}return c}function ra(e,t,n){var o=null==(e=ni(e,t=Ya(t,e)))?e:e[ui(Ii(t))];return null==o?r:Gt(o,e,n)}function ia(e){return Es(e)&&ea(e)==L}function sa(e,t,n,o,a){return e===t||(null==e||null==t||!Es(e)&&!Es(t)?e!=e&&t!=t:function(e,t,n,o,a,i){var s=ws(e),l=ws(t),p=s?H:Ur(e),u=l?H:Ur(t),c=(p=p==L?Q:p)==Q,h=(u=u==L?Q:u)==Q,d=p==u;if(d&&ks(e)){if(!ks(t))return!1;s=!0,c=!1}if(d&&!c)return i||(i=new xo),s||js(e)?Mr(e,t,n,o,a,i):function(e,t,n,o,a,r,i){switch(n){case pe:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case le:return!(e.byteLength!=t.byteLength||!r(new qt(e),new qt(t)));case F:case G:case K:return ds(+e,+t);case J:return e.name==t.name&&e.message==t.message;case te:case oe:return e==t+"";case X:var s=_n;case ne:var l=o&m;if(s||(s=Mn),e.size!=t.size&&!l)return!1;var p=i.get(e);if(p)return p==t;o|=g,i.set(e,t);var u=Mr(s(e),s(t),o,a,r,i);return i.delete(e),u;case ae:if(ho)return ho.call(e)==ho.call(t)}return!1}(e,t,p,n,o,a,i);if(!(n&m)){var f=c&&ut.call(e,"__wrapped__"),w=h&&ut.call(t,"__wrapped__");if(f||w){var y=f?e.value():e,b=w?t.value():t;return i||(i=new xo),a(y,b,n,o,i)}}return!!d&&(i||(i=new xo),function(e,t,n,o,a,i){var s=n&m,l=Wr(e),p=l.length,u=Wr(t).length;if(p!=u&&!s)return!1;for(var c=p;c--;){var h=l[c];if(!(s?h in t:ut.call(t,h)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var f=!0;i.set(e,t),i.set(t,e);for(var g=s;++c<p;){h=l[c];var w=e[h],y=t[h];if(o)var b=s?o(y,w,h,t,e,i):o(w,y,h,e,t,i);if(!(b===r?w===y||a(w,y,n,o,i):b)){f=!1;break}g||(g="constructor"==h)}if(f&&!g){var v=e.constructor,k=t.constructor;v!=k&&"constructor"in e&&"constructor"in t&&!("function"==typeof v&&v instanceof v&&"function"==typeof k&&k instanceof k)&&(f=!1)}return i.delete(e),i.delete(t),f}(e,t,n,o,a,i))}(e,t,n,o,sa,a))}function la(e,t,n,o){var a=n.length,i=a,s=!o;if(null==e)return!i;for(e=tt(e);a--;){var l=n[a];if(s&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++a<i;){var p=(l=n[a])[0],u=e[p],c=l[1];if(s&&l[2]){if(u===r&&!(p in e))return!1}else{var h=new xo;if(o)var d=o(u,c,p,e,t,h);if(!(d===r?sa(c,u,m|g,o,h):d))return!1}}return!0}function pa(e){return!(!Ts(e)||ht&&ht in e)&&(xs(e)?gt:Ve).test(ci(e))}function ua(e){return"function"==typeof e?e:null==e?Ml:"object"==typeof e?ws(e)?ga(e[0],e[1]):ma(e):Nl(e)}function ca(e){if(!$r(e))return Gn(e);var t=[];for(var n in tt(e))ut.call(e,n)&&"constructor"!=n&&t.push(n);return t}function ha(e){if(!Ts(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=$r(e),n=[];for(var o in e)("constructor"!=o||!t&&ut.call(e,o))&&n.push(o);return n}function da(e,t){return e<t}function fa(e,t){var n=-1,a=bs(e)?o(e.length):[];return Lo(e,function(e,o,r){a[++n]=t(e,o,r)}),a}function ma(e){var t=Nr(e);return 1==t.length&&t[0][2]?ei(t[0][0],t[0][1]):function(n){return n===e||la(n,e,t)}}function ga(e,t){return Zr(e)&&Qr(t)?ei(ui(e),t):function(n){var o=Qs(n,e);return o===r&&o===t?el(n,e):sa(t,o,m|g)}}function wa(e,t,n,o,a){e!==t&&Jo(t,function(i,s){if(Ts(i))a||(a=new xo),function(e,t,n,o,a,i,s){var l=An(e,n),p=An(t,n),u=s.get(p);if(u)Ao(e,n,u);else{var c=i?i(l,p,n+"",e,t,s):r,h=c===r;if(h){var d=ws(p),f=!d&&ks(p),m=!d&&!f&&js(p);c=p,d||f||m?ws(l)?c=l:vs(l)?c=ar(l):f?(h=!1,c=$a(p,!0)):m?(h=!1,c=er(p,!0)):c=[]:Cs(p)||gs(p)?(c=l,gs(l)?c=Fs(l):(!Ts(l)||o&&xs(l))&&(c=Gr(p))):h=!1}h&&(s.set(p,c),a(c,p,o,i,s),s.delete(p)),Ao(e,n,c)}}(e,t,s,n,wa,o,a);else{var l=o?o(An(e,s),i,s+"",e,t,a):r;l===r&&(l=i),Ao(e,s,l)}},rl)}function ya(e,t){var n=e.length;if(n)return Jr(t+=t<0?n:0,n)?e[t]:r}function ba(e,t,n){var o=-1;return t=Qt(t.length?t:[Ml],wn(Dr())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(fa(e,function(e,n,a){return{criteria:Qt(t,function(t){return t(e)}),index:++o,value:e}}),function(e,t){return function(e,t,n){for(var o=-1,a=e.criteria,r=t.criteria,i=a.length,s=n.length;++o<i;){var l=tr(a[o],r[o]);if(l){if(o>=s)return l;var p=n[o];return l*("desc"==p?-1:1)}}return e.index-t.index}(e,t,n)})}function va(e,t,n){for(var o=-1,a=t.length,r={};++o<a;){var i=t[o],s=$o(e,i);n(s,i)&&Ea(r,Ya(i,e),s)}return r}function ka(e,t,n,o){var a=o?pn:ln,r=-1,i=t.length,s=e;for(e===t&&(t=ar(t)),n&&(s=Qt(e,wn(n)));++r<i;)for(var l=0,p=t[r],u=n?n(p):p;(l=a(s,u,l,o))>-1;)s!==e&&Rt.call(s,l,1),Rt.call(e,l,1);return e}function qa(e,t){for(var n=e?t.length:0,o=n-1;n--;){var a=t[n];if(n==o||a!==r){var r=a;Jr(a)?Rt.call(e,a,1):za(e,a)}}return e}function Ia(e,t){return e+zn(Xn()*(t-e+1))}function xa(e,t){var n="";if(!e||t<1||t>P)return n;do{t%2&&(n+=e),(t=zn(t/2))&&(e+=e)}while(t);return n}function Sa(e,t){return ri(ti(e,t,Ml),e+"")}function _a(e){return _o(dl(e))}function Ta(e,t){var n=dl(e);return li(n,jo(t,0,n.length))}function Ea(e,t,n,o){if(!Ts(e))return e;for(var a=-1,i=(t=Ya(t,e)).length,s=i-1,l=e;null!=l&&++a<i;){var p=ui(t[a]),u=n;if(a!=s){var c=l[p];(u=o?o(c,p,l):r)===r&&(u=Ts(c)?c:Jr(t[a+1])?[]:{})}Mo(l,p,u),l=l[p]}return e}var Aa=ao?function(e,t){return ao.set(e,t),e}:Ml,Ma=dn?function(e,t){return dn(e,"toString",{configurable:!0,enumerable:!1,value:Tl(t),writable:!0})}:Ml;function Ca(e){return li(dl(e))}function Wa(e,t,n){var a=-1,r=e.length;t<0&&(t=-t>r?0:r+t),(n=n>r?r:n)<0&&(n+=r),r=t>n?0:n-t>>>0,t>>>=0;for(var i=o(r);++a<r;)i[a]=e[a+t];return i}function Oa(e,t){var n;return Lo(e,function(e,o,a){return!(n=t(e,o,a))}),!!n}function Pa(e,t,n){var o=0,a=null==e?o:e.length;if("number"==typeof t&&t==t&&a<=N){for(;o<a;){var r=o+a>>>1,i=e[r];null!==i&&!Rs(i)&&(n?i<=t:i<t)?o=r+1:a=r}return a}return Ra(e,t,Ml,n)}function Ra(e,t,n,o){t=n(t);for(var a=0,i=null==e?0:e.length,s=t!=t,l=null===t,p=Rs(t),u=t===r;a<i;){var c=zn((a+i)/2),h=n(e[c]),d=h!==r,f=null===h,m=h==h,g=Rs(h);if(s)var w=o||m;else w=u?m&&(o||d):l?m&&d&&(o||!f):p?m&&d&&!f&&(o||!g):!f&&!g&&(o?h<=t:h<t);w?a=c+1:i=c}return Jn(i,B)}function ja(e,t){for(var n=-1,o=e.length,a=0,r=[];++n<o;){var i=e[n],s=t?t(i):i;if(!n||!ds(s,l)){var l=s;r[a++]=0===i?0:i}}return r}function Da(e){return"number"==typeof e?e:Rs(e)?j:+e}function Ba(e){if("string"==typeof e)return e;if(ws(e))return Qt(e,Ba)+"";if(Rs(e))return fo?fo.call(e):"";var t=e+"";return"0"==t&&1/e==-O?"-0":t}function Na(e,t,n){var o=-1,a=Kt,r=e.length,s=!0,l=[],p=l;if(n)s=!1,a=$t;else if(r>=i){var u=t?null:xr(e);if(u)return Mn(u);s=!1,a=bn,p=new Io}else p=t?[]:l;e:for(;++o<r;){var c=e[o],h=t?t(c):c;if(c=n||0!==c?c:0,s&&h==h){for(var d=p.length;d--;)if(p[d]===h)continue e;t&&p.push(h),l.push(c)}else a(p,h,n)||(p!==l&&p.push(h),l.push(c))}return l}function za(e,t){return null==(e=ni(e,t=Ya(t,e)))||delete e[ui(Ii(t))]}function La(e,t,n,o){return Ea(e,t,n($o(e,t)),o)}function Ha(e,t,n,o){for(var a=e.length,r=o?a:-1;(o?r--:++r<a)&&t(e[r],r,e););return n?Wa(e,o?0:r,o?r+1:a):Wa(e,o?r+1:0,o?a:r)}function Ua(e,t){var n=e;return n instanceof bo&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function Fa(e,t,n){var a=e.length;if(a<2)return a?Na(e[0]):[];for(var r=-1,i=o(a);++r<a;)for(var s=e[r],l=-1;++l<a;)l!=r&&(i[r]=zo(i[r]||s,e[l],t,n));return Na(Vo(i,1),t,n)}function Ga(e,t,n){for(var o=-1,a=e.length,i=t.length,s={};++o<a;){var l=o<i?t[o]:r;n(s,e[o],l)}return s}function Va(e){return vs(e)?e:[]}function Ja(e){return"function"==typeof e?e:Ml}function Ya(e,t){return ws(e)?e:Zr(e,t)?[e]:pi(Gs(e))}var Za=Sa;function Xa(e,t,n){var o=e.length;return n=n===r?o:n,!t&&n>=o?e:Wa(e,t,n)}var Ka=jn||function(e){return Ot.clearTimeout(e)};function $a(e,t){if(t)return e.slice();var n=e.length,o=Et?Et(n):new e.constructor(n);return e.copy(o),o}function Qa(e){var t=new e.constructor(e.byteLength);return new qt(t).set(new qt(e)),t}function er(e,t){var n=t?Qa(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function tr(e,t){if(e!==t){var n=e!==r,o=null===e,a=e==e,i=Rs(e),s=t!==r,l=null===t,p=t==t,u=Rs(t);if(!l&&!u&&!i&&e>t||i&&s&&p&&!l&&!u||o&&s&&p||!n&&p||!a)return 1;if(!o&&!i&&!u&&e<t||u&&n&&a&&!o&&!i||l&&n&&a||!s&&a||!p)return-1}return 0}function nr(e,t,n,a){for(var r=-1,i=e.length,s=n.length,l=-1,p=t.length,u=Vn(i-s,0),c=o(p+u),h=!a;++l<p;)c[l]=t[l];for(;++r<s;)(h||r<i)&&(c[n[r]]=e[r]);for(;u--;)c[l++]=e[r++];return c}function or(e,t,n,a){for(var r=-1,i=e.length,s=-1,l=n.length,p=-1,u=t.length,c=Vn(i-l,0),h=o(c+u),d=!a;++r<c;)h[r]=e[r];for(var f=r;++p<u;)h[f+p]=t[p];for(;++s<l;)(d||r<i)&&(h[f+n[s]]=e[r++]);return h}function ar(e,t){var n=-1,a=e.length;for(t||(t=o(a));++n<a;)t[n]=e[n];return t}function rr(e,t,n,o){var a=!n;n||(n={});for(var i=-1,s=t.length;++i<s;){var l=t[i],p=o?o(n[l],e[l],l,n,e):r;p===r&&(p=e[l]),a?Po(n,l,p):Mo(n,l,p)}return n}function ir(e,t){return function(n,o){var a=ws(n)?Vt:Wo,r=t?t():{};return a(n,e,Dr(o,2),r)}}function sr(e){return Sa(function(t,n){var o=-1,a=n.length,i=a>1?n[a-1]:r,s=a>2?n[2]:r;for(i=e.length>3&&"function"==typeof i?(a--,i):r,s&&Yr(n[0],n[1],s)&&(i=a<3?r:i,a=1),t=tt(t);++o<a;){var l=n[o];l&&e(t,l,o,i)}return t})}function lr(e,t){return function(n,o){if(null==n)return n;if(!bs(n))return e(n,o);for(var a=n.length,r=t?a:-1,i=tt(n);(t?r--:++r<a)&&!1!==o(i[r],r,i););return n}}function pr(e){return function(t,n,o){for(var a=-1,r=tt(t),i=o(t),s=i.length;s--;){var l=i[e?s:++a];if(!1===n(r[l],l,r))break}return t}}function ur(e){return function(t){var n=Sn(t=Gs(t))?On(t):r,o=n?n[0]:t.charAt(0),a=n?Xa(n,1).join(""):t.slice(1);return o[e]()+a}}function cr(e){return function(t){return tn(xl(gl(t).replace(yt,"")),e,"")}}function hr(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=go(e.prototype),o=e.apply(n,t);return Ts(o)?o:n}}function dr(e){return function(t,n,o){var a=tt(t);if(!bs(t)){var i=Dr(n,3);t=al(t),n=function(e){return i(a[e],e,a)}}var s=e(t,n,o);return s>-1?a[i?t[s]:s]:r}}function fr(e){return Cr(function(t){var n=t.length,o=n,a=yo.prototype.thru;for(e&&t.reverse();o--;){var i=t[o];if("function"!=typeof i)throw new at(l);if(a&&!s&&"wrapper"==Rr(i))var s=new yo([],!0)}for(o=s?o:n;++o<n;){var p=Rr(i=t[o]),u="wrapper"==p?Pr(i):r;s=u&&Xr(u[0])&&u[1]==(x|v|q|S)&&!u[4].length&&1==u[9]?s[Rr(u[0])].apply(s,u[3]):1==i.length&&Xr(i)?s[p]():s.thru(i)}return function(){var e=arguments,o=e[0];if(s&&1==e.length&&ws(o))return s.plant(o).value();for(var a=0,r=n?t[a].apply(this,e):o;++a<n;)r=t[a].call(this,r);return r}})}function mr(e,t,n,a,i,s,l,p,u,c){var h=t&x,d=t&w,f=t&y,m=t&(v|k),g=t&_,b=f?r:hr(e);return function w(){for(var y=arguments.length,v=o(y),k=y;k--;)v[k]=arguments[k];if(m)var q=jr(w),I=function(e,t){for(var n=e.length,o=0;n--;)e[n]===t&&++o;return o}(v,q);if(a&&(v=nr(v,a,i,m)),s&&(v=or(v,s,l,m)),y-=I,m&&y<c){var x=En(v,q);return qr(e,t,mr,w.placeholder,n,v,x,p,u,c-y)}var S=d?n:this,_=f?S[e]:e;return y=v.length,p?v=function(e,t){for(var n=e.length,o=Jn(t.length,n),a=ar(e);o--;){var i=t[o];e[o]=Jr(i,n)?a[i]:r}return e}(v,p):g&&y>1&&v.reverse(),h&&u<y&&(v.length=u),this&&this!==Ot&&this instanceof w&&(_=b||hr(_)),_.apply(S,v)}}function gr(e,t){return function(n,o){return function(e,t,n,o){return Zo(e,function(e,a,r){t(o,n(e),a,r)}),o}(n,e,t(o),{})}}function wr(e,t){return function(n,o){var a;if(n===r&&o===r)return t;if(n!==r&&(a=n),o!==r){if(a===r)return o;"string"==typeof n||"string"==typeof o?(n=Ba(n),o=Ba(o)):(n=Da(n),o=Da(o)),a=e(n,o)}return a}}function yr(e){return Cr(function(t){return t=Qt(t,wn(Dr())),Sa(function(n){var o=this;return e(t,function(e){return Gt(e,o,n)})})})}function br(e,t){var n=(t=t===r?" ":Ba(t)).length;if(n<2)return n?xa(t,e):t;var o=xa(t,Nn(e/Wn(t)));return Sn(t)?Xa(On(o),0,e).join(""):o.slice(0,e)}function vr(e){return function(t,n,a){return a&&"number"!=typeof a&&Yr(t,n,a)&&(n=a=r),t=zs(t),n===r?(n=t,t=0):n=zs(n),function(e,t,n,a){for(var r=-1,i=Vn(Nn((t-e)/(n||1)),0),s=o(i);i--;)s[a?i:++r]=e,e+=n;return s}(t,n,a=a===r?t<n?1:-1:zs(a),e)}}function kr(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Us(t),n=Us(n)),e(t,n)}}function qr(e,t,n,o,a,i,s,l,p,u){var c=t&v;t|=c?q:I,(t&=~(c?I:q))&b||(t&=~(w|y));var h=[e,t,a,c?i:r,c?s:r,c?r:i,c?r:s,l,p,u],d=n.apply(r,h);return Xr(e)&&oi(d,h),d.placeholder=o,ii(d,e,t)}function Ir(e){var t=et[e];return function(e,n){if(e=Us(e),n=null==n?0:Jn(Ls(n),292)){var o=(Gs(e)+"e").split("e");return+((o=(Gs(t(o[0]+"e"+(+o[1]+n)))+"e").split("e"))[0]+"e"+(+o[1]-n))}return t(e)}}var xr=to&&1/Mn(new to([,-0]))[1]==O?function(e){return new to(e)}:Rl;function Sr(e){return function(t){var n=Ur(t);return n==X?_n(t):n==ne?Cn(t):function(e,t){return Qt(t,function(t){return[t,e[t]]})}(t,e(t))}}function _r(e,t,n,a,i,s,p,u){var h=t&y;if(!h&&"function"!=typeof e)throw new at(l);var d=a?a.length:0;if(d||(t&=~(q|I),a=i=r),p=p===r?p:Vn(Ls(p),0),u=u===r?u:Ls(u),d-=i?i.length:0,t&I){var f=a,m=i;a=i=r}var g=h?r:Pr(e),_=[e,t,n,a,i,f,m,s,p,u];if(g&&function(e,t){var n=e[1],o=t[1],a=n|o,r=a<(w|y|x),i=o==x&&n==v||o==x&&n==S&&e[7].length<=t[8]||o==(x|S)&&t[7].length<=t[8]&&n==v;if(!r&&!i)return e;o&w&&(e[2]=t[2],a|=n&w?0:b);var s=t[3];if(s){var l=e[3];e[3]=l?nr(l,s,t[4]):s,e[4]=l?En(e[3],c):t[4]}(s=t[5])&&(l=e[5],e[5]=l?or(l,s,t[6]):s,e[6]=l?En(e[5],c):t[6]),(s=t[7])&&(e[7]=s),o&x&&(e[8]=null==e[8]?t[8]:Jn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=a}(_,g),e=_[0],t=_[1],n=_[2],a=_[3],i=_[4],!(u=_[9]=_[9]===r?h?0:e.length:Vn(_[9]-d,0))&&t&(v|k)&&(t&=~(v|k)),t&&t!=w)T=t==v||t==k?function(e,t,n){var a=hr(e);return function i(){for(var s=arguments.length,l=o(s),p=s,u=jr(i);p--;)l[p]=arguments[p];var c=s<3&&l[0]!==u&&l[s-1]!==u?[]:En(l,u);return(s-=c.length)<n?qr(e,t,mr,i.placeholder,r,l,c,r,r,n-s):Gt(this&&this!==Ot&&this instanceof i?a:e,this,l)}}(e,t,u):t!=q&&t!=(w|q)||i.length?mr.apply(r,_):function(e,t,n,a){var r=t&w,i=hr(e);return function t(){for(var s=-1,l=arguments.length,p=-1,u=a.length,c=o(u+l),h=this&&this!==Ot&&this instanceof t?i:e;++p<u;)c[p]=a[p];for(;l--;)c[p++]=arguments[++s];return Gt(h,r?n:this,c)}}(e,t,n,a);else var T=function(e,t,n){var o=t&w,a=hr(e);return function t(){return(this&&this!==Ot&&this instanceof t?a:e).apply(o?n:this,arguments)}}(e,t,n);return ii((g?Aa:oi)(T,_),e,t)}function Tr(e,t,n,o){return e===r||ds(e,st[n])&&!ut.call(o,n)?t:e}function Er(e,t,n,o,a,i){return Ts(e)&&Ts(t)&&(i.set(t,e),wa(e,t,r,Er,i),i.delete(t)),e}function Ar(e){return Cs(e)?r:e}function Mr(e,t,n,o,a,i){var s=n&m,l=e.length,p=t.length;if(l!=p&&!(s&&p>l))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var c=-1,h=!0,d=n&g?new Io:r;for(i.set(e,t),i.set(t,e);++c<l;){var f=e[c],w=t[c];if(o)var y=s?o(w,f,c,t,e,i):o(f,w,c,e,t,i);if(y!==r){if(y)continue;h=!1;break}if(d){if(!on(t,function(e,t){if(!bn(d,t)&&(f===e||a(f,e,n,o,i)))return d.push(t)})){h=!1;break}}else if(f!==w&&!a(f,w,n,o,i)){h=!1;break}}return i.delete(e),i.delete(t),h}function Cr(e){return ri(ti(e,r,yi),e+"")}function Wr(e){return Qo(e,al,Lr)}function Or(e){return Qo(e,rl,Hr)}var Pr=ao?function(e){return ao.get(e)}:Rl;function Rr(e){for(var t=e.name+"",n=ro[t],o=ut.call(ro,t)?n.length:0;o--;){var a=n[o],r=a.func;if(null==r||r==e)return a.name}return t}function jr(e){return(ut.call(mo,"placeholder")?mo:e).placeholder}function Dr(){var e=mo.iteratee||Cl;return e=e===Cl?ua:e,arguments.length?e(arguments[0],arguments[1]):e}function Br(e,t){var n,o,a=e.__data__;return("string"==(o=typeof(n=t))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==n:null===n)?a["string"==typeof t?"string":"hash"]:a.map}function Nr(e){for(var t=al(e),n=t.length;n--;){var o=t[n],a=e[o];t[n]=[o,a,Qr(a)]}return t}function zr(e,t){var n=function(e,t){return null==e?r:e[t]}(e,t);return pa(n)?n:r}var Lr=Ln?function(e){return null==e?[]:(e=tt(e),Xt(Ln(e),function(t){return Pt.call(e,t)}))}:Hl,Hr=Ln?function(e){for(var t=[];e;)en(t,Lr(e)),e=Ct(e);return t}:Hl,Ur=ea;function Fr(e,t,n){for(var o=-1,a=(t=Ya(t,e)).length,r=!1;++o<a;){var i=ui(t[o]);if(!(r=null!=e&&n(e,i)))break;e=e[i]}return r||++o!=a?r:!!(a=null==e?0:e.length)&&_s(a)&&Jr(i,a)&&(ws(e)||gs(e))}function Gr(e){return"function"!=typeof e.constructor||$r(e)?{}:go(Ct(e))}function Vr(e){return ws(e)||gs(e)||!!(Dt&&e&&e[Dt])}function Jr(e,t){var n=typeof e;return!!(t=null==t?P:t)&&("number"==n||"symbol"!=n&&Ye.test(e))&&e>-1&&e%1==0&&e<t}function Yr(e,t,n){if(!Ts(n))return!1;var o=typeof t;return!!("number"==o?bs(n)&&Jr(t,n.length):"string"==o&&t in n)&&ds(n[t],e)}function Zr(e,t){if(ws(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Rs(e))||Me.test(e)||!Ae.test(e)||null!=t&&e in tt(t)}function Xr(e){var t=Rr(e),n=mo[t];if("function"!=typeof n||!(t in bo.prototype))return!1;if(e===n)return!0;var o=Pr(n);return!!o&&e===o[0]}($n&&Ur(new $n(new ArrayBuffer(1)))!=pe||Qn&&Ur(new Qn)!=X||eo&&"[object Promise]"!=Ur(eo.resolve())||to&&Ur(new to)!=ne||no&&Ur(new no)!=ie)&&(Ur=function(e){var t=ea(e),n=t==Q?e.constructor:r,o=n?ci(n):"";if(o)switch(o){case io:return pe;case so:return X;case lo:return"[object Promise]";case po:return ne;case uo:return ie}return t});var Kr=lt?xs:Ul;function $r(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||st)}function Qr(e){return e==e&&!Ts(e)}function ei(e,t){return function(n){return null!=n&&n[e]===t&&(t!==r||e in tt(n))}}function ti(e,t,n){return t=Vn(t===r?e.length-1:t,0),function(){for(var a=arguments,r=-1,i=Vn(a.length-t,0),s=o(i);++r<i;)s[r]=a[t+r];r=-1;for(var l=o(t+1);++r<t;)l[r]=a[r];return l[t]=n(s),Gt(e,this,l)}}function ni(e,t){return t.length<2?e:$o(e,Wa(t,0,-1))}var oi=si(Aa),ai=Bn||function(e,t){return Ot.setTimeout(e,t)},ri=si(Ma);function ii(e,t,n){var o=t+"";return ri(e,function(e,t){var n=t.length;if(!n)return e;var o=n-1;return t[o]=(n>1?"& ":"")+t[o],t=t.join(n>2?", ":" "),e.replace(De,"{\n/* [wrapped with "+t+"] */\n")}(o,function(e,t){return Jt(z,function(n){var o="_."+n[0];t&n[1]&&!Kt(e,o)&&e.push(o)}),e.sort()}(function(e){var t=e.match(Be);return t?t[1].split(Ne):[]}(o),n)))}function si(e){var t=0,n=0;return function(){var o=Yn(),a=M-(o-n);if(n=o,a>0){if(++t>=A)return arguments[0]}else t=0;return e.apply(r,arguments)}}function li(e,t){var n=-1,o=e.length,a=o-1;for(t=t===r?o:t;++n<t;){var i=Ia(n,a),s=e[i];e[i]=e[n],e[n]=s}return e.length=t,e}var pi=function(e){var t=ss(e,function(e){return n.size===u&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Ce,function(e,n,o,a){t.push(o?a.replace(Le,"$1"):n||e)}),t});function ui(e){if("string"==typeof e||Rs(e))return e;var t=e+"";return"0"==t&&1/e==-O?"-0":t}function ci(e){if(null!=e){try{return pt.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function hi(e){if(e instanceof bo)return e.clone();var t=new yo(e.__wrapped__,e.__chain__);return t.__actions__=ar(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var di=Sa(function(e,t){return vs(e)?zo(e,Vo(t,1,vs,!0)):[]}),fi=Sa(function(e,t){var n=Ii(t);return vs(n)&&(n=r),vs(e)?zo(e,Vo(t,1,vs,!0),Dr(n,2)):[]}),mi=Sa(function(e,t){var n=Ii(t);return vs(n)&&(n=r),vs(e)?zo(e,Vo(t,1,vs,!0),r,n):[]});function gi(e,t,n){var o=null==e?0:e.length;if(!o)return-1;var a=null==n?0:Ls(n);return a<0&&(a=Vn(o+a,0)),sn(e,Dr(t,3),a)}function wi(e,t,n){var o=null==e?0:e.length;if(!o)return-1;var a=o-1;return n!==r&&(a=Ls(n),a=n<0?Vn(o+a,0):Jn(a,o-1)),sn(e,Dr(t,3),a,!0)}function yi(e){return null!=e&&e.length?Vo(e,1):[]}function bi(e){return e&&e.length?e[0]:r}var vi=Sa(function(e){var t=Qt(e,Va);return t.length&&t[0]===e[0]?aa(t):[]}),ki=Sa(function(e){var t=Ii(e),n=Qt(e,Va);return t===Ii(n)?t=r:n.pop(),n.length&&n[0]===e[0]?aa(n,Dr(t,2)):[]}),qi=Sa(function(e){var t=Ii(e),n=Qt(e,Va);return(t="function"==typeof t?t:r)&&n.pop(),n.length&&n[0]===e[0]?aa(n,r,t):[]});function Ii(e){var t=null==e?0:e.length;return t?e[t-1]:r}var xi=Sa(Si);function Si(e,t){return e&&e.length&&t&&t.length?ka(e,t):e}var _i=Cr(function(e,t){var n=null==e?0:e.length,o=Ro(e,t);return qa(e,Qt(t,function(e){return Jr(e,n)?+e:e}).sort(tr)),o});function Ti(e){return null==e?e:Kn.call(e)}var Ei=Sa(function(e){return Na(Vo(e,1,vs,!0))}),Ai=Sa(function(e){var t=Ii(e);return vs(t)&&(t=r),Na(Vo(e,1,vs,!0),Dr(t,2))}),Mi=Sa(function(e){var t=Ii(e);return t="function"==typeof t?t:r,Na(Vo(e,1,vs,!0),r,t)});function Ci(e){if(!e||!e.length)return[];var t=0;return e=Xt(e,function(e){if(vs(e))return t=Vn(e.length,t),!0}),gn(t,function(t){return Qt(e,hn(t))})}function Wi(e,t){if(!e||!e.length)return[];var n=Ci(e);return null==t?n:Qt(n,function(e){return Gt(t,r,e)})}var Oi=Sa(function(e,t){return vs(e)?zo(e,t):[]}),Pi=Sa(function(e){return Fa(Xt(e,vs))}),Ri=Sa(function(e){var t=Ii(e);return vs(t)&&(t=r),Fa(Xt(e,vs),Dr(t,2))}),ji=Sa(function(e){var t=Ii(e);return t="function"==typeof t?t:r,Fa(Xt(e,vs),r,t)}),Di=Sa(Ci);var Bi=Sa(function(e){var t=e.length,n=t>1?e[t-1]:r;return Wi(e,n="function"==typeof n?(e.pop(),n):r)});function Ni(e){var t=mo(e);return t.__chain__=!0,t}function zi(e,t){return t(e)}var Li=Cr(function(e){var t=e.length,n=t?e[0]:0,o=this.__wrapped__,a=function(t){return Ro(t,e)};return!(t>1||this.__actions__.length)&&o instanceof bo&&Jr(n)?((o=o.slice(n,+n+(t?1:0))).__actions__.push({func:zi,args:[a],thisArg:r}),new yo(o,this.__chain__).thru(function(e){return t&&!e.length&&e.push(r),e})):this.thru(a)});var Hi=ir(function(e,t,n){ut.call(e,n)?++e[n]:Po(e,n,1)});var Ui=dr(gi),Fi=dr(wi);function Gi(e,t){return(ws(e)?Jt:Lo)(e,Dr(t,3))}function Vi(e,t){return(ws(e)?Yt:Ho)(e,Dr(t,3))}var Ji=ir(function(e,t,n){ut.call(e,n)?e[n].push(t):Po(e,n,[t])});var Yi=Sa(function(e,t,n){var a=-1,r="function"==typeof t,i=bs(e)?o(e.length):[];return Lo(e,function(e){i[++a]=r?Gt(t,e,n):ra(e,t,n)}),i}),Zi=ir(function(e,t,n){Po(e,n,t)});function Xi(e,t){return(ws(e)?Qt:fa)(e,Dr(t,3))}var Ki=ir(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var $i=Sa(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Yr(e,t[0],t[1])?t=[]:n>2&&Yr(t[0],t[1],t[2])&&(t=[t[0]]),ba(e,Vo(t,1),[])}),Qi=Dn||function(){return Ot.Date.now()};function es(e,t,n){return t=n?r:t,t=e&&null==t?e.length:t,_r(e,x,r,r,r,r,t)}function ts(e,t){var n;if("function"!=typeof t)throw new at(l);return e=Ls(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=r),n}}var ns=Sa(function(e,t,n){var o=w;if(n.length){var a=En(n,jr(ns));o|=q}return _r(e,o,t,n,a)}),os=Sa(function(e,t,n){var o=w|y;if(n.length){var a=En(n,jr(os));o|=q}return _r(t,o,e,n,a)});function as(e,t,n){var o,a,i,s,p,u,c=0,h=!1,d=!1,f=!0;if("function"!=typeof e)throw new at(l);function m(t){var n=o,i=a;return o=a=r,c=t,s=e.apply(i,n)}function g(e){var n=e-u;return u===r||n>=t||n<0||d&&e-c>=i}function w(){var e=Qi();if(g(e))return y(e);p=ai(w,function(e){var n=t-(e-u);return d?Jn(n,i-(e-c)):n}(e))}function y(e){return p=r,f&&o?m(e):(o=a=r,s)}function b(){var e=Qi(),n=g(e);if(o=arguments,a=this,u=e,n){if(p===r)return function(e){return c=e,p=ai(w,t),h?m(e):s}(u);if(d)return p=ai(w,t),m(u)}return p===r&&(p=ai(w,t)),s}return t=Us(t)||0,Ts(n)&&(h=!!n.leading,i=(d="maxWait"in n)?Vn(Us(n.maxWait)||0,t):i,f="trailing"in n?!!n.trailing:f),b.cancel=function(){p!==r&&Ka(p),c=0,o=u=a=p=r},b.flush=function(){return p===r?s:y(Qi())},b}var rs=Sa(function(e,t){return No(e,1,t)}),is=Sa(function(e,t,n){return No(e,Us(t)||0,n)});function ss(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new at(l);var n=function(){var o=arguments,a=t?t.apply(this,o):o[0],r=n.cache;if(r.has(a))return r.get(a);var i=e.apply(this,o);return n.cache=r.set(a,i)||r,i};return n.cache=new(ss.Cache||qo),n}function ls(e){if("function"!=typeof e)throw new at(l);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}ss.Cache=qo;var ps=Za(function(e,t){var n=(t=1==t.length&&ws(t[0])?Qt(t[0],wn(Dr())):Qt(Vo(t,1),wn(Dr()))).length;return Sa(function(o){for(var a=-1,r=Jn(o.length,n);++a<r;)o[a]=t[a].call(this,o[a]);return Gt(e,this,o)})}),us=Sa(function(e,t){var n=En(t,jr(us));return _r(e,q,r,t,n)}),cs=Sa(function(e,t){var n=En(t,jr(cs));return _r(e,I,r,t,n)}),hs=Cr(function(e,t){return _r(e,S,r,r,r,t)});function ds(e,t){return e===t||e!=e&&t!=t}var fs=kr(ta),ms=kr(function(e,t){return e>=t}),gs=ia(function(){return arguments}())?ia:function(e){return Es(e)&&ut.call(e,"callee")&&!Pt.call(e,"callee")},ws=o.isArray,ys=Nt?wn(Nt):function(e){return Es(e)&&ea(e)==le};function bs(e){return null!=e&&_s(e.length)&&!xs(e)}function vs(e){return Es(e)&&bs(e)}var ks=Hn||Ul,qs=zt?wn(zt):function(e){return Es(e)&&ea(e)==G};function Is(e){if(!Es(e))return!1;var t=ea(e);return t==J||t==V||"string"==typeof e.message&&"string"==typeof e.name&&!Cs(e)}function xs(e){if(!Ts(e))return!1;var t=ea(e);return t==Y||t==Z||t==U||t==ee}function Ss(e){return"number"==typeof e&&e==Ls(e)}function _s(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=P}function Ts(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Es(e){return null!=e&&"object"==typeof e}var As=Lt?wn(Lt):function(e){return Es(e)&&Ur(e)==X};function Ms(e){return"number"==typeof e||Es(e)&&ea(e)==K}function Cs(e){if(!Es(e)||ea(e)!=Q)return!1;var t=Ct(e);if(null===t)return!0;var n=ut.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&pt.call(n)==ft}var Ws=Ht?wn(Ht):function(e){return Es(e)&&ea(e)==te};var Os=Ut?wn(Ut):function(e){return Es(e)&&Ur(e)==ne};function Ps(e){return"string"==typeof e||!ws(e)&&Es(e)&&ea(e)==oe}function Rs(e){return"symbol"==typeof e||Es(e)&&ea(e)==ae}var js=Ft?wn(Ft):function(e){return Es(e)&&_s(e.length)&&!!_t[ea(e)]};var Ds=kr(da),Bs=kr(function(e,t){return e<=t});function Ns(e){if(!e)return[];if(bs(e))return Ps(e)?On(e):ar(e);if(Bt&&e[Bt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Bt]());var t=Ur(e);return(t==X?_n:t==ne?Mn:dl)(e)}function zs(e){return e?(e=Us(e))===O||e===-O?(e<0?-1:1)*R:e==e?e:0:0===e?e:0}function Ls(e){var t=zs(e),n=t%1;return t==t?n?t-n:t:0}function Hs(e){return e?jo(Ls(e),0,D):0}function Us(e){if("number"==typeof e)return e;if(Rs(e))return j;if(Ts(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ts(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Pe,"");var n=Ge.test(e);return n||Je.test(e)?Mt(e.slice(2),n?2:8):Fe.test(e)?j:+e}function Fs(e){return rr(e,rl(e))}function Gs(e){return null==e?"":Ba(e)}var Vs=sr(function(e,t){if($r(t)||bs(t))rr(t,al(t),e);else for(var n in t)ut.call(t,n)&&Mo(e,n,t[n])}),Js=sr(function(e,t){rr(t,rl(t),e)}),Ys=sr(function(e,t,n,o){rr(t,rl(t),e,o)}),Zs=sr(function(e,t,n,o){rr(t,al(t),e,o)}),Xs=Cr(Ro);var Ks=Sa(function(e,t){e=tt(e);var n=-1,o=t.length,a=o>2?t[2]:r;for(a&&Yr(t[0],t[1],a)&&(o=1);++n<o;)for(var i=t[n],s=rl(i),l=-1,p=s.length;++l<p;){var u=s[l],c=e[u];(c===r||ds(c,st[u])&&!ut.call(e,u))&&(e[u]=i[u])}return e}),$s=Sa(function(e){return e.push(r,Er),Gt(sl,r,e)});function Qs(e,t,n){var o=null==e?r:$o(e,t);return o===r?n:o}function el(e,t){return null!=e&&Fr(e,t,oa)}var tl=gr(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n},Tl(Ml)),nl=gr(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),ut.call(e,t)?e[t].push(n):e[t]=[n]},Dr),ol=Sa(ra);function al(e){return bs(e)?So(e):ca(e)}function rl(e){return bs(e)?So(e,!0):ha(e)}var il=sr(function(e,t,n){wa(e,t,n)}),sl=sr(function(e,t,n,o){wa(e,t,n,o)}),ll=Cr(function(e,t){var n={};if(null==e)return n;var o=!1;t=Qt(t,function(t){return t=Ya(t,e),o||(o=t.length>1),t}),rr(e,Or(e),n),o&&(n=Do(n,h|d|f,Ar));for(var a=t.length;a--;)za(n,t[a]);return n});var pl=Cr(function(e,t){return null==e?{}:function(e,t){return va(e,t,function(t,n){return el(e,n)})}(e,t)});function ul(e,t){if(null==e)return{};var n=Qt(Or(e),function(e){return[e]});return t=Dr(t),va(e,n,function(e,n){return t(e,n[0])})}var cl=Sr(al),hl=Sr(rl);function dl(e){return null==e?[]:yn(e,al(e))}var fl=cr(function(e,t,n){return t=t.toLowerCase(),e+(n?ml(t):t)});function ml(e){return Il(Gs(e).toLowerCase())}function gl(e){return(e=Gs(e))&&e.replace(Ze,qn).replace(bt,"")}var wl=cr(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),yl=cr(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),bl=ur("toLowerCase");var vl=cr(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var kl=cr(function(e,t,n){return e+(n?" ":"")+Il(t)});var ql=cr(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Il=ur("toUpperCase");function xl(e,t,n){return e=Gs(e),(t=n?r:t)===r?function(e){return It.test(e)}(e)?function(e){return e.match(kt)||[]}(e):function(e){return e.match(ze)||[]}(e):e.match(t)||[]}var Sl=Sa(function(e,t){try{return Gt(e,r,t)}catch(e){return Is(e)?e:new $e(e)}}),_l=Cr(function(e,t){return Jt(t,function(t){t=ui(t),Po(e,t,ns(e[t],e))}),e});function Tl(e){return function(){return e}}var El=fr(),Al=fr(!0);function Ml(e){return e}function Cl(e){return ua("function"==typeof e?e:Do(e,h))}var Wl=Sa(function(e,t){return function(n){return ra(n,e,t)}}),Ol=Sa(function(e,t){return function(n){return ra(e,n,t)}});function Pl(e,t,n){var o=al(t),a=Ko(t,o);null!=n||Ts(t)&&(a.length||!o.length)||(n=t,t=e,e=this,a=Ko(t,al(t)));var r=!(Ts(n)&&"chain"in n&&!n.chain),i=xs(e);return Jt(a,function(n){var o=t[n];e[n]=o,i&&(e.prototype[n]=function(){var t=this.__chain__;if(r||t){var n=e(this.__wrapped__);return(n.__actions__=ar(this.__actions__)).push({func:o,args:arguments,thisArg:e}),n.__chain__=t,n}return o.apply(e,en([this.value()],arguments))})}),e}function Rl(){}var jl=yr(Qt),Dl=yr(Zt),Bl=yr(on);function Nl(e){return Zr(e)?hn(ui(e)):function(e){return function(t){return $o(t,e)}}(e)}var zl=vr(),Ll=vr(!0);function Hl(){return[]}function Ul(){return!1}var Fl=wr(function(e,t){return e+t},0),Gl=Ir("ceil"),Vl=wr(function(e,t){return e/t},1),Jl=Ir("floor");var Yl,Zl=wr(function(e,t){return e*t},1),Xl=Ir("round"),Kl=wr(function(e,t){return e-t},0);return mo.after=function(e,t){if("function"!=typeof t)throw new at(l);return e=Ls(e),function(){if(--e<1)return t.apply(this,arguments)}},mo.ary=es,mo.assign=Vs,mo.assignIn=Js,mo.assignInWith=Ys,mo.assignWith=Zs,mo.at=Xs,mo.before=ts,mo.bind=ns,mo.bindAll=_l,mo.bindKey=os,mo.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return ws(e)?e:[e]},mo.chain=Ni,mo.chunk=function(e,t,n){t=(n?Yr(e,t,n):t===r)?1:Vn(Ls(t),0);var a=null==e?0:e.length;if(!a||t<1)return[];for(var i=0,s=0,l=o(Nn(a/t));i<a;)l[s++]=Wa(e,i,i+=t);return l},mo.compact=function(e){for(var t=-1,n=null==e?0:e.length,o=0,a=[];++t<n;){var r=e[t];r&&(a[o++]=r)}return a},mo.concat=function(){var e=arguments.length;if(!e)return[];for(var t=o(e-1),n=arguments[0],a=e;a--;)t[a-1]=arguments[a];return en(ws(n)?ar(n):[n],Vo(t,1))},mo.cond=function(e){var t=null==e?0:e.length,n=Dr();return e=t?Qt(e,function(e){if("function"!=typeof e[1])throw new at(l);return[n(e[0]),e[1]]}):[],Sa(function(n){for(var o=-1;++o<t;){var a=e[o];if(Gt(a[0],this,n))return Gt(a[1],this,n)}})},mo.conforms=function(e){return function(e){var t=al(e);return function(n){return Bo(n,e,t)}}(Do(e,h))},mo.constant=Tl,mo.countBy=Hi,mo.create=function(e,t){var n=go(e);return null==t?n:Oo(n,t)},mo.curry=function e(t,n,o){var a=_r(t,v,r,r,r,r,r,n=o?r:n);return a.placeholder=e.placeholder,a},mo.curryRight=function e(t,n,o){var a=_r(t,k,r,r,r,r,r,n=o?r:n);return a.placeholder=e.placeholder,a},mo.debounce=as,mo.defaults=Ks,mo.defaultsDeep=$s,mo.defer=rs,mo.delay=is,mo.difference=di,mo.differenceBy=fi,mo.differenceWith=mi,mo.drop=function(e,t,n){var o=null==e?0:e.length;return o?Wa(e,(t=n||t===r?1:Ls(t))<0?0:t,o):[]},mo.dropRight=function(e,t,n){var o=null==e?0:e.length;return o?Wa(e,0,(t=o-(t=n||t===r?1:Ls(t)))<0?0:t):[]},mo.dropRightWhile=function(e,t){return e&&e.length?Ha(e,Dr(t,3),!0,!0):[]},mo.dropWhile=function(e,t){return e&&e.length?Ha(e,Dr(t,3),!0):[]},mo.fill=function(e,t,n,o){var a=null==e?0:e.length;return a?(n&&"number"!=typeof n&&Yr(e,t,n)&&(n=0,o=a),function(e,t,n,o){var a=e.length;for((n=Ls(n))<0&&(n=-n>a?0:a+n),(o=o===r||o>a?a:Ls(o))<0&&(o+=a),o=n>o?0:Hs(o);n<o;)e[n++]=t;return e}(e,t,n,o)):[]},mo.filter=function(e,t){return(ws(e)?Xt:Go)(e,Dr(t,3))},mo.flatMap=function(e,t){return Vo(Xi(e,t),1)},mo.flatMapDeep=function(e,t){return Vo(Xi(e,t),O)},mo.flatMapDepth=function(e,t,n){return n=n===r?1:Ls(n),Vo(Xi(e,t),n)},mo.flatten=yi,mo.flattenDeep=function(e){return null!=e&&e.length?Vo(e,O):[]},mo.flattenDepth=function(e,t){return null!=e&&e.length?Vo(e,t=t===r?1:Ls(t)):[]},mo.flip=function(e){return _r(e,_)},mo.flow=El,mo.flowRight=Al,mo.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,o={};++t<n;){var a=e[t];o[a[0]]=a[1]}return o},mo.functions=function(e){return null==e?[]:Ko(e,al(e))},mo.functionsIn=function(e){return null==e?[]:Ko(e,rl(e))},mo.groupBy=Ji,mo.initial=function(e){return null!=e&&e.length?Wa(e,0,-1):[]},mo.intersection=vi,mo.intersectionBy=ki,mo.intersectionWith=qi,mo.invert=tl,mo.invertBy=nl,mo.invokeMap=Yi,mo.iteratee=Cl,mo.keyBy=Zi,mo.keys=al,mo.keysIn=rl,mo.map=Xi,mo.mapKeys=function(e,t){var n={};return t=Dr(t,3),Zo(e,function(e,o,a){Po(n,t(e,o,a),e)}),n},mo.mapValues=function(e,t){var n={};return t=Dr(t,3),Zo(e,function(e,o,a){Po(n,o,t(e,o,a))}),n},mo.matches=function(e){return ma(Do(e,h))},mo.matchesProperty=function(e,t){return ga(e,Do(t,h))},mo.memoize=ss,mo.merge=il,mo.mergeWith=sl,mo.method=Wl,mo.methodOf=Ol,mo.mixin=Pl,mo.negate=ls,mo.nthArg=function(e){return e=Ls(e),Sa(function(t){return ya(t,e)})},mo.omit=ll,mo.omitBy=function(e,t){return ul(e,ls(Dr(t)))},mo.once=function(e){return ts(2,e)},mo.orderBy=function(e,t,n,o){return null==e?[]:(ws(t)||(t=null==t?[]:[t]),ws(n=o?r:n)||(n=null==n?[]:[n]),ba(e,t,n))},mo.over=jl,mo.overArgs=ps,mo.overEvery=Dl,mo.overSome=Bl,mo.partial=us,mo.partialRight=cs,mo.partition=Ki,mo.pick=pl,mo.pickBy=ul,mo.property=Nl,mo.propertyOf=function(e){return function(t){return null==e?r:$o(e,t)}},mo.pull=xi,mo.pullAll=Si,mo.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?ka(e,t,Dr(n,2)):e},mo.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?ka(e,t,r,n):e},mo.pullAt=_i,mo.range=zl,mo.rangeRight=Ll,mo.rearg=hs,mo.reject=function(e,t){return(ws(e)?Xt:Go)(e,ls(Dr(t,3)))},mo.remove=function(e,t){var n=[];if(!e||!e.length)return n;var o=-1,a=[],r=e.length;for(t=Dr(t,3);++o<r;){var i=e[o];t(i,o,e)&&(n.push(i),a.push(o))}return qa(e,a),n},mo.rest=function(e,t){if("function"!=typeof e)throw new at(l);return Sa(e,t=t===r?t:Ls(t))},mo.reverse=Ti,mo.sampleSize=function(e,t,n){return t=(n?Yr(e,t,n):t===r)?1:Ls(t),(ws(e)?To:Ta)(e,t)},mo.set=function(e,t,n){return null==e?e:Ea(e,t,n)},mo.setWith=function(e,t,n,o){return o="function"==typeof o?o:r,null==e?e:Ea(e,t,n,o)},mo.shuffle=function(e){return(ws(e)?Eo:Ca)(e)},mo.slice=function(e,t,n){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&Yr(e,t,n)?(t=0,n=o):(t=null==t?0:Ls(t),n=n===r?o:Ls(n)),Wa(e,t,n)):[]},mo.sortBy=$i,mo.sortedUniq=function(e){return e&&e.length?ja(e):[]},mo.sortedUniqBy=function(e,t){return e&&e.length?ja(e,Dr(t,2)):[]},mo.split=function(e,t,n){return n&&"number"!=typeof n&&Yr(e,t,n)&&(t=n=r),(n=n===r?D:n>>>0)?(e=Gs(e))&&("string"==typeof t||null!=t&&!Ws(t))&&!(t=Ba(t))&&Sn(e)?Xa(On(e),0,n):e.split(t,n):[]},mo.spread=function(e,t){if("function"!=typeof e)throw new at(l);return t=null==t?0:Vn(Ls(t),0),Sa(function(n){var o=n[t],a=Xa(n,0,t);return o&&en(a,o),Gt(e,this,a)})},mo.tail=function(e){var t=null==e?0:e.length;return t?Wa(e,1,t):[]},mo.take=function(e,t,n){return e&&e.length?Wa(e,0,(t=n||t===r?1:Ls(t))<0?0:t):[]},mo.takeRight=function(e,t,n){var o=null==e?0:e.length;return o?Wa(e,(t=o-(t=n||t===r?1:Ls(t)))<0?0:t,o):[]},mo.takeRightWhile=function(e,t){return e&&e.length?Ha(e,Dr(t,3),!1,!0):[]},mo.takeWhile=function(e,t){return e&&e.length?Ha(e,Dr(t,3)):[]},mo.tap=function(e,t){return t(e),e},mo.throttle=function(e,t,n){var o=!0,a=!0;if("function"!=typeof e)throw new at(l);return Ts(n)&&(o="leading"in n?!!n.leading:o,a="trailing"in n?!!n.trailing:a),as(e,t,{leading:o,maxWait:t,trailing:a})},mo.thru=zi,mo.toArray=Ns,mo.toPairs=cl,mo.toPairsIn=hl,mo.toPath=function(e){return ws(e)?Qt(e,ui):Rs(e)?[e]:ar(pi(Gs(e)))},mo.toPlainObject=Fs,mo.transform=function(e,t,n){var o=ws(e),a=o||ks(e)||js(e);if(t=Dr(t,4),null==n){var r=e&&e.constructor;n=a?o?new r:[]:Ts(e)&&xs(r)?go(Ct(e)):{}}return(a?Jt:Zo)(e,function(e,o,a){return t(n,e,o,a)}),n},mo.unary=function(e){return es(e,1)},mo.union=Ei,mo.unionBy=Ai,mo.unionWith=Mi,mo.uniq=function(e){return e&&e.length?Na(e):[]},mo.uniqBy=function(e,t){return e&&e.length?Na(e,Dr(t,2)):[]},mo.uniqWith=function(e,t){return t="function"==typeof t?t:r,e&&e.length?Na(e,r,t):[]},mo.unset=function(e,t){return null==e||za(e,t)},mo.unzip=Ci,mo.unzipWith=Wi,mo.update=function(e,t,n){return null==e?e:La(e,t,Ja(n))},mo.updateWith=function(e,t,n,o){return o="function"==typeof o?o:r,null==e?e:La(e,t,Ja(n),o)},mo.values=dl,mo.valuesIn=function(e){return null==e?[]:yn(e,rl(e))},mo.without=Oi,mo.words=xl,mo.wrap=function(e,t){return us(Ja(t),e)},mo.xor=Pi,mo.xorBy=Ri,mo.xorWith=ji,mo.zip=Di,mo.zipObject=function(e,t){return Ga(e||[],t||[],Mo)},mo.zipObjectDeep=function(e,t){return Ga(e||[],t||[],Ea)},mo.zipWith=Bi,mo.entries=cl,mo.entriesIn=hl,mo.extend=Js,mo.extendWith=Ys,Pl(mo,mo),mo.add=Fl,mo.attempt=Sl,mo.camelCase=fl,mo.capitalize=ml,mo.ceil=Gl,mo.clamp=function(e,t,n){return n===r&&(n=t,t=r),n!==r&&(n=(n=Us(n))==n?n:0),t!==r&&(t=(t=Us(t))==t?t:0),jo(Us(e),t,n)},mo.clone=function(e){return Do(e,f)},mo.cloneDeep=function(e){return Do(e,h|f)},mo.cloneDeepWith=function(e,t){return Do(e,h|f,t="function"==typeof t?t:r)},mo.cloneWith=function(e,t){return Do(e,f,t="function"==typeof t?t:r)},mo.conformsTo=function(e,t){return null==t||Bo(e,t,al(t))},mo.deburr=gl,mo.defaultTo=function(e,t){return null==e||e!=e?t:e},mo.divide=Vl,mo.endsWith=function(e,t,n){e=Gs(e),t=Ba(t);var o=e.length,a=n=n===r?o:jo(Ls(n),0,o);return(n-=t.length)>=0&&e.slice(n,a)==t},mo.eq=ds,mo.escape=function(e){return(e=Gs(e))&&Se.test(e)?e.replace(Ie,In):e},mo.escapeRegExp=function(e){return(e=Gs(e))&&Oe.test(e)?e.replace(We,"\\$&"):e},mo.every=function(e,t,n){var o=ws(e)?Zt:Uo;return n&&Yr(e,t,n)&&(t=r),o(e,Dr(t,3))},mo.find=Ui,mo.findIndex=gi,mo.findKey=function(e,t){return rn(e,Dr(t,3),Zo)},mo.findLast=Fi,mo.findLastIndex=wi,mo.findLastKey=function(e,t){return rn(e,Dr(t,3),Xo)},mo.floor=Jl,mo.forEach=Gi,mo.forEachRight=Vi,mo.forIn=function(e,t){return null==e?e:Jo(e,Dr(t,3),rl)},mo.forInRight=function(e,t){return null==e?e:Yo(e,Dr(t,3),rl)},mo.forOwn=function(e,t){return e&&Zo(e,Dr(t,3))},mo.forOwnRight=function(e,t){return e&&Xo(e,Dr(t,3))},mo.get=Qs,mo.gt=fs,mo.gte=ms,mo.has=function(e,t){return null!=e&&Fr(e,t,na)},mo.hasIn=el,mo.head=bi,mo.identity=Ml,mo.includes=function(e,t,n,o){e=bs(e)?e:dl(e),n=n&&!o?Ls(n):0;var a=e.length;return n<0&&(n=Vn(a+n,0)),Ps(e)?n<=a&&e.indexOf(t,n)>-1:!!a&&ln(e,t,n)>-1},mo.indexOf=function(e,t,n){var o=null==e?0:e.length;if(!o)return-1;var a=null==n?0:Ls(n);return a<0&&(a=Vn(o+a,0)),ln(e,t,a)},mo.inRange=function(e,t,n){return t=zs(t),n===r?(n=t,t=0):n=zs(n),function(e,t,n){return e>=Jn(t,n)&&e<Vn(t,n)}(e=Us(e),t,n)},mo.invoke=ol,mo.isArguments=gs,mo.isArray=ws,mo.isArrayBuffer=ys,mo.isArrayLike=bs,mo.isArrayLikeObject=vs,mo.isBoolean=function(e){return!0===e||!1===e||Es(e)&&ea(e)==F},mo.isBuffer=ks,mo.isDate=qs,mo.isElement=function(e){return Es(e)&&1===e.nodeType&&!Cs(e)},mo.isEmpty=function(e){if(null==e)return!0;if(bs(e)&&(ws(e)||"string"==typeof e||"function"==typeof e.splice||ks(e)||js(e)||gs(e)))return!e.length;var t=Ur(e);if(t==X||t==ne)return!e.size;if($r(e))return!ca(e).length;for(var n in e)if(ut.call(e,n))return!1;return!0},mo.isEqual=function(e,t){return sa(e,t)},mo.isEqualWith=function(e,t,n){var o=(n="function"==typeof n?n:r)?n(e,t):r;return o===r?sa(e,t,r,n):!!o},mo.isError=Is,mo.isFinite=function(e){return"number"==typeof e&&Un(e)},mo.isFunction=xs,mo.isInteger=Ss,mo.isLength=_s,mo.isMap=As,mo.isMatch=function(e,t){return e===t||la(e,t,Nr(t))},mo.isMatchWith=function(e,t,n){return n="function"==typeof n?n:r,la(e,t,Nr(t),n)},mo.isNaN=function(e){return Ms(e)&&e!=+e},mo.isNative=function(e){if(Kr(e))throw new $e(s);return pa(e)},mo.isNil=function(e){return null==e},mo.isNull=function(e){return null===e},mo.isNumber=Ms,mo.isObject=Ts,mo.isObjectLike=Es,mo.isPlainObject=Cs,mo.isRegExp=Ws,mo.isSafeInteger=function(e){return Ss(e)&&e>=-P&&e<=P},mo.isSet=Os,mo.isString=Ps,mo.isSymbol=Rs,mo.isTypedArray=js,mo.isUndefined=function(e){return e===r},mo.isWeakMap=function(e){return Es(e)&&Ur(e)==ie},mo.isWeakSet=function(e){return Es(e)&&ea(e)==se},mo.join=function(e,t){return null==e?"":Fn.call(e,t)},mo.kebabCase=wl,mo.last=Ii,mo.lastIndexOf=function(e,t,n){var o=null==e?0:e.length;if(!o)return-1;var a=o;return n!==r&&(a=(a=Ls(n))<0?Vn(o+a,0):Jn(a,o-1)),t==t?function(e,t,n){for(var o=n+1;o--;)if(e[o]===t)return o;return o}(e,t,a):sn(e,un,a,!0)},mo.lowerCase=yl,mo.lowerFirst=bl,mo.lt=Ds,mo.lte=Bs,mo.max=function(e){return e&&e.length?Fo(e,Ml,ta):r},mo.maxBy=function(e,t){return e&&e.length?Fo(e,Dr(t,2),ta):r},mo.mean=function(e){return cn(e,Ml)},mo.meanBy=function(e,t){return cn(e,Dr(t,2))},mo.min=function(e){return e&&e.length?Fo(e,Ml,da):r},mo.minBy=function(e,t){return e&&e.length?Fo(e,Dr(t,2),da):r},mo.stubArray=Hl,mo.stubFalse=Ul,mo.stubObject=function(){return{}},mo.stubString=function(){return""},mo.stubTrue=function(){return!0},mo.multiply=Zl,mo.nth=function(e,t){return e&&e.length?ya(e,Ls(t)):r},mo.noConflict=function(){return Ot._===this&&(Ot._=mt),this},mo.noop=Rl,mo.now=Qi,mo.pad=function(e,t,n){e=Gs(e);var o=(t=Ls(t))?Wn(e):0;if(!t||o>=t)return e;var a=(t-o)/2;return br(zn(a),n)+e+br(Nn(a),n)},mo.padEnd=function(e,t,n){e=Gs(e);var o=(t=Ls(t))?Wn(e):0;return t&&o<t?e+br(t-o,n):e},mo.padStart=function(e,t,n){e=Gs(e);var o=(t=Ls(t))?Wn(e):0;return t&&o<t?br(t-o,n)+e:e},mo.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Zn(Gs(e).replace(Re,""),t||0)},mo.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Yr(e,t,n)&&(t=n=r),n===r&&("boolean"==typeof t?(n=t,t=r):"boolean"==typeof e&&(n=e,e=r)),e===r&&t===r?(e=0,t=1):(e=zs(e),t===r?(t=e,e=0):t=zs(t)),e>t){var o=e;e=t,t=o}if(n||e%1||t%1){var a=Xn();return Jn(e+a*(t-e+At("1e-"+((a+"").length-1))),t)}return Ia(e,t)},mo.reduce=function(e,t,n){var o=ws(e)?tn:fn,a=arguments.length<3;return o(e,Dr(t,4),n,a,Lo)},mo.reduceRight=function(e,t,n){var o=ws(e)?nn:fn,a=arguments.length<3;return o(e,Dr(t,4),n,a,Ho)},mo.repeat=function(e,t,n){return t=(n?Yr(e,t,n):t===r)?1:Ls(t),xa(Gs(e),t)},mo.replace=function(){var e=arguments,t=Gs(e[0]);return e.length<3?t:t.replace(e[1],e[2])},mo.result=function(e,t,n){var o=-1,a=(t=Ya(t,e)).length;for(a||(a=1,e=r);++o<a;){var i=null==e?r:e[ui(t[o])];i===r&&(o=a,i=n),e=xs(i)?i.call(e):i}return e},mo.round=Xl,mo.runInContext=e,mo.sample=function(e){return(ws(e)?_o:_a)(e)},mo.size=function(e){if(null==e)return 0;if(bs(e))return Ps(e)?Wn(e):e.length;var t=Ur(e);return t==X||t==ne?e.size:ca(e).length},mo.snakeCase=vl,mo.some=function(e,t,n){var o=ws(e)?on:Oa;return n&&Yr(e,t,n)&&(t=r),o(e,Dr(t,3))},mo.sortedIndex=function(e,t){return Pa(e,t)},mo.sortedIndexBy=function(e,t,n){return Ra(e,t,Dr(n,2))},mo.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var o=Pa(e,t);if(o<n&&ds(e[o],t))return o}return-1},mo.sortedLastIndex=function(e,t){return Pa(e,t,!0)},mo.sortedLastIndexBy=function(e,t,n){return Ra(e,t,Dr(n,2),!0)},mo.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=Pa(e,t,!0)-1;if(ds(e[n],t))return n}return-1},mo.startCase=kl,mo.startsWith=function(e,t,n){return e=Gs(e),n=null==n?0:jo(Ls(n),0,e.length),t=Ba(t),e.slice(n,n+t.length)==t},mo.subtract=Kl,mo.sum=function(e){return e&&e.length?mn(e,Ml):0},mo.sumBy=function(e,t){return e&&e.length?mn(e,Dr(t,2)):0},mo.template=function(e,t,n){var o=mo.templateSettings;n&&Yr(e,t,n)&&(t=r),e=Gs(e),t=Ys({},t,o,Tr);var a,i,s=Ys({},t.imports,o.imports,Tr),l=al(s),p=yn(s,l),u=0,c=t.interpolate||Xe,h="__p += '",d=nt((t.escape||Xe).source+"|"+c.source+"|"+(c===Ee?He:Xe).source+"|"+(t.evaluate||Xe).source+"|$","g"),f="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++St+"]")+"\n";e.replace(d,function(t,n,o,r,s,l){return o||(o=r),h+=e.slice(u,l).replace(Ke,xn),n&&(a=!0,h+="' +\n__e("+n+") +\n'"),s&&(i=!0,h+="';\n"+s+";\n__p += '"),o&&(h+="' +\n((__t = ("+o+")) == null ? '' : __t) +\n'"),u=l+t.length,t}),h+="';\n";var m=t.variable;m||(h="with (obj) {\n"+h+"\n}\n"),h=(i?h.replace(be,""):h).replace(ve,"$1").replace(ke,"$1;"),h="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Sl(function(){return Qe(l,f+"return "+h).apply(r,p)});if(g.source=h,Is(g))throw g;return g},mo.times=function(e,t){if((e=Ls(e))<1||e>P)return[];var n=D,o=Jn(e,D);t=Dr(t),e-=D;for(var a=gn(o,t);++n<e;)t(n);return a},mo.toFinite=zs,mo.toInteger=Ls,mo.toLength=Hs,mo.toLower=function(e){return Gs(e).toLowerCase()},mo.toNumber=Us,mo.toSafeInteger=function(e){return e?jo(Ls(e),-P,P):0===e?e:0},mo.toString=Gs,mo.toUpper=function(e){return Gs(e).toUpperCase()},mo.trim=function(e,t,n){if((e=Gs(e))&&(n||t===r))return e.replace(Pe,"");if(!e||!(t=Ba(t)))return e;var o=On(e),a=On(t);return Xa(o,vn(o,a),kn(o,a)+1).join("")},mo.trimEnd=function(e,t,n){if((e=Gs(e))&&(n||t===r))return e.replace(je,"");if(!e||!(t=Ba(t)))return e;var o=On(e);return Xa(o,0,kn(o,On(t))+1).join("")},mo.trimStart=function(e,t,n){if((e=Gs(e))&&(n||t===r))return e.replace(Re,"");if(!e||!(t=Ba(t)))return e;var o=On(e);return Xa(o,vn(o,On(t))).join("")},mo.truncate=function(e,t){var n=T,o=E;if(Ts(t)){var a="separator"in t?t.separator:a;n="length"in t?Ls(t.length):n,o="omission"in t?Ba(t.omission):o}var i=(e=Gs(e)).length;if(Sn(e)){var s=On(e);i=s.length}if(n>=i)return e;var l=n-Wn(o);if(l<1)return o;var p=s?Xa(s,0,l).join(""):e.slice(0,l);if(a===r)return p+o;if(s&&(l+=p.length-l),Ws(a)){if(e.slice(l).search(a)){var u,c=p;for(a.global||(a=nt(a.source,Gs(Ue.exec(a))+"g")),a.lastIndex=0;u=a.exec(c);)var h=u.index;p=p.slice(0,h===r?l:h)}}else if(e.indexOf(Ba(a),l)!=l){var d=p.lastIndexOf(a);d>-1&&(p=p.slice(0,d))}return p+o},mo.unescape=function(e){return(e=Gs(e))&&xe.test(e)?e.replace(qe,Pn):e},mo.uniqueId=function(e){var t=++ct;return Gs(e)+t},mo.upperCase=ql,mo.upperFirst=Il,mo.each=Gi,mo.eachRight=Vi,mo.first=bi,Pl(mo,(Yl={},Zo(mo,function(e,t){ut.call(mo.prototype,t)||(Yl[t]=e)}),Yl),{chain:!1}),mo.VERSION="4.17.10",Jt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){mo[e].placeholder=mo}),Jt(["drop","take"],function(e,t){bo.prototype[e]=function(n){n=n===r?1:Vn(Ls(n),0);var o=this.__filtered__&&!t?new bo(this):this.clone();return o.__filtered__?o.__takeCount__=Jn(n,o.__takeCount__):o.__views__.push({size:Jn(n,D),type:e+(o.__dir__<0?"Right":"")}),o},bo.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Jt(["filter","map","takeWhile"],function(e,t){var n=t+1,o=n==C||3==n;bo.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Dr(e,3),type:n}),t.__filtered__=t.__filtered__||o,t}}),Jt(["head","last"],function(e,t){var n="take"+(t?"Right":"");bo.prototype[e]=function(){return this[n](1).value()[0]}}),Jt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");bo.prototype[e]=function(){return this.__filtered__?new bo(this):this[n](1)}}),bo.prototype.compact=function(){return this.filter(Ml)},bo.prototype.find=function(e){return this.filter(e).head()},bo.prototype.findLast=function(e){return this.reverse().find(e)},bo.prototype.invokeMap=Sa(function(e,t){return"function"==typeof e?new bo(this):this.map(function(n){return ra(n,e,t)})}),bo.prototype.reject=function(e){return this.filter(ls(Dr(e)))},bo.prototype.slice=function(e,t){e=Ls(e);var n=this;return n.__filtered__&&(e>0||t<0)?new bo(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==r&&(n=(t=Ls(t))<0?n.dropRight(-t):n.take(t-e)),n)},bo.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},bo.prototype.toArray=function(){return this.take(D)},Zo(bo.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),o=/^(?:head|last)$/.test(t),a=mo[o?"take"+("last"==t?"Right":""):t],i=o||/^find/.test(t);a&&(mo.prototype[t]=function(){var t=this.__wrapped__,s=o?[1]:arguments,l=t instanceof bo,p=s[0],u=l||ws(t),c=function(e){var t=a.apply(mo,en([e],s));return o&&h?t[0]:t};u&&n&&"function"==typeof p&&1!=p.length&&(l=u=!1);var h=this.__chain__,d=!!this.__actions__.length,f=i&&!h,m=l&&!d;if(!i&&u){t=m?t:new bo(this);var g=e.apply(t,s);return g.__actions__.push({func:zi,args:[c],thisArg:r}),new yo(g,h)}return f&&m?e.apply(this,s):(g=this.thru(c),f?o?g.value()[0]:g.value():g)})}),Jt(["pop","push","shift","sort","splice","unshift"],function(e){var t=rt[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",o=/^(?:pop|shift)$/.test(e);mo.prototype[e]=function(){var e=arguments;if(o&&!this.__chain__){var a=this.value();return t.apply(ws(a)?a:[],e)}return this[n](function(n){return t.apply(ws(n)?n:[],e)})}}),Zo(bo.prototype,function(e,t){var n=mo[t];if(n){var o=n.name+"";(ro[o]||(ro[o]=[])).push({name:t,func:n})}}),ro[mr(r,y).name]=[{name:"wrapper",func:r}],bo.prototype.clone=function(){var e=new bo(this.__wrapped__);return e.__actions__=ar(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=ar(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=ar(this.__views__),e},bo.prototype.reverse=function(){if(this.__filtered__){var e=new bo(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},bo.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=ws(e),o=t<0,a=n?e.length:0,r=function(e,t,n){for(var o=-1,a=n.length;++o<a;){var r=n[o],i=r.size;switch(r.type){case"drop":e+=i;break;case"dropRight":t-=i;break;case"take":t=Jn(t,e+i);break;case"takeRight":e=Vn(e,t-i)}}return{start:e,end:t}}(0,a,this.__views__),i=r.start,s=r.end,l=s-i,p=o?s:i-1,u=this.__iteratees__,c=u.length,h=0,d=Jn(l,this.__takeCount__);if(!n||!o&&a==l&&d==l)return Ua(e,this.__actions__);var f=[];e:for(;l--&&h<d;){for(var m=-1,g=e[p+=t];++m<c;){var w=u[m],y=w.iteratee,b=w.type,v=y(g);if(b==W)g=v;else if(!v){if(b==C)continue e;break e}}f[h++]=g}return f},mo.prototype.at=Li,mo.prototype.chain=function(){return Ni(this)},mo.prototype.commit=function(){return new yo(this.value(),this.__chain__)},mo.prototype.next=function(){this.__values__===r&&(this.__values__=Ns(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?r:this.__values__[this.__index__++]}},mo.prototype.plant=function(e){for(var t,n=this;n instanceof wo;){var o=hi(n);o.__index__=0,o.__values__=r,t?a.__wrapped__=o:t=o;var a=o;n=n.__wrapped__}return a.__wrapped__=e,t},mo.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof bo){var t=e;return this.__actions__.length&&(t=new bo(this)),(t=t.reverse()).__actions__.push({func:zi,args:[Ti],thisArg:r}),new yo(t,this.__chain__)}return this.thru(Ti)},mo.prototype.toJSON=mo.prototype.valueOf=mo.prototype.value=function(){return Ua(this.__wrapped__,this.__actions__)},mo.prototype.first=mo.prototype.head,Bt&&(mo.prototype[Bt]=function(){return this}),mo}();Ot._=Rn,(a=function(){return Rn}.call(t,n,t,o))===r||(o.exports=a)}).call(this)}).call(t,n(46),n(71)(e))},233:function(e,t){e.exports={Questions:[{id:"smart_contract",text:"How do you handle smart contract verification and security?"},{id:"bounties",text:"Other bounties?"},{id:"who_what",text:"Who are you and what are you working on?"},{id:"tooling",text:"What are the tools/libraries/frameworks you use?"},{id:"frustrations",text:"What are your biggest frustrations?"},{id:"testing",text:"How do you handle testing?"},{id:"missing_tools",text:"What tools don’t exist at the moment?"},{id:"domain",text:"Other domain specific questions?"},{id:"ethereum",text:"What was the hardest part about learning to develop with Ethereum?"},{id:"short_term",text:"What are you most excited about in the short term?"},{id:"ease",text:"Was anything easier than expected?"},{id:"other_people",text:"Who are the other people you think we should talk to?"},{id:"resources",text:"What are the best educational resources?"},{id:"other_questions",text:"Are there any other questions we should be asking?"}]}},234:function(e,t){e.exports=[{id:1,name:"Fabio Berger + Remco Bloemen",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>0x - Decentralized exchange protocol. It is a set of smart contracts that handle standard transactions in an order format.</p><p>The key advantage here is that these smart contracts leads to shared liquidity</p><p>We also achieve increased security and network liquidity through our architecture.</p><p>We launched the network in August 2017.</p><p>It works, but is V1. We are working on V2 which helps people build hybrid stations, supports new token standards, and makes the contract more gas efficient.</p><p>V1 only allows humans to create orders; V2 will allow new smart contract to create orders. This is HUGE.</p><p>Notes:</p><p>We&rsquo;re building the protocol; designing the standard; building dev tools for anyone to build a decentralized exchange.</p><p>Orders may become invalid for any reason:</p><p>Order being filled</p><p>Griefing attacks</p><p>We&rsquo;ve now built an OrderWatcher that keeps relayers updated on the state of orders.</p><p>We&rsquo;re using contract Events as a proxy for state changes.</p><p>Can do a diff between state trees and between block headers.</p><p>We also have a set of smart contracts to handle settlement;</p><p>Everyone who wants to trade is setting allowances on a smart contract.</p><p>We want upgradability.</p>"},{question:"tooling",answer:"<p>EthereumJS / truffle hardwallet provider / Typedoc (to generate documentation) /</p><p>We don&rsquo;t use Truffle anymore</p><p>Not reliable &ndash; can have race conditions;</p><p>Artifacts don&rsquo;t allow you to have versions of the contract on different networks</p><p>You don&rsquo;t run into this stuff if you&rsquo;re just building a &ldquo;hello world&rdquo;</p><p>Overwriting parts of the contracts;</p><p>We rolled our own. It&rsquo;s open-source but not documented. We have other things that are keeping us busy.</p><p>The problem is that Truffle has too much functionality &ndash;&ndash; we would like to see more of a Unix philosophy.</p><p>Cannot support different versions of Solidity.</p><p>Version management doesn&rsquo;t exist.</p><p>EthPM &ndash;&ndash; doesn&rsquo;t have versioning either? It&rsquo;s going through a big refactor, so we held off. We need the NPM package manager.</p><p>We have built a lot of developer tools to interface with the smart contracts ourselves.</p><p>We have also built own deployer and migration tool, as truffle&rsquo;s did not suit our needs.</p>"},{question:"testing",answer:"<p>Testrpc has gotten better &ndash;&ndash;</p><p>Increases the speed at which you can dev.</p><p>Blockstream is really cool. Written by Mica (from Augur?), under the EthereumJS lib.</p><p>Good dealing with block re-orgs and changes in state.</p><p>Continuous Integration:</p><p>Doesn&rsquo;t really work for smart contracts.</p><p>We just use testrpc.</p><p>Neufund was different than 0x:</p><p>Neufund was a trustee for tokens &ndash;&ndash; it was centralized by definition.</p><p>This made it simpler: I could create &ldquo;open-ended&rdquo; contracts &ndash;&ndash; a switch statement, that the default would send to another proxy contract.</p><p>But wouldn&rsquo;t be able to do this with 0x &ndash;&ndash; e.g. if we wanted to add Shnorr signatures &ndash;&ndash; because it&rsquo;s a governance / security issues.</p>"},{question:"smart_contract",answer:"<p>Code audits before deployment</p><p>Want to add a formal verification tool to our deployment tool.</p><p>By analyzing the code, you can find patterns.</p><p>I manually did an audit in v0 of 0x:</p><p>Make sure all functions have a &ldquo;Read -> Write -> External Call&rdquo; pattern, so you don&rsquo;t have any race conditions.</p>"},{question:"bounties",answer:"<p>Rest of the bounties from Remco</p><p>State-watching &ndash;&ndash; built-in diff&rsquo;ing of state trees</p><p>Should be implemented in the Ethereum clients &ndash; Geth and Rust.</p><p>They want this feature for OrderWatcher.</p><p>EIP process is suboptimal:</p><p>Lacks in consensus-building. There&rsquo;s vocal people who don&rsquo;t have good ideas; there&rsquo;s a lot of noise.</p><p>To improve: committee-based approach (reputable stakeholders from reputable projects who get together?).</p><p>Problems are getting solved at the wrong abstraction level.</p><p>E.g. NFT standards.</p><p>Neufund was largest Solidity project before &ndash;&ndash; tokenized equity.</p><p>You want a EuroToken. You don&rsquo;t want your company valuated in Ether.</p><p>What if blockchain forks; which token is actually tied to the company?</p><p>Bounty approach gives many different styles within the codebase.</p><p>This is a problem; e.g. OpenSSL codebase after Masters / PhDs.</p>"}]},{id:2,name:"Leo Logvinov",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Started in blockchain 2 years ago in Berlin, working on Ethereum devtools, building solidity plugin for IntelliJ, built by him and an Australian.</p><p>Working on truffle, did some PRs, improving speed, usability, error handling.</p><p>Started working on 0x, primary role: devtools team.</p>"},{question:"bounties",answer:"<p>There is a limit on local variable numbers (have a limit of 16, which influences how you write the code).</p><p>Solidity doesn&rsquo;t push variables down the stack, so you can&rsquo;t go more than 16 deep. This is an implementation detail in current compiler that needs to be improved.</p><p>ABIv2 - experimental feature for half a year or so - return structures and bus structures as parameters. 0x are planning to use it to make their code easier to audit especially.</p><p>C++ devs needed</p>"},{question:"missing_tools",answer:"<p>Prettier type plugin for solidity. I don&rsquo;t have time to write it but Prettier has a good API.</p>"}]},{id:3,name:"Axel Ericsson",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I have built 1Protocol</p><p>It lets smart contracts sign up as miners on different proof of stake protocols</p><p>Let users provide the contract with the stake</p><p>It&rsquo;s like a mining pool, but for staking</p><p>Three things</p><p>Interface for signing signatures (like MEW) and sending tokens to mediators</p><p>Building actual contracts that accept tokens and are signed up in Raiden as a mediator</p><p>Actually running the mediating machine on Raiden.</p><p>Eventually, anyone can send tokens and anyone can run the machine</p><p>For this, simply writing software around the Raiden node client. Raiden has published a python client. When you run it, it exposes an API on your computer, and 1Protocol is writing software that interacts with that API.</p>"},{question:"tooling",answer:"<p>Just web3JS and the python raiden client</p>"},{question:"testing",answer:"<p>Truffle suite. Before that, built our own unit testing system.</p>"},{question:"smart_contract",answer:"<p>Human thinking and auditing.</p><p>Will find some external team to do a professional audit.</p>"},{question:"bounties",answer:"<p>Breaking out a javascript library for web pages that are accepting payments, which allows you to accept any kind of wallet mechanisms: Ledger, Metamask, Priv key, encrypted keystore, etc.</p><p>Same thing needs to exist for desktop software. Need a simple desktop wallet that accepts any kind of access to payments.</p>"},{question:"missing_tools",answer:"<p>There is no tooling or anything related to state channels that is trusted yet.</p><p>Need the MEW of state channels.</p>"}]},{id:4,name:"Mike Goldin",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Software developer at Consensys</p><p>Known for Token Curated Registries 1.0. Works on team turning TCR&rsquo;s into product which in turn informs the engineering/design. We fully intend the projects to succeed so we can incorporate feedback. It&rsquo;s all still experimental, though.</p><p>TCR came from AdChain. Deployed to Ethereum mainnet on April 24th. Useful for data on how people interact when there&rsquo;s actual money at stake. New type of TCR where token supply inflates after every vote.</p><p>Adchain allows publishers and suppliers to find each other on a p2p.</p><p>By using TCRs to curate who may participate, cut out middlemen as well as bad actors.</p><p>Focus is on onboarding.</p>"},{question:"tooling",answer:"<p>Truffle, useful as a testing framework.</p><p>Solidity linter, Sol Lint. Not super good, but alright. Eventually, I want an Airbnb javascript plugin for ES Lint.</p><p>Ganache Test-RPC</p><p>Eth.js sometimes</p>"},{question:"testing",answer:"<p>Writes tests in Javascript</p><p>Sol Coverage tool</p><p>Wants 100% code, branch etc.</p><p>Github is part of testing workflow because of code reviews</p><p>How do you handle smart contract verification and security?</p><p>Also Josh Cassidy</p>"},{question:"bounties",answer:"<p>Pretty cool to have more languages for the EVM. Solidity is only reliable one. Yoichi&rsquo;s Bamboo is moving along.</p>"},{question:"missing_tools",answer:"<p>Fuzz Testing and formal verification desired.</p>"}]},{id:5,name:"Oleksii",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Started working with smart contracts in early 2016.</p><p>Started by writing tests using Truffle for other people&rsquo;s contracts.</p><p>Then, started educating himself on Solidity, became a smart contract developer.</p><p>What do you do at Ambisafe?</p><p>Do custom development for clients.</p><p>Our own products: e.g. webhooks for contract calls.</p><p>Scalable supernode solution &ndash; logic to make the node robust, etc</p><p>Platform to issue tokens. Fixed set of contracts, but for every new token, they deploy a new contract as a gateway.</p><p>Gateway token contract &ndash; implements specific logic of different tokens. Fees, etc.</p><p>+ Toolkit for DevOps / deployment:</p><p>Javascript functions to solve common problems, tx propagation issues, &hellip;</p><p>Tx propagation issues: sometimes your node gets a tx, but doesn&rsquo;t propagate to any other ones. Mostly seen in Parity.</p><p>Deployment scripts</p><p>Checking that the gas that&rsquo;s going to be spent; if enough gas is provided.</p><p>Scripts to collect info from the blockchain, doing sanity checks to make sure it&rsquo;s all good before proceeding, then collecting data after, &hellip;</p><p>COULD THIS BE A BOUNTY TOOL?</p><p>Cloning of contracts.</p><p>Most of their contracts don&rsquo;t copy any code anymore.</p>"},{question:"smart_contract",answer:"<p>We have written our own tools which tell us, for instance, that &ldquo;this variable is never used.&rdquo;</p><p>Also includes optimizations to improve gas usage &ndash;&ndash; e.g. read address value and store in memory before loop, then call into it.</p><p>For contract address, for state variables, etc.</p>"}]},{id:6,name:"Brett Sun",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Working on Aragon entirely.</p><p>The end goal is to create a network between organisations that live on Ethereum (and potentially other platforms in the future).</p><p>This required a lot of foundational features.</p><p>A network of organisations requires organisations in the first place! So we have been working for the last year to build these.</p><p>We are now switching gears to think about what a network between the orgs will really look like.</p><p>We build aragon_os: an OS for organizations. We tend to think about resources (i.e. people and money), and structure the OS according to well-known principles. Instead of people and money, normal OSes manage CPU and RAM etc.</p><p>Two key pieces to this sort of work:</p><p>Controlling money.</p><p>Controlling permissions.</p><p>We also provide a lot of UI components on top of the contracts that we are writing.</p><p>The entire goal of 0.5 (live on Rinkeby now) is to allow people to easily create and manage their own organisation, along with granular permission and financial management.</p><p>Should be able to create their own application to live in their organisations: and this is where we imagine the network of organisations will emerge from.</p><p>Hooking up your own apps, and designing your own interfaces to handle certain complex behaviour</p>"},{question:"tooling",answer:"<p>Four categories:</p><p>EVM and lower level stuff:</p><p>A lot of our problems have been solved by solidity 0.5 pragma</p><p>Revert with reason! Should be better for error logging.</p><p>Dynamically-sized parameters inside the EVM. We did not have an opcode before Byzantium that could have handled returndatasize with dynamically-sized stuff.</p><p>We play a lot with assembly and ABIEncoding has really bugged us before inside Solidity. So when, for eg, we want to stuff dynamic arrays with mock call data sent through delegatecalls. We have to do some funny business to properly encode them, and 0.5 exposes tooling to do this automatically.</p><p>Smart contracts:</p><p>Not a lot of great tools here yet, especially around testing. This seems to be a fairly obvious hole.</p><p>Not a big fan of Truffle, even though everyone seems to use it. It is especially slow when compiling.</p><p>Solc can be installed directly on most distros, and does stuff in less than 1s, whereas solcjs will take 20s, so why would you go for the latter?</p><p>Dapphub has their own set of nix-based tools that I haven&rsquo;t tried yet, and really want to. But the barrier to understanding here if you don&rsquo;t come from the right programming background is very high.</p><p>We use a bunch of standard libraries like Open Zeppelin, and the MiniMeToken and some other cool code that tends to fly around on GitHub or Reddit in the right places. However, this is a tricky place right now, because Package Management is unclear and no-one is yet sure if they want to use ETHPM.</p><p>There is a lot of people copy-paste contracts into their own repos, which isn&rsquo;t great. It would be better to see them moved between repos with commit hashes and proper referencing.</p><p>We do this, as it is especially helpful for auditiability.</p><p>Dev tooling that allows people to easily build aragon applications:</p><p>It&rsquo;s tough to develop Ethereum applications right because there are a lot of things you need to spin up yourself.</p><p>Deploy a local chain, deploy your contracts onto it, and then only with that done can you start building a UI linked to that chain.</p><p>Not too bad if you have just a few contracts, but with the way that Aragon has been designed (esp in term of flexibility) there are a lot of components that need to be deployed on chain before it all begins to work.</p><p>ENS on local chain, APM, base logic contracts, factories to extend the proxies on top of those basic contracts, and then only do we have a good chain state for people to hook up a UI against.</p><p>This produces a lot of friction, both internally and externally, so we have this goal to simplify it all.</p><p>Ganache has a snapshotting feature where it will dump the entire chain state (the whole patricia trie into a bunch of JSON files) that can then be used to start up your own chain from that state.</p><p>However, when you tell Ganache to run from the snapshot, if you do anything on the chain, it overwrites everything.</p><p>So you actually need two snapshots and some patience to get things right.</p><p>We also need to deploy things onto IPFS, which adds another barrier for users wanting to get going with local development.</p><p>So, we have tried to build this command into aragon-cli, called &ldquo;aragon run&rdquo; that handles everything for you.</p><p>Based on the brittleness of tooling though, it&rsquo;s very difficult to make this reliable, and get it to error gracefully and debug why it isn&rsquo;t working when it fails.</p><p>UI:</p><p>Not too much in terms of Ethereum-related tooling - a lot is just normal, front-end javascript.</p><p>Major frustration is web3.js. There are just so many things wrong with that package&hellip; &ldquo;Every day is new adventure when using web3&rdquo;.</p><p>Pretty much every time we have had to do something for a deadline, we have run into issue with it that have delayed us.</p><p>i.e. in Buenos Aires, we wanted a mainnet launch for our Survey App, for which we need websockets and https.</p><p>We set Parity up with secure websockets on our own node and launched our UI and web3 just doesn&rsquo;t connect to secure websockets. So what was the problem?</p><p>Took some hours to play with all the different settings before realising that the latest version of web3 doesn&rsquo;t support websockets. Downgrading then works, but the previous package didn&rsquo;t have some other functions we needed.</p><p>Relied on getting events to process changed information in the UI. However, the event handler in one particular version of the package would send some events in the error callback as opposed to the actual one and we were totally baffled how that could even be.</p>"},{question:"testing",answer:"<p>In addition to the above we also use solidity-coverage, which can be super painful too. Not sure if the most recent version has fixed some of the issues, as we haven&rsquo;t yet upgraded (we pin our contracts to an older version of solc for security reasons after they have been audited with a specific compiler version).</p><p>All of the tools are tightly coupled to the solc versions they use, and this becomes an issue in general for updating tools for coverage and testing. This should take 30 mins to set up, and yet, our CI is still broken today because solidity-coverage just does not want to work.</p>"},{question:"smart_contract",answer:"<p>Human audits only right now.</p><p>Trailofbits is really interesting, been wanting to play with Enchidna. These guys come from a traditional infosec background and it really shows, because their professionalism is on another level from anyone else we&rsquo;ve been exposed to.</p><p>A lot of the actual code can be checked fairly automatically, especially with the more hardcore tools now coming out. You can&rsquo;t really automate some of the creative, game theoretic attacks, but there are people who are very good at this now.</p><p>Tried Oyente a while ago and did not have a good impression. It didn&rsquo;t really provide that much and the things it could identify were pretty easy to spot anyway.</p>"},{question:"missing_tools",answer:"<p>A nice debugger! Please&hellip;</p><p>More infrastructure to easily set up your own node, and second layer tools on top of that to help cache data, because Dapps in 10 years are never going to work with just events...</p>"}]},{id:7,name:"Jorge Izquierdo",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Aragon - Decentralized Governance platform</p><p>We had a feeling that they had to go deeper into the stack to launch Aragon.</p><p>What we&rsquo;ve built:</p><p>We&rsquo;ve built two different interpreters:</p><p>Language for ACLs</p><p>Language for tx descriptions, similar to Natspec.</p><p>Allows you to do calls to smart contracts; but really basic stuff;</p><p>Built generic framework for interacting with their contracts. Our dApp changes; needs to integrate with 3rd party apps without allowing dApp developer to touch the database.</p><p>Ruby on Rails abstraction on-top of the data layer.</p><p>Problem here: we don&rsquo;t have any servers, we are a real dApp. Every single user has to compute entire state of the dApp.</p><p>Backend protocol / caching protocol / event-processing.</p><p>Upgradability stack.</p><p>Tooling to update storage etc correctly.</p><p>Trustless signer: help people understand their tx before sending the tx.</p><p>Working with metamask on this.</p><p>Our own CLI tooling</p><p>We have a package manager &ndash; backend to our app store</p>"},{question:"bounties",answer:"<p>Infura that is more decentralized. A full-node infrastructure[a].</p><p>An open-source explorer.</p>"}]},{id:8,name:"Jack Peterson and Sparkle",matchedIndex:-1,interview:[{question:"tooling",answer:"<p>Back-end: Visual Studio Code with docker images that run pythereum for unit tests.</p><p>Solidity compiler - Solium linter everyday</p><p>Integration tests run against Geth/Parity nodes</p><p>Custom libraries -- all their own RPC code.</p><p>No web3.js (ETH.js libraries are better)</p><p>Can run locally or dockerized - have a CI pipeline (Travis)</p><p>Push to Github and deploy to Rinkeby</p><p>Custom deploy tools are a huge headache. Doing a full custom deploy is like launching a satellite into space. There is a huge chasm to cross and a lot of the stuff is non-obvious</p><p>Truffle is used for this -- very challenging because it lacks deep modularity and customizability.</p><p>Failed at random on different networks after working reliably against testrpc. It won&rsquo;t tell you why and is deeply opaque. There is no error messaging and it is hard to use in general. The dependency of contracts gets very complicated (because logic is complicated).</p><p>There is definitely more work to get Truffle smooth for everyone</p><p>Actual contracts / delegate contracts -- build system is incredibly specific to their framework and difficult to adapt/customise.</p><p>Use Geth / Parity</p><p>UI -- react / redux.</p><p>Augur node is typescript ..</p><p>Lots of small things -- middleware library called ethereumjs-blockstream.</p><p>Library for generating keys and key files -- keythereum.</p><p>Key management is tough -- self signing (so can leave unlocked Geth instance, which is not good either)</p>"},{question:"smart_contract",answer:"<p>Pay others to think about it - no process yet.  We write a bunch of units tests, and we are going to run things through Oyente (Formal Verification).</p><p>Biggest problem - always has been - test thoroughly and comb through the code. Use static analysis tools. The biggest thing holding us back:</p><p>Maybe better standards for writing this stuff (NASA)</p><p>Create linting rules?</p><p>Have people working on project exhaustively review the code is the only way to do it right now. Certain classes of errors can be caught with unit tests, but we don&rsquo;t catch everything.</p>"},{question:"missing_tools",answer:"<p>Setting breakpoints in tests!</p><p>Salesforce Development:  Public thing where you post your code to it and everybody works off of it (lots of bounties projects now up from Status Open Bounties to Gitcoin and bounties.network).</p><p>Having clean Dev Nth without 30 things to set up:</p><p>React project will need to talk to Geth / IPFS / local = lot of setup is irritating.</p><p>If a transaction fails, the logs don&rsquo;t get written. This needs to be in the EVM</p><p>Having many slacks is a big problem. We should have 1 slack with all developers.</p><p>Documentation is also terrible.</p><p>What documentation would you like to see?</p><p>Tooling / documentation / community takes like a decade to develop. (Check Kauri for a possible solution)</p><p>&ldquo;How does Geth estimate Gas&rdquo; - need to ask a bunch of people and it&rsquo;s not written anywhere.</p><p>How much gas does a particular operation cost? Is this written down anywhere?  (People point you to yellow paper, but it&rsquo;s very hard to understand.)</p><p>Issues are not addressed so well by the Ethereum Foundation. We&rsquo;re talking about normal software development issues and sometimes the Foundation seems unfamiliar with best practices.</p>"}]},{id:9,name:"Joey Krug",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Co-Chief Investment Officer at Pantera Capital and Co-Founder @ Augur.</p>"},{question:"tooling",answer:"<p>At Augur, stack is different as it&rsquo;s a bit older.</p><p>IDE: if you&rsquo;re doing something simple you can use something like Remix. Remix has all the kind of stuff you need, automatic static analysis to detect bugs and very visual and easy to run.</p><p>More than 5-10 smart contracts, beyond ERC20 and ERC-721, now Remix will fall apart</p><p>UI is a big clunky as you add more contracts</p><p>It&rsquo;s hard to write a complicated test suite with continuous integration. Instead use Sublime with terminal or EMACS and VIM. Augur primarily uses a Visual Studio Code syntax highlighting.</p>"},{question:"testing",answer:"<p>Run against pyethereum. Test suite is written in Python. As an investor, most companies are in JS environment with Truffle. Like Python a bit more. Truffle complaints are it has a lot of quirks. Default instructions for setting up tests in Truffle you get a weird nested stack of tests.</p><p>UX blockflow IDEO for Truffle, doesn&rsquo;t need to be rewritten but needs to be improved.</p>"},{question:"smart_contract",answer:"<p>Yeah, encourage everyone to use auditors. Lots of multisig tools out there that don&rsquo;t have CI builtin. Oyente, Mythril, but one problem is that no one else really uses them. Lots of bugs they found.</p><p>Tools are very well optimized to run for one smart contract. But not to run on suites of smart contracts. But if you fast forward a few years this will be relevant.</p>"},{question:"missing_tools",answer:"<p>My answers changed over a time, 1 year ago it was static analysis. These tools exist now, but they need to be improved. The tools themselves don&rsquo;t have test suites, for example and they need more firepower in general.</p><p>From an investor standpoint these dev tools need to be improved.</p>"}]},{id:10,name:"Mark Beylin",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Creator of the Bounties Network. Bounties on any task in any Ethereum token. Frontend that relies on Infura and IPFS.</p><p>Infura doesn&rsquo;t let you listen for events. They have websocket capabilities that may be in beta right now.</p><p>Users use metamask for calls and transactions on it</p><p>I am the only solidity developer throughout its life.</p>"},{question:"tooling",answer:"<p>I know and use the solium linter.</p><p>Use truffle, testrpc. I love Remix.</p><p>Use Remix for deployment. Feels like I can trust remix to work as it&rsquo;s meant to.</p><p>Web3JS, BigNumber, site is built on React.</p><p>IPFS JS library.</p><p>Blockies react library.</p>"},{question:"testing",answer:"<p>Mocha tests using Truffle and testrpc.</p><p>Also use Rinkeby for when deploying staging versions.</p>"},{question:"smart_contract",answer:"<p>Consensys diligence is an auditing team available for their teams.</p><p>Argus (Berkeley audits chain)</p><p>Didn&rsquo;t find anything in our latest audit</p><p>Diligence at Consensys later found a re-entrancy vulnerability</p><p>Oyente also missed the re-entrancy bug(!!)</p><p>Having bug bounties in general is a good standard</p>"},{question:"missing_tools",answer:"<p>Better querying possibilities on the state of contracts. Better indexing to do this. Even something that will just shoot results into a SQL table.</p><p>A good wiki that is endorsed by the foundation but curated by the community.</p><p>E.g. &ldquo;How to do X&rdquo;</p><p>E.g. &ldquo;What is X&rdquo;</p><p>People don&rsquo;t know what they don&rsquo;t know</p>"}]},{id:11,name:"Aidan Hyman",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Working with parity and geth and parity-bridge. Optimising the EVM for bespoke needs - could be for clients, for enterprises. Lower level focus.</p><p>Create tools and mechanisms for people to utilise the tech as easily as possible.</p><p>Collaborating with Aion & Shyft on potential implementation of a bridge.</p><p>Both on top of parity-bridge, which has some limitations:</p><p>Made only to work with POA.</p><p>Data availability for token information, following delegate_calls and not events.</p><p>Suggest work with Jay Rush and maybe add them into the team!!</p>"},{question:"tooling",answer:"<p>Truffle</p><p>Lack of modularity is the biggest problem (across all tools listed below). Building on top of, rather than within, the EVM you need to update the toolset you&rsquo;re using and this becomes really difficult with the current tools.</p><p>If you implement some different opcodes in solidity, you need to take them all the way up. Open source is great, but it needs to be easy to fork and re-implement it easily in order for it to be really powerful.</p><p>Talk to person who had to modularise Truffle internally (not just testing, but also the lack of modularity - if you want to change something and still talk to others in the space, the best solution is often to rewrite the whole tool yourself, which is less than ideal). Aidan to send intro to David about this.</p><p>Parity and Geth</p><p>Also speak with David and Greg.</p><p>Use Parity due to responsiveness from the community and how good they are at answering questions!!! Great community - so NB!! Aidan&rsquo;s biggest asset is his network of core community members, which really matters in decentralized communities - open channels of communication.</p><p>Rust is a more obscure language and people lack experience, hence geth is somewhat easier to use and troubleshoot.</p><p>Geth has a bigger community, but the actual people developing the client aren&rsquo;t as readily available as Parity.</p><p>MetaMask for frontend development</p><p>Were tasked with making MM work for client and had to rebuild a lot of the stuff. Will also send an intro to the dev who handled. Greg is his name.</p><p>Mythril</p><p>Huge frustrations with this tool. Getting it running is a pain in the ass.</p><p>If it could be applied at the stack layer and not the smart contract layer. Build something like Mythril for an EVM implementation, trace things up the stack cleanly, add/remove opcodes, make new instructions. A stack explorer so to speak.</p><p>Could spawn so many things because we could understand the stack in a better way and grab a lot more logic. Pity to see focus on higher level tools, which has become somewhat of a hindrance. Why hyperledger went out and did it themselves (not just the licensing issues).</p><p>Educational tool for stupid web devs like me to learn about how opcodes actually work and are composed in the EVM.</p><p>Regular rust and node related stuff (also some go stuff).</p><p>Are there tools from these arenas that don&rsquo;t exist in Ethereum which would be really cool?</p><p>We need to make these tools more closely aligned with the chain itself. With WASM coming online, this is already happening and we just need to be ready - i.e. teach everyone WASM.</p><p>The end if here for really high-level development with WASM. What this will mean for the community and internet in general has yet to be discussed completely.</p><p>Try to use ethers.js as much as possible as opposed to web3</p><p>The person developing these tools (Richard) is totally accessible, responds to issues immediately (faster than a bot!!) - he is so collaborative and wants to make sure everyone is using the best tools possible, and this all makes such a difference.</p><p>Polymath people doing off-chain signing, which you couldn&rsquo;t do at the time and 1 of the methods didn&rsquo;t have a response variable they needed, and by the next morning it was updated. Tight feedback loops make it so much better to use tools.</p><p>You can create your own wallet in 4 LOC in your terminal - again the language and syntax is so much easier for a non-dev that this solution ought to win in the long time. Very relatable and understandable code base.</p><p>Gave solidity and parity/EVM workshops:</p><p>EVM workshop: took instructions, showed how it would be passed onto stack, where things go, how it gets passed on to memory. Questions were so relevant and knowledgeable.</p><p>Whereas in the solidity workshop, the questions were much more absurd and irrelevant. Talking about the stack, people from a dev background get it. It just makes sense. Take away: if we want devs who have been developing for 20 years, we need to actually show them how the stack works.</p><p>This is a community-wide failure that we need to focus on - for someone with a CompSci degree, solidity is crazy, but the stack is not!!</p><p>Bounty for cleaning up the yellow paper. Speak with David about this and his more in-depth version of the yellow paper.</p><p>Only ever hindered by delivering work because of MetaMask. Event and event monitoring between different networks was a fix that took a long time to be fixed. They have updated since and we haven&rsquo;t done any more work there since.</p>"},{question:"testing",answer:"<p>Talk with Stu, who handles all the testing stuff.</p><p>Used to do what Mythril does: visualize the contracts as it does now, so once it is set up, it is very cool for us to use.</p><p>Such a focus on formal verification in Solidity (but who even knows if it really matters?).</p><p>Not doing fuzz testing for instance, and it seems like a lot of these requests are based on assumptions that have not been proven.</p><p>No-one knows what the optimal testing framework is, so more default templates in general that allow people to use what they need to use across different projects.</p><p>Again, modularity is what matters most.</p><p>Both unit and functional test as necessary. Unit testing seems more standard. Mocha and chai within truffle for the most part.</p><p>Ethereum-js VM has really bad testing around it and could be really usefully improved. We need some kind of local implementation to do testing on! Write another test suite as a bounty here.</p>"},{question:"missing_tools",answer:"<p>Mythril for the EVM stack. Rewrite a complete stack visualizer for the whole EVM. Add opcodes to the stack and see how it looks programatically and logically would be awesome.</p><p>Even an overhauled IDE that is actually Integrated. Again, rewritten from scratch with a focus on modularity would be really nice to see. Even just clearing your cache properly and the way it physically looks is not good enough.</p>"}]},{id:12,name:"Greg, Stu, David",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>David: EVM layer stuff: interactions between opcodes, JS dev and web3 also comes into this at the other side</p><p>Greg: Reimplementation and adding functionality to the EVM and a lot of &ldquo;bridge work&rdquo;</p><p>Setting up bridges, working with parity bridge and other existing contracts</p><p>Added efficiencies for personal needs to types when blocks are getting written. Basically recreated in the EVM to get a sender.</p><p>Way blocks are written into the merkle tree.</p><p>Parity bridge is cumbersome because it is not well versionized and depends on the version of the EVM you are running/that you forked from. Often requires a ton of extra configuration.</p><p>Stu: solidity and PM (managing groups of people working at that layer of the stack), building smart contracts for clients</p>"},{question:"tooling",answer:"<p>JetBrains suite as an IDE. Remix comes in there for extra convenience but has it faults and is not totally integrated.</p><p>Biggest problem with Remix is that it is written in jQuery and it is monolithic. Don&rsquo;t know when it compiling/rebuilding contracts. Spinner doesn&rsquo;t spin more than once, no responsiveness, very frustrating. Well laid out for an MVP ;)</p><p>Pass in data as strings and not having it parsed as strings is frustrating.</p><p>Will meet with Remix team this week to advance development further. Seeing it as only 2 devs hammers home how under-resourced a lot of this software infrastructure is.</p><p>Debugger has not really been touched since the first version. Critical software lagging behind is not good. Still better than the truffle debugger though.</p><p>EVMLab - has an old school debugger that lets you step thru opcodes and examine what is happening in memory and storage. Has not been maintained recently, so you need to hack it together yourself.</p><p>Web3 and truffle sometimes, but not often. Often Remix and a couple RPC calls with console.log()s suffice.</p><p>Looking over Mithril and visualisation of the control flow seems really interesting. Handles all the low hanging fruit, as an automated system should.</p>"},{question:"testing",answer:"<p>Mostly unit tests in mocha and chai.</p><p>Mostly using Travis to automate the pipeline.</p><p>Projects are fairly young and PoC - so not necessarily a major concern at this point.</p><p>If not already mentioned, are there any libraries you rely on regularly?</p>"},{question:"smart_contract",answer:"<p>Mythril, as mentioned above.</p>"},{question:"missing_tools",answer:"<p>EVMLab certainly has some of the features required, but they are very inaccessible</p><p>Directly execute arbitrary code and trace through it in nice fashion that is not just some JSON output.</p><p>Need to be able to step through those traces easily, which is also not possible there currently.</p><p>Go implementation of parity bridge (to make it leaner). Only one bridge that is open source, so having another one would be useful, especially seeing as Parity devs don&rsquo;t document well, especially changes between versions.</p><p>Some level of standardisation around bridges and agreement about how they should be structured.</p><p>What does interoperability actually mean in this context?</p>"}]},{id:13,name:"Jon Maurelian",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I work at Consensys Diligence doing audits; similar to Zeppelin.</p><p>Also, I do technical communications / writing blog posts about best practices around security / Consensys docs / token repos.</p>"},{question:"tooling",answer:"<p>We use Truffle a lot (never had to use Dapple or Embark)</p><p>Zeppelin used by clients -- would like to use EPM more</p><p>Runs a Geth node myself</p><p>Solhint linter</p><p>Solidity Coverage is test measurement coverage tool</p><p>ETHGasReporter (Takes your Mocha reports and says how much Gas your test used.)</p><p>Would like to see a fuzz tester.</p><p>Excited to learn more formal verification + bringing into practice &ndash; intro to Sergio?</p>"}]},{id:14,name:"Nick Dodson",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Working on experimental infrastructure. ARES, GovernX.</p><p>Building off-chain stuff - in order to conduct governance in organizational structures, most of the work is off-chain.</p><p>Will also be doing on-chain governance, where they build DAPPs for ICO&rsquo;s</p><p>Infrastructure level stuff: infura.</p>"},{question:"tooling",answer:"<p>Solidity Compiler</p><p>The C version is very fast - but if you run the emscripten version, it&rsquo;s painfully slow.  In transpiling process of C++ version, it drops down performance. The JS transpile needs to be improved.</p><p>Solc compiler slows down development time. Ideal to stay in local JS (and not have to go back to solc), have it compiled super fast inline using a tagged template literal or something like it (using require(&ldquo;solc-inline&rdquo;) or equivalent).</p><p>Could write `solidity` in backticks and have it compiled all in same file.</p><p>Would make experimentation and testing much easier and faster. Could potentially provide some specs/API for this. Will provide further specs via email.</p><p>Trying to build complex systems with 20 contracts and everytime need to wait 20 minutes</p><p>TestRPC + Geth Client</p><p>Not well maintained - ask Truffle team.</p><p>People are trying to get away from it - people want to test on GETH / Parity and use them to run their own Geth nodes, but it&rsquo;s a pain in the ass.</p><p>Was working on Geth library that allowed you to run in Mac / PC with JS</p><p>Used Geth like Testrpc - allowed you to test contract codes against all clients (Geth / RPC / Parity)</p><p>Never finished, but definitely needed.</p><p>If you&rsquo;re running contract tests locally, TestRPC is only ETH JS VM. This is, however, not the VM most of miners are using, and that can be cause for concern.</p><p>Can we make testing contracts against Geth easier? NodeJS Wrapper against Geth (most people are using Truffle - would be happy if Truffle had a module for this)</p><p>Truffle uses Ganache which is ETH JS VM - this isn&rsquo;t used in production.</p><p>Truffle involves hassle of having to download run and configure GETH</p><p>Maybe a wrapper or easy install script - run Geth like TestRPC</p>"},{question:"smart_contract",answer:"<p>Mythril will be useful when in full bloom - need more oversight on contracts in general</p>"}]},{id:15,name:"Ilan Benbrith",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I&rsquo;m the Technical PM at Consensys Academy working on an 11-week developer program. I&rsquo;m responsible for maintaining the course and making sure people reach their development goals.</p><p>The course is for experienced developers - experience with languages/git required.</p><p>Overall objective is to attract people to and grow the Ethereum community</p><p>Content creation, assignments, course, customer/student support, external resources, connection with Consensys mentors</p><p>The course starts with intro to blockchain in general, so that students don&rsquo;t have to know too much about blockchain. Historical context/ timeline, technical underpinnings of blockchain, technical underpinnings of Ethereum. Difference in mindset between traditional development vs DApp development.</p><p>Teaching them the setup and tools they&rsquo;ll need for the program (Truffle, Ganache, Remix, etc.)</p><p>Then EVM, Solidity/smart contracts, connecting a front end with React Native</p><p>Security smart contracting and auditing with help from ConsenSys Diligence</p><p>Finally, different integrations (IPFS, Oracalize, etc.) and design patterns of different teams.</p><p> LLL, Assembly language for the EVM, Vyper.</p><p> Ethereum Improvement proposals/ Ethereum Request for Comments processes</p>"},{question:"tooling",answer:"<p>Truffle, Ganache, Remix, Metamask etc.</p><p>Front end</p><p>React Native</p><p>LLL, Front end libraries</p><p>We give wide exposure</p>"},{question:"testing",answer:"<p>Truffle testing</p><p>Best practices resources</p>"},{question:"smart_contract",answer:"<p>Consensys Diligence provides some of the best resources and best practices online</p>"},{question:"missing_tools",answer:"<p>Drizzle is a really cool idea for front-end development</p>"}]},{id:16,name:"Goncalo Sa",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I work at Consensys Diligence - focus on security of the ecosystem. Everything that is related to security: it&rsquo;s on our roadmap to tackle it.</p><p>95% of our work today consists in doing security audits on smart contracts - any EVM-compatible or &ldquo;compilable&rdquo; code. That accounts for building security tools that do the checks automatically, or that assist on manual inspection.</p><p>The goal is to eventually encompass everything related to Ethereum security.</p><p>I have always been hacking - a grey hat of sorts.</p><p>Built an ad tech startup, which had a built from scratch ad server that I did the architecture for.</p><p>Had a mobile app to tell Portuguese people what was happening in their city.</p>"},{question:"tooling",answer:"<p>I used to use Remix a lot more than I do today (though I still use it heavily).</p><p>Use it as a text editor, in fact, but mostly for debugger when I am auditing, especially when trying to prove/disprove an attack I have thought up.</p><p>Visual debugging feature helps me a lot. It&rsquo;s not perfect, though.</p><p>We&rsquo;re fans of dogfooding, so I use Mythril a lot, which was initially created by Bernard, but is now being developed by a bunch of people we hired.</p><p>Used mostly for automatic detection of errors.</p><p>Oyente is falling behind a bit, so I haven&rsquo;t used it in a long time.</p><p>Manticore is not built by us and does the same thing as Mythril (we have compared it). Though the inner workings are very different, the result is largely similar.</p><p>Have played with, but never tried to integrate, Enchidna into my workflow, as it is difficult to work with due largely to deadlines.</p><p>Rattle is closed source, so haven&rsquo;t yet got around to playing with it.</p><p>I extended a tool from Federico, who has an ANTLR parser for solidity, that is basically a viz and query tool for solidity contracts. Everything from inheritance trees to function call graphs and querying function paths in the function call graph. It is a tool to help with manual inspection particularly.</p>"},{question:"testing",answer:"<p>Remix, Surya and Mythril as above.</p><p>Very small number of instances where I need to do something off chain, for which I will then use Truffle.</p>"},{question:"bounties",answer:"<p>None come to mind right now. Let&rsquo;s keep the focus on EthPM here - we need to make sure as many people use it as possible! We should have done this a long time ago and we need to dogfood it as a community!</p>"},{question:"missing_tools",answer:"<p>A proper, local dummy client. I love the Truffle team and I love Ganache, which I use a lot.</p><p>I run a lot of tesst on Ganache, which are not seamless to run on other machines, so I would love a super seamless cross-platform client that has a great block explorer in it.</p><p>Using the visual version of Ganache about a month ago, I couldn&rsquo;t see events being fired, or various important details on transactions happening there. We need a more full-fledged local client.</p><p>We haven&rsquo;t really prepared for how to handle contracts across shards (coming months to years, who knows?).</p><p>We are looking mostly at tools to support the WASM architecture. This is likely the problem that will take the most of our time, I think. I have talked to Johan Barbie about this and I&rsquo;m not sure anyone has a very good solution for what a tool that would help scheme the interactions out actually looks like.</p><p>I am personally more worried about language design stuff, and languages in general, than I am about the consensus layer, or anything below the language and application layer.</p><p>We are also working hard on updating our tools to support, for instance, Vyper. John has been doing a terrific job there, doing contract translations from Solidity to Vyper, built a plugin for Truffle.</p><p>Mythril will also eWASM at some point before it goes into production.</p>"}]},{id:17,name:"Fabiano, Jordan, Nick",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Cryptokitties! Goals they have are to get multiple millions of users, the sooner the better. Ethereum sharding would be very nice, but even then there are scalability problems. Looking into other chains, EOS, Neo, Cardano  Looking at things from a scalability perspective.</p><p>Back-end stuff reconciling state of the world between blockchain and their stuff</p>"},{question:"tooling",answer:"<p>Been a while since we have done smart contract development, haven&rsquo;t done any since we deployed. Truffle framework, TestRPC (now Ganache). The standards at the time.</p>"},{question:"testing",answer:"<p>Standard testing and using community to audit contracts</p>"},{question:"smart_contract",answer:"<p>Audit code: bounty hunt program, found one major one via community. Ran our own repo specifically for this on Github.</p><p>Community auditing through bounty programs.</p>"},{question:"missing_tools",answer:"<p>2 main areas with significant problems:</p><p>Data analytics and reconciliation btw on-chain and off-chain data.</p><p>Our first MVP didn&rsquo;t have a back-end at all but we had to develop a back-end as we scaled. Reconciling these quickly and correctly is key.</p><p>Analytics is difficult. Web3 and Geth, have to hook into data. But there are too many hurdles to jump to get these.</p><p>In particular, the biggest problem is when we want to deal with analytics where some of the data is implicit, like a series of transactions. One tx doesnt give enough data. When someone bids on a sale option in cryptokitties, bidder, price, and catId. Have those 3 pieces of information. But when you ask how many cats has this person sold? This info is implicit in a wider set of tx&rsquo;s, all of which you have to fetch and then compare..</p><p>Part of this is not them including this info in advance. A common problem in the ecosystem is that once you deploy something you need more info after deploying a smart contract and it&rsquo;s hard to get this</p>"}]},{id:18,name:"Andy Milenius",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>DappHub:</p><p>Working on dev tools since I got into the space in 2015. There were no tools at all; we wanted to create them in a holistic way from first principles.</p><p>Made tools to make use of Solidity compiler & make Ethereum API & EVM simpler in general.</p><p>Formal verifications & contract safety.</p>"}]},{id:19,name:"Esteban Ordano",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I&rsquo;m hiring two or three people &ndash; excellent engineers &ndash; to build tooling.</p><p>We&rsquo;re calling the project Voltaire Labs, after the Voltaire house. Trying to get Sergio Lerner to help with that. Getting people I know from Google. Maybe we should join efforts? Will intro to Federico Bond.</p><p>Our infra:</p><p>MANA token which is an ERC20.</p><p>Auction of Land.</p><p>Land smart contract which is an NFT token standard.</p><p>Got tired of not hearing back re ERC non-fungibles improvements. Proposed alternative ERC.</p><p>Land registry of who owns which land parcel.</p><p>These link to IPFS or IPNS for content of land.</p><p>Decentralized exchange of land parcels.</p><p>Small tool for sending emails whenever an event is triggered on your contract. EthAlarm: takes address of contract, ABI, pick events that you&rsquo;re interested in.</p><p>We run the land auction off-chain, we had a period of registration where you&rsquo;d send the MANA you wanted to use in the auction. At the end of the auction, we distributed the NFT tokens and returned MANA.</p><p>Auction was mostly an independent application &ndash; better UX, less fees</p><p>Why the auction was off-chain:</p><p>We processed around 115k bids. The UX for the auction was great. We managed to provide the user with an experience that was way better, because it wasn&rsquo;t blockchain-based.</p><p>Both on the browser and the server, we exchanged cryptographic receipts &ndash;&ndash; &ldquo;I&rsquo;d like to bid for the following parcel (x,y), (x,y) &ndash; at the end you&rsquo;d receive a signed receipt&rdquo; &ndash; the server would receive that message, and say back &ldquo;I&rsquo;ve received a bid, and here&rsquo;s your receipt&rdquo;. All these receipts are public.</p><p>Anyone in the auction everyone could act as an independent verifier of the auction.</p><p>We returned a receipt had a nonce &ndash;&ndash;</p><p>We can audit the whole auction. Can prove every bid that we received.</p><p>How we&rsquo;ve been running auditing</p><p>We sold $16m worth of parcels of land.</p><p>We wanted to make sure that they weren&rsquo;t messing up.</p><p>Not many people were checking &ndash; but a few did and even reported back some issues; community trusted them.</p><p>Would be best if this was run on a decentralized protocol so people didn&rsquo;t have to trust these guys.</p><p>We&rsquo;re building a voting scheme with MANA:</p><p>&ldquo;How tall should this building be?&rdquo;</p><p>We are repeating the same pattern as the auction.</p><p>Our voting scheme is offchain and non-binding, because the project is early enough that people can back out.</p>"},{question:"bounties",answer:"<p>Biggest request: have ERC20 upgraded to ERC223.</p><p>We have troubles with small re-orgs &ndash; transferring immediately upon approvals causes issues.</p><p>This was a problem with our code; hard to develop.</p><p>Have watchers on the Blockchain, and sending transaction to make correct transfer, e.g. for MANA token.</p>"}]},{id:20,name:"Matias Bargas",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I used to be an investor, but came to crypto and Decentraland at the same time.</p><p>I used to work with Juan and 2 other guys who all joined the team at the same time. I really wanted to leave enterprise companies and loved the team already there.</p><p>It&rsquo;s about the open philosophy, and break down the walls around the 1% of the 1% and diffuse power into the hands of everyone.</p><p>I was working on an online IDE for an in-house language at MuleSoft. Now the engineering manager at Decentraland.</p>"},{question:"tooling",answer:"<p>The whole Ethereum stack, basically.</p><p>Truffle</p><p>Integration with common developer tools is not fantastic. We need to start thinking about and building our tools in such a way that is easier for the guy/girl who comes after me to fix the issues that come up.</p><p>If we are changing the world, why are we still thinking in narrow ways about how our tools should be used and by whom?</p><p>VS Code</p><p>React, typescript, nodejs</p><p>Bablyon.js as an engine for VR</p><p>Web3</p><p>One of team members rewrote web3 into typescript for EthBuenosAires and all the tests are passing! Will post a link here after the hackathon.</p><p>There were typos there!</p><p>There was functionality not working (and there are billions of $&rsquo;s running on top of it!)</p><p>IPFS for decentralized deployments.</p><p>Scalability is a concern here. If we want to deploy the whole metaverse in IPFS, we actually can&rsquo;t. We need to replicate data in, I don&rsquo;t know, Amazon or something because we can&rsquo;t supply the level of connection we need to (just 100,000 users or so, not even in the millions). And even this will require bootstrapping nodes like crazy.</p><p>The IPFS cluster is still in alpha and not as stable as we need it to be.</p><p>We are waiting for scalability, but we don&rsquo;t have the tools to monitor and handle that amount of information anyway, and this is a concern for us.</p><p>I haven&rsquo;t used this yet, but this seems to be an interesting tool: https://github.com/nomiclabs/buidler</p>"},{question:"missing_tools",answer:"<p>Starting from the infrastructure stuff: we need a new language to describe all the set of things that you need to do in order to deploy one or more contracts.</p><p>You have you application made up of a set of contracts that are all talking to each other: we need a decentralized logging system to make sure they are all still working properly and the events that are being dispatched by the nodes are correct.</p><p>A complete set of tools for testing. Truffle is not adaptable enough.</p><p>The work being done by Zeppelin on securing contracts and providing best practices around how to use audited contracts is great.</p>"}]},{id:21,name:"Nadav Hollander",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Building Dharma - open protocol for tokenized debt</p><p>Pretty much exclusively at the contract level, sometimes using stuff like libraries that wrap around contracts.</p>"},{question:"tooling",answer:"<p>I like to use Typescript for testing.</p><p>0x team built a great tool for generating typescript tests from ABI&rsquo;s</p><p>Using truffle to test.</p>"},{question:"testing",answer:"<p>Truffle to write JS unit tests.</p><p>** There are not good mocking libraries for solidity **</p><p>Had to roll my own mocking contracts for testing</p><p>A better native solidity testing framework with mocking would be awesome</p><p>No manual testing.</p><p>It&rsquo;s still pretty painful to do this too</p>"},{question:"smart_contract",answer:"<p>Write down in plain text documents what the invariants are for the contracts. Just very clear human speak for how the contract should behave.</p><p>Then write unit tests relentlessly.</p><p>Ideally, there would be code review, but he is coding solo in his stuff write now.</p><p>Finding an audit is a crappy process. No information on who is doing it, what prices look like, which auditors are good / have good reputations.</p><p>Talked to zeppelin</p><p>Talked to Consensys diligence</p><p>Talked to Quantstamp</p>"},{question:"bounties",answer:"<p>A GREAT SOLIDITY DEBUGGER</p><p>A turnkey solution to the &ldquo;trusted relay chain&rdquo; thing. Just make it easy for people to spin up a side chain, run their programs on it, rewind history to a specific point in time, etc.</p><p>Also let you set up rules on it like locking up deposits for a week between the side chain and the main chain.</p>"},{question:"missing_tools",answer:"<p>Good logging and debugging</p><p>Setting up your own side chain easily to test things on because it would be way faster</p>"}]},{id:22,name:"Alex van de Sande",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Working on Mist, the Ethereum browser.</p><p>Developers contributing open-source.</p><p>There&rsquo;s a wall between core team & open-source team.</p><p>Would love for people to be paid reliably for features.</p><p>3 Developers. Talk on Discord.</p><p>Current experimentations in paying open-source developers:</p><p>Colony</p><p>Commit F</p><p>We want beter Github integration. Now possible with Status Open Bounties and Gitcoin etc.</p>"},{question:"testing",answer:"<p>People build new features, we check, and then approve it.</p><p>We&rsquo;ve had issues &ndash;</p><p>Meteor.js migrating to React.</p>"},{question:"bounties",answer:"<p>Finding talented people is very hard. They are in such high demand. Trying to get people out of school. Online courses in Solidity.</p><p>Web developers, software engineers.</p><p>Separate recruiting approaches for the Foundation.</p>"}]},{id:23,name:"Nick Johnson",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>ENS: documentation, smart contracts, UI&rsquo;s,</p><p>Auditing other smart contracts</p><p>Other smart contracts</p><p>Ether cards</p><p>Offchain: dev tool, EVM static analysis tool,</p>"},{question:"tooling",answer:"<p>Open Zeppelin tools are increasingly good. But try to keep the smart contracts as small as possible</p><p>Just web3 itself in terms of javascript</p><p>ETH Gas station and etherscan are useful for different reasons</p>"},{question:"testing",answer:"<p>Truffle unit testing with mocha</p><p>Added built in testrpc</p><p>Testrpc still doesn&rsquo;t have big number support for certain signatures so we have to fire up a geth node</p>"},{question:"smart_contract",answer:"<p>Write a spec and define edge cases and corner cases</p><p>Lots of unit tests</p><p>Make a point of testing where you intentionally break</p><p>Ultimately get it audited</p><p>How will this get easier for beginners?</p><p>Open source solidity libraries so that less code needs to actually be written by beginners (just 10 lines of customization)</p><p>Build some of these best practices into static analysis tools (linterns on steroids)</p><p>Solicit crowdfunding to pay for the audits of projects that the mainstream is interested in</p><p>Open Zeppelin appears to be the best open source solidity library out there</p>"},{question:"missing_tools",answer:"<p>Byzantium added return data size (prevents arbitrary return data size limits). Once solidity implements this, it will be possible to return strings and stuff.</p><p>Automated updatable smart contract?</p>"}]},{id:24,name:"Elena Nadolinski",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Last 6 months have been working on Solidity, Ethmoji (like Gravitar for Ethereum).</p><p>Went to ETHWaterloo, have done talk at Hackathons about NFT&rsquo;s. Make your own NFT from scratch at ETHDenver. With tools that we have, things are not as hard as people think they are. Can write something in 20 minutes with tests!</p><p>OpenZeppelin came up to her and invited to talk at ETHBA.</p><p>With EthMoji wanted to make it the best smart contract as possible, wanted to make it upgradeable.</p>"},{question:"tooling",answer:"<p>Use Truffle because it&rsquo;s by far the best framework for testing. Used Embark and Biddler, used Remix a bit for debugging things in memory. Memory explorer would be fascinating. In Solidity everything is a hash table. No case at all for catching hash collisions.</p><p>OpenZeppelin, played around with ZeppelinOS but would use it more in the future.</p><p>VSCode with Solidity plug-in, almost never have problems.</p><p>Eth-gas-reporter is amazing :)</p><p>Command line tool for code coverage, Solidity-coverage is a mocha plug-in</p>"},{question:"testing",answer:"<p>Truffle for testing. Force people to do TTD in events!</p><p>Truffle is not efficient in deploying things, can have a deployer contract that handles with more gas efficiency.</p>"},{question:"bounties",answer:"<p>Documentation</p><p>Debugging, so helpful. A debugger with a memory view but without using Remix. Online IDE is not great UX for a developer. Coding in a website not a great pattern</p><p>Something that abstracts away MetaMask. An Open Source core. They are using a Chrome plugin because they are storing your private keys on your browser's local storage. If you could provide a core of this is how you talk to Infura.</p><p>Design system patterns. They really stick blockchain in your face. Want to sacrifice accuracy for a better UX. Design system. Very interested in participating in this.</p><p>Figma does a preliminary case study on design in the Bay. The crypto teams that do design use Figma. Corporate Design system, open source Figma file.</p>"},{question:"missing_tools",answer:"<p>A lot of tools exist but aren&rsquo;t being utilized here. There&rsquo;s no reason that Travis can&rsquo;t run with Truffle. But this pattern doesn&rsquo;t exist. Now that we have upgradeable contracts we can think of smart contracts like regular development.</p><p>Documentation, for a beginner starting out it&rsquo;s extremely difficult. Not that many good tutorials on how to use technologies together.</p><p>Index of good tutorials. For IPFS in a smart contract. Want more deeper tutorials. Want to understand the why.</p>"}]},{id:25,name:"Swaroop",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>We are building EthVigil an API gateway to to help developers build apps on blockchain without worrying about nodes or RPC calls. We take any smart contract and turn it into a REST interface. Use a modified ERC20 token (and a hacked Remix IDE). So you don&rsquo;t have to worry about encoding it, filling out strings, etc. Deploy it to a testnet. Even take care of issues that could occur on the blockchain.</p><p>Once it&rsquo;s deployed it&rsquo;s like a Swagger API, make all the Get calls, etc. Any web developer can see how it works. Setting up private keys, all that signing, all that stuff is taken care of (custodian feature). All you need is an API key, abstracts away some of the pain.</p><p>Demoed minting some tokens. EthVigil goes deeper and will investigate if transactions will fail. Any web developer can use it upfront. Can add integrations, their system monitors the whole blockchain for events, can get notifications on Slack/email.</p>"},{question:"tooling",answer:"<p>Mostly custom tools. Started with web3, started with Truffle but was running into a lot trouble using them so rolled their own.</p>"},{question:"testing",answer:"<p>Basic unit tests, integration testing. So much of the codebase that keeps changing so difficult to stay on top of testing, but have must stricter tests on mainnet. At the moment don&rsquo;t have external auditing.</p>"},{question:"missing_tools",answer:"<p>Web3 is a library to make it easier for a lot of developers in the space. But we use JSON RPC calls directly, don&rsquo;t want to abstract on top of this so don&rsquo;t want to get anything in between this. Had some issues with web3py.</p><p>Recommend that our customers use Truffle, Ganache, etc.</p>"}]},{id:26,name:"Alex Beregszazzi & Pawel Bylica",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Pawel - focused on VM in general, spent a lot of time designing / optimizing the EVM for the future.</p><p>Experimenting with new ways to make the VM faster for future upgrades</p><p>Classic code optimization - added some small features to EVM (like Revert / Return Data Buffer / Shift Operators)</p><p>Works mostly with Alex -- changes in Byzantium were with Christian</p><p>Joined 2-3 months ago</p><p>Maintained C++ code base for Ethereum client -- experience with EVM</p><p>Alex</p><p>Started with building dApps, contracts, UIs &ndash; everything was broken in 2015.</p><p>Then jumped into proposing things and fixing things;</p><p>Solidity</p><p>Testing</p><p>Javascript</p><p>Led to working on testrpc & ganache-core</p><p>Worked on Trezor, and build a dApp for it.</p><p>Ended up with all these other issues: cpp-ethereum; testrpc; RPC methods.</p><p>Tried to raise issues, and sometimes they end up in improvements.</p><p>Spends most of his time in Solidity design.</p><p>eWASM &ndash; started 3 years ago for 6 months &ndash; then took a big break &ndash; then now working on it for 3-4 months (really started in Jan).</p>"}]},{id:27,name:"Christian Reitwiessner",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>90% of my time: design of Solidity language and its implementation</p><p>Formal verification part of the language &ndash;</p><p>Deprioritized over the last 2 months. Will take on again in April.</p><p>Other projects:</p><p>General research</p><p>Less research re sharding or plasma &ndash; More research on computational scalability of SNARKs, STARKs, Truebit</p><p>Handed off cpp-ethereum to Pavel &ndash; not working on it as much.</p>"},{question:"bounties",answer:"<p>Gas profiling:</p><p>Solidity does some upper-bound gas cost estimation &ndash; but its not very useful because it&rsquo;s just an upper bound.</p><p>How to calculate: run the EVM with specific inputs?</p><p>Or: run the function with larger and larger arrays; and find a &ldquo;gas function&rdquo; as a function of input size. But this also depends on state.</p><p>Solidity &ndash; 16 stack slots issue:</p><p>Soon: we&rsquo;ll have structs, and this will be less of an issue.</p><p>When we have IULIA, this requirement will go away.</p><p>When IULIA compiles to EVM, it can move variables from stack to memory, after analyzing which is used or not.</p><p>Interesting: IULIA will compile to eWASM.</p><p>Inlining common function calls:</p><p>We&rsquo;re conservative when it comes to adding new features in the code generation flow.</p><p>We already have an optimizer for IULIA which does inlining; so that will resolve this.</p><p>The optimizer (in solc) has a switch which decides what to optimize for: code size, execution cost.</p><p>This exists, but is rather crude &ndash; it assumes every opcode is only run once and this assumption breaks down if you have a loop.</p><p>Have Remco share his 0x example with Christian &ndash; and how it could be improved in terms of gas estimation.</p><p>Constant delegation.</p><p>Have Remco to share example of hash not being calculated at compile-time.</p><p>Having a good technical writer &ndash; who can understand the technical details of Ethereum, and improve the documentation.</p><p>Another model could be to create bounties for improving the documentation. Won&rsquo;t be bounties for a specific issue; but general rewards for improvements to the documentation.</p><p>Improving the documentation for Solidity</p><p>They&rsquo;re too deep inside this. Having an external viewpoint would be helpful.</p><p>In the research area: due to the way research funding works &ndash; people publish the work, but do no maintain the software or integrate with other tools.</p><p>Integrating research software with development tooling & keeping them up to date.</p><p>Big example: Formal Verification software</p><p>Five or six tools that similar to Oyente.</p><p>Remix has a plugin architecture &ndash; possibly supports Oyente.</p><p>Idea for tool: being able to test very quickly if a contract implements an interface.</p><p>The problem is that you cannot enumerate the functions of a contract.</p><p>There&rsquo;s a way to resolve this.</p>"}]},{id:28,name:"Fabian Vogelsteller",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>My future project: Lukso blockchain: EVM-based blockchain.</p><p>Working on industry-specific blockchains.</p><p>Built the Mist browser and Ethereum Wallet(worked with Alex van de Sande, who came up with the idea / design, and Fabian built it).</p><p>Works on web3.js. Proposed ERC20, ERC725/735 identity standard.</p><p>Joined Jan 2015 before mainnet. First person to make the user-facing / developer-facing tools intuitive. Simplified the RPC API.</p><p>My main focus now: half-time: web3.js & half-time: Lukso.</p>"},{question:"tooling",answer:"<p>Web3.js</p><p>History:</p><p>Initially, it was built by Jeffrey Wilke.</p><p>Then Marek was working on it. Then I joined.</p><p>After Marek left, I took over. I&rsquo;ve been on it on my own for the last and a half year.</p><p>Did a full refactor. I changed everything to be more intuitive, simple, how I thought it should be.</p><p>Changed to a Pub/Sub model &ndash; can currently subscribe for logs, transactions, block headers. In the future, you should be able to subscribe to state changes, account balance changes, or anything else.</p><p>It&rsquo;s harder now to make global changes across Ethereum &ndash; because of different clients, agreements take time</p><p>E.g. Parity has the Pub/Sub model, and a parity-Pub/Sub model.</p><p>A lot of work around promises resolving based on conditions</p><p>Better documentation.</p><p>Account generation, key generation, signing, &hellip;</p><p>ABI Encoding, decoding, all are exposed.</p><p>Going forward: the API is good now, so someone should simplify the internals.</p><p>e.g. scrypt package is super large.</p><p>We hired a new person who starts in July.</p><p>The security model: either the person developing web3 is trusted, or you need a lot of people looking at it.</p><p>Would love to at some point decentralize & bountify the project.</p><p>The project doesn&rsquo;t need too many more people. The main work is done, but future addition could take more work.</p><p>There are two groups around the identity profile now:</p><p>Put it off-chain: for privacy etc.</p><p>Put it on-chain: ERC725.</p>"},{question:"bounties",answer:"<p>Need good IDEs:</p><p>Remix is good, but has problems.</p><p>Omkara &ndash; Remix for Atom. Sophisticated Solidity IDE for the Atom browser</p><p>This project can get a lot bigger. Could add debugging.</p><p>Formal verification</p><p>Write specifications for smart contract implementations, generated proofs that can be tested against EVM code.</p><p>Smart contract security / best practices</p><p>Also comes down to an editor &ndash; gives you recommendations, formatting, etc.</p><p>More examples in the Solidity documentation</p><p>There&rsquo;s someone at the EF working on documentation now.</p><p>Unit-testing for Solidity contracts</p><p>Dapple: a tool for testing Solidity contracts using Solidity contracts &ndash; unmaintained for 2 years now.</p><p>How is it that we don&rsquo;t have unit-testing for Solidity contracts?!</p><p>OpenZeppelin works on these audited pieces.</p><p>Ideas:</p><p>&ldquo;Results-based&rdquo; bounties.</p><p>having smaller tasks, having a lot of eyes on the project and setting smaller bounties.</p><p>Incentive structure for the reviewers & maintainers.</p><p>Idea: standing bug-bounties for large ecosystem projects & contracts, funded by EF.</p>"}]},{id:29,name:"Hudson Jameson",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Mainly focused on solidity smart contracts. A little node JS and Java but not very good at it.</p>"},{question:"tooling",answer:"<p>Remix, MyEtherWallet, MetaMask</p>"},{question:"testing",answer:"<p>Have been using Truffle more lately but was mostly just using Remix before.</p><p>Write the contracts in Remix, deploy them in Remix. Usually do it all through Remix and MetaMask. Used to connect metamask to a ropsten node run locally, but now metamask is more reliable.</p>"},{question:"smart_contract",answer:"<p>Use the Remix tool to just scan for general bugs.</p><p>Wanted to use Oyente, but don&rsquo;t know how to use it</p><p>Remix is thinking about being modular to the point where you can just plug in your own about module - that would be awesome to see.</p>"},{question:"bounties",answer:"<p>Dev Grants from the Foundation</p><p>Ethereum foundation had 2 iterations of this program</p><p>Get some money to build something at the protocol-level</p><p>The foundation is looking into revising the process.</p>"},{question:"missing_tools",answer:"<p>Remix combines an editor with a deployment mechanism and that&rsquo;s what I like about it.</p><p>EthMix was like a full IDE with better syntax highlighting and better debugging. And it was a native app instead of web-based. Pity that it has not been maintained.</p><p>Something that automatically uploads the contract to ENS.</p>"}]},{id:30,name:"Martin Swende",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I was a security professional, doing consulting, came into Ethereum a couple of years ago solving bounties for VMs.</p><p>October 2016 - became Head of Security at The Foundation.</p><p>Monitoring mainnet.</p><p>Being able to react when there is a consensus flaw. Had an API call to geth, called getBadBlocks. Geth will save bad blocks and you can query node for it.</p><p>So, we run geth and parity simultaneously. Ask parity node for last block, ask geth for bad blocks, If they match, can see more easily why and who might have acted badly.</p><p>But can&rsquo;t do it vice versa - been nagging Parity to add that end point so we can do the same process in reverse.</p><p>Geth client has a lot of metrics: how many i/o connections, db writes, block processing times, peer connects. Can export from geth and display in any charting you like. So, that&rsquo;s exactly what we do; get nice graphs about tx churn, how txes were rejected, queued, pooled.</p><p>Optimizations in geth which made block processing faster in the past month. You can also monitor for performance, not just security...</p><p>Shanghai attacks taught us that performance very much related to security.</p><p>P2P network information, protocol dissector / analyzer -- if I can see what is happening on my node and what my peer capabilities are, what have they seen, etc.  Is there any one peer that is sending me transactions that I reject? That way, I can identify bad behaving or lying peers (more in-depth view of what people are telling me over the network)</p><p>Would be difficult as an add-on (need node keys, decrypt data, etc.),  Much simpler to do within a client.  Protocol layer in Geth.</p><p>Build tools for analysis, especially when things are going wrong: hacks, network problems.</p><p>E.g. transaction propagation when network was overloaded with txes going back & forth between parity and Geth.</p><p>Needs for lots of testing around hard forks as the existing tools were not sufficient to cover all cases.</p><p>Coverage guided fuzzing - generate code and run on instrumented version of Geth / Parity. This matches code coverage, generates new code and increases coverage using fuzz tactics to mutate inputs and can test geth and parity differentially. Do they have the exact same stuff in the stack, in memory etc.?</p><p>Another fuzz testing tool based on EVM Lab that can generate tests for CPP ethereum and can cover py-ethereum etc by running in docker container with a switch that enables an output after every opcode and compare internal state differentially again. Run this 24/7.</p><p>Caught 5-6 consensus issues with this. Last hard fork was a controversy as Parity had done a whole bunch of releases prior to the hardfork and the suggestion was to postpone, which would have caused its own issues and forced clients to update again.</p><p>If patched before hard fork - no problem. Beat the drums and tell everyone to upgrade.</p><p>If you find a consensus issue on an existing client it is a bit more problematic.Telling everyone means giving people the chance to exploit it - tough to handle.</p><p>Examples of consensus issues: make a tx which invokes a precompile like verify_signature and if that, in one case returns true and in another returns false, or if they cost different amounts of gas (i.e. x on geth and y on parity) then post-state will be different so they won&rsquo;t accept the same blocks and then we have a fork.</p><p>There was a consensus issue that happened after Spurious Dragon when we implemented state cleaning. Chain split for 200 blocks, which were created on the wrong chain that were then abandoned. Block 2 600 000 or so.</p><p>Developers need to be alerted as soon as possible so they can fix it ASAP. People can lose money in the meantime, txes can be reverted. All exchanges need to be alerted to hold deposits and withdrawals.</p><p>Have built tools to detect this, so we consider it solved from a technical p.o.v.</p><p>Recommend that exchanges run all clients, but not sure if they do. Could be standardised with docker containers that could be more streamlined. Documentation around best practices, automated tooling etc.</p><p>Building something like Ethstats but more detailed. If there is a consensus failure, you might want to see exactly which tx in which block caused it. Nice to see blocks, txes and intermediate root hashes between each tx. Then you can see different post-state hash, i.e. that is where we should start looking.</p><p>Need detailed traces of exactly what happened in every opcode of this transaction.</p><p>One of the things I built in EVM Lab is a reproducer. Synthesises pre-state for that particular tx, then executes it and gives you a detailed trace from geth and parity that you can then compare.</p><p>Not much active development on EVM Lab. Use it mainly for investigating certain condition or opcode or potential attack. Pretty easy to put together desired scenario in an EVM assembly-like way by setting genesis you want and then run & benchmark it.</p><p>It is usable right now and I have no immediate plans to do anything in the near term. Might need some updates and it is not so user friendly.[a]</p><p>One of core devs for go-ethereum.</p><p>We want to expand - have 2 interns now, but had to turn someone away recently too. Send interested developers to Peter.</p><p>Working a lot with the signer, which was just merged in latest release. Standalone binary which can run off some secure enclave, USB armoury, parallel VM, some other machine on your network. Can be used for offline signing and has trusted UI.</p><p>Can be configured with particular rules written i.e. in JS. Definitely needs more work on the UI. has implemented one in python-qt and python-cleft. Can also be run in a console, with remote ports etc so you can decouple pvt keys from your daily computer.</p><p>Hoping MetaMask will integrate with it directly. Has spoken with Dan and another guy called Jordan building a tool called (?) which has integrated it already.</p><p>Hard problem: how to make it more secure for end users. Surf internet with unpatched browsers with 0 days and they get exploited. How can we improve upon that so that you have a sign what you see flow. Submit a tx, see the details of that tx when you approve it.</p><p>Unlock feature is most horrible thing he has seen where it will sign every tx sent to it for a given period.</p><p>I don&rsquo;t do too much DApp development, so I&rsquo;m not up to speed with capabilities of current tools and how they have matured over the last 6-8 months.</p><p>I have heard there is a debugger out now which I remember as being one of the main pain points.</p>"}]},{id:31,name:"Kevin Owocki",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I developed Gitcoin, a bounty (and tips) platform for incentivizing open source contributions.</p><p>Solve incentivisation problem of OSS, where it is highly strategically valuable but difficult to capture in real-time the value being created.</p><p>I want to bring more devs into the space - MAIN GOAL.</p><p>300 bounties fulfilled so far and recruiting opportunities for OSS developers</p><p>Consensys offered customers (projects creating bounties for pilot of gitcoin), funding, regulatory protection</p><p>Not totally interoperable for now with EthPrize, recruiting strategy etc. Bounties are just one of the tools to recruit developers</p>"},{question:"tooling",answer:"<p>Truffle for managing deployments and smart contract versioning</p><p>Web3Py, due to comfort with py and personal relationship</p><p>Django, Bootstrap, Metamask, Infura for Gitcoin Platform - which is mostly a standard web interface.</p>"},{question:"testing",answer:"<p>Pytests with TravisCi</p><p>Using product. Use gitcoin to build gitcoin.</p><p>Selenium tests with native web3 functionality</p>"},{question:"bounties",answer:"<p>Gitcoin X EthPrize</p><p>More talent than fundable issues right now at Gitcoin - always looking for more cool stuff for the community to work on.</p><p>Happy to help.</p>"}]},{id:32,name:"Quazia & RJ",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Giveth - Charity platform with three layers</p><p>Fairly complex contracts on-chain. Pushes the limits of gas limit. Making transactions is relatively expensive.</p><p>Off-chain stuff. We cache everything; we store images and profiles offchain, will eventually be on IPFS.</p><p>Some actions are not on-chain: &ldquo;reviewing a milestone&rdquo;.</p>"},{question:"tooling",answer:"<p>Remix vs. your local dev environment:</p><p>Can write code, deploy, and debug in Remix.</p><p>EVM Lab: written by Martin Swende; give it a tx hash; spits out opcodes, storage, memory.</p><p>RJ wrote source code mapping &ndash; doesn&rsquo;t work for complex contracts. Show your contract code along with the opcodes.</p><p>We use it often. Simple CLI tools. Just need Web3 and a tx hash. Sounds AMAZING.</p><p>To be improved: bugs with reproducing certain transactions.</p><p>E.g. couldn&rsquo;t recreate contract creations.</p><p>Source mappings.</p>"},{question:"testing",answer:"<p>Offchain stuff is not dispute related.</p><p>Gas limit issues:</p><p>Jordi wrote contracts to begin with &ndash; so WE had a good start.</p><p>Multiple DELEGATE calls to the same contract are the same price each time; but this doesn&rsquo;t make sense. You&rsquo;ve already loaded the contract in memory, so should be cheaper in consequent calls.</p><p>Abstracting &ndash; one key-value contract that stores pointers to data.</p><p>Rest of data &ndash; stores all data. Mappings of hashes to boolean to structs / addresses / etc.</p><p>Leads to upgradability of contracts. To the parameters used in the logic.</p><p>Separate data from the application; let&rsquo;s you iterate. The data contract is owned by the business logic, ETC.</p><p>Estimating gas / optimizing code:</p><p>To get gas limit: run it on testrpc. Easy.</p><p>Debugging is hard, after you start adding assembly in there.</p><p>Remix is hard for large contracts. Multiple contracts.</p><p>Testing flow:</p><p>We use Mocha + wrappers to generate contracts in Js.</p><p>Needed: better errors. e.g. if testrpc spit out more useful messages.</p><p>Deployment & CI:</p><p>We have Node scripts to do this. Async await. Pretty simple contract.</p><p>Jordi&rsquo;s tool compiles everything into a single file; makes verification on Etherscan simpler.</p>"},{question:"bounties",answer:"<p>A solid debugger &ndash; needs a rare breed of dev to build.</p><p>Scaffolding tool for prototyping things &ndash;</p><p>To test a small contract before integrating with everything else.</p><p>Think this will standardize over time.</p>"}]},{id:33,name:"Griff Green",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>3-tiered approach:</p><p>Blockchain smart contracts: liquid pledging; pledges that take control of authority and funds. Blockchain layer does the accounting.</p><p>Owner gets notified by email.</p><p>Bounty system: basically a chat room. Project discovery layer.</p><p>UI layer: reads off the blockchain, interacts with the blockchain.</p>"},{question:"tooling",answer:"<p>Use Feathers interface to do caching. Improves UX.</p><p>NPM. Etherscan. Metamask.</p><p>Set of tools that we made ourselves. We don&rsquo;t use truffle because we were building smart contracts before truffle was a thing.</p><p>React. Remix.</p>"},{question:"testing",answer:"<p>We lean on the community a lot and give them &ldquo;sneak previews&rdquo;. We let them to go through the UX, and watch what happens.</p><p>The same person does all the testing.</p><p>We do a lot of auditing for other projects. Audria does this. We have a lot of good auditors and always maintain 100% code coverage.</p><p>Use travis for CI.</p><p>Most bugs they see are about game theory & cryptoeconomics.</p><p>These come up in ad-hoc situations.</p><p>We try to isolate things into individuals. Clear interfaces.</p><p>We always wanted push to live mainnet right away, but...</p><p>Today we made the decision to go to testnet, because mainnet is so expensive.</p><p>Testnet is not real a test (since it&rsquo;s not real money).</p><p>We&rsquo;re going to have a testnet token that represents real Ether.</p><p>&ldquo;Proof of Authority&rdquo; using Rinkeby.</p><p>Using the Minime token controller. Multisig pays out based on what&rsquo;s happening on testnet.</p><p>Ehter&rsquo;s price has gone up, gas is high, so everything is super expensive.</p><p>BAD for our users.</p><p>This is game over for dApp developers.</p><p>If Ethereum cannot solve these issues, developers will leave.</p><p>RSA, Ubiq will have Solidity. But don&rsquo;t have block explorers. White hat hacker group is looking into</p><p>Open-source Etherscan.</p>"},{question:"bounties",answer:"<p>Scaling proof-of-authority.</p><p>Block explorer.</p><p>Ropsten testnet gas limit -> attacking with gas limit.</p><p>Open-ended: apply for a bounty with your own idea.</p><p>We need a 24/7 security team. The network is not being watched by anyone; because right now the network is being attacked in a weird way, through the estimate gas function and throwing txs in pools.</p>"}]},{id:34,name:"Jordi Baylina",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Experience: 35 years of programming; 3 years in blockchains.</p><p>Learning more everyday; exciting from a global perspective.</p><p>This tech can change society over time. We&rsquo;ll see centralised power disappear, the world will become more trustless, people will take responsibility for themselves.</p><p>One of my first smart contracts was liquid democracy for the DAO.</p><p>Smart contracts for the white-hat group that originated from the DAO.</p><p>Wrote the Minime contract &ndash; maybe not the best time now because of gas costs, but it is an interesting smart contract.</p><p>Did the Status ICO.</p><p>Liquid pledging for Giveth.</p><p>Pushing DappNode - should be released soon and is really important for true decentralization.</p><p>Audits &ndash; for MakerDao and Aragon.</p><p>777 standard.</p><p>Working a lot on an identity project.</p>"},{question:"smart_contract",answer:"<p>It&rsquo;s important to communicate to everyone that whatever you do will help, but will never give a warranty that there won&rsquo;t be an error.</p><p>I&rsquo;m a bit skeptical of formal verification stuff, but I think it&rsquo;s important to keep pushing it forward.</p><p>Do more audits.</p><p>Write defensive code. Don&rsquo;t try to do crazy things.</p><p>For the first time, we&rsquo;re mixing two things that haven&rsquo;t been mixed together:</p><p>The two:</p><p>Critical code &ndash; contracts holds money.</p><p>Open-source &ndash; everyone can see how it works.</p><p>E.g. you don&rsquo;t have this in planes &ndash; critical program but not open-source.</p><p>E.g. in a website &ndash; it could be open-source but not critical.</p><p>So you realize you need to write perfect code, but that&rsquo;s not possible. Because code is written by humans.</p><p>It&rsquo;s important to improve:</p><p>Do not take risks.</p><p>Try to isolate the critical part. E.g. if you&rsquo;re doing an ICO, don&rsquo;t hold the ETH in the contract, instead put it directly into the multisig.</p><p>Minimize the box, with its known security vectors.</p><p>On one side, you have a blockchain that by definition that is immutable. On the other side, immutable is not compatible with making mistakes.</p><p>Humans make mistakes. We are building things on top of that immutable base that could have mistakes.</p><p>But we need to keep blockchains immutable, because if don&rsquo;t, we lose their power.</p><p>How do we solve this?</p><p>Possible approach is having a second layer &ndash;&ndash; instead of ETH, we use an ETHToken. ETHToken has governance built in and can be modified. You build it in a more centralized manner, it can be changed; and then overtime, you soften the centralization rules, and make it decentralized (take away the authority, make it operated by a DAO, etc).</p><p>E.g. having an escape hatch would be super helpful. If there is a hack, it could be sent to the EF or whitehat group. And then you can decide what to do. Better than it going directly to a hacker.</p><p>And then you can build the smart contract applications on this second layer.</p><p>Want to make decentralization linear; so you don&rsquo;t have to take the risks from the beginning.</p><p>All contracts in Giveth have escape hatches built in.</p><p>STANDARD LIBRARY for using ETHToken in your contract, layer for security, escape hatches => I think it might be a bit too early though since we&rsquo;re still figuring it all out. Other teams working on this include Zeppelin, Aragon.</p><p>Better compilers. Better testers. Better formal verification. All the tooling helps.</p><p>There are some errors that are not due to programming &ndash; they&rsquo;re conceptual, due to economics, etc.</p>"}]},{id:35,name:"Stefan George",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>CTO of Gnosis and is building a prediction market, ddex and smart contract wallets.</p><p>Started in 2013 - discovered that we could add prediction markets using btc escrow because that was missing (a p2p marketplace for predictions).</p><p>Joe Lubin convinced us in 2015 to start a formal platform based on Ethereum, did the token launch and spun out of Consensus and begin working on the more fundamental problems</p><p>Decentralized exchanges!! But not efficient on Ethereum today (scalability and number of participants). We have had to contribute to building the DDEX infrastructure.</p><p>Prediction markets are a way to create new ERC20 tokens (conditional payment/purchase). The value of those tokens is only defined at a certain point in the future. We can therefore create derivatives of other ERC20 tokens, which are more precise investments under certain conditions.</p><p>DDEX allows people to trade the efficiently. It can be done in Ethereum on chain, but scalability, front-running and ease of use just isn&rsquo;t there yet (need everyone participating and having a global liquidity pool).</p><p>Dutch exchange implemented on chain to solve front running problems.</p><p>Integrating with USD price feed of Maker - was a little hard to depend on other people&rsquo;s infrastructure and therefore the tests that they have deployed. We ended up mocking their service for test net, would have been awesome to just point at their package, specify a contract on either network and go without having to mock any of the other services.</p><p>Make sure that things like ETHPM are deployed across all test networks.</p><p>Also built the multisig wallet for our own token launch, has been very successful and we now want to offer the same experience for every user: more secure wallets for personal use that are even better than hardware wallets.</p>"},{question:"bounties",answer:"<p>Bounties are great for small problems, but we need to hire people full time to actually work on this stuff constantly and fix the long term incentives!!</p><p>Just waiting for the Ethereum Query Language ;) :p</p>"}]},{id:36,name:"Alex Leverington",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Can&rsquo;t say what I&rsquo;ve working on in a concrete way, but I am building a team and starting a new project.</p><p>I&rsquo;m advising some projects.</p><p>Did some original stuff on the P2P system.</p>"},{question:"testing",answer:"<p>Haven&rsquo;t come across any tools for game-theoretical stuff.</p><p>For code: using scripts for testing.</p><p>Ideally there would be a testing env that can do &ldquo;introspection&rdquo; & which can evaluate the state of the memory. It should test the effect of code rather than the output of the code and make sure that the tests all integrate with Solidity.</p><p>It&rsquo;s really hard to write unit test for the EVM state, as a result of some code executing. It would be good to have a test for this[a].</p><p>Will be looking at tools in the next two weeks.</p><p>Having a tool which exposes the EVM state &ndash; for this you need some code that understands how Solidity stores data in the EVM.</p><p>For looking at EVM state:</p><p>Remix is ok.</p><p>Aleph0?! Doesn&rsquo;t exist any more.</p><p>Some cases where your code doesn&rsquo;t change, but the environment around your code changes &ndash;&ndash; having actual tests.</p>"},{question:"smart_contract",answer:"<p>It would be nice if some of the audits were completely opened up &ndash; rather than some statement from the auditors. Could be a security issue.</p><p>What we have right now for audits can be improved upon with better tools.</p><p>Audits and testing framework go hand in hand.</p><p>Auditor should be able to write a test to demonstrate the problem at the EVM level.</p><p>Instead of the auditor suggesting some workaround or wrapper.</p><p>Or auditor provides proof for something that works well.</p>"}]},{id:37,name:"Alex Miller",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Started ETH development back in 2015. Shortly after launch; there was nothing. I remember booting up private chains from shell scripts. We&rsquo;ve come a long way in terms of dev tools. Problem isn&rsquo;t that there aren&rsquo;t tools, but not knowing where to look.</p><p>The problem here is sourcing a centralized repository for information[a][b].</p><p>EF website doesn&rsquo;t do that.</p><p>Wouldn&rsquo;t know where to point people from intro documentation.</p><p>Truffle & Solidity have good docs e.g.</p>"},{question:"tooling",answer:"<p>Truffle</p><p>Configure parity instance https://github.com/GridPlus/trustless-relay/blob/master/parity/boot.js</p><p>Infrastructure tool to spin up local instances of Parity or Geth</p>"},{question:"testing",answer:"<p>Use Mocha; plain old truffle tests.</p><p>I don&rsquo;t do contract unit tests.</p>"},{question:"smart_contract",answer:"<p>Hasn&rsquo;t had any novel code that needed security audits before</p><p>There are common patterns that could be detected. E.g. reentrancy attacks, etc</p>"},{question:"bounties",answer:"<p>Collecting logs & events used to be hard. Web3 1.0 made this a lot easier. It is quite good, even-though it&rsquo;s in beta.</p><p>People should be using websocket calls more. Maybe more education around this. Serious efficiency gains to be had here.</p>"}]},{id:38,name:"Dave Appleton",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Lead blockchain dev @ HelloGold.</p><p>Token backed by gold.</p><p>Does consulting as well &ndash; writing smart contracts & backend for blockchain projects</p>"},{question:"smart_contract",answer:"<p>Helps that I&rsquo;ve been coding for a helluva long time.</p><p>The hardest thing for new devs is getting to contact the people they need.</p><p>It&rsquo;s also hard to find non-expensive auditors.</p><p>Gitter community is the key</p><p>Best dev communities or Gitter channels:</p><p>Go-ethereum</p><p>Solidity</p><p>Parity</p><p>I go to the specific one I need at the time.</p>"}]},{id:39,name:"Peter Kieltyka",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Started Horizon Blockchain games, building decentralized multiplayer games. What we&rsquo;re excited about is a new class of video games, in which players truly own in game items. Own them, and can trade them. They can even compete cryptographically to earn/unlock new items.</p><p>One of the core areas of work that is started immediately: how can we make high fidelity games that are scalable, low-cost, and provably fair. Video games with a decentralized economy. Can mine new items as part of the economy.</p><p>Love building new models on blockchain. What is most excited to do is to create utility through video games via blockchain.</p>"},{question:"tooling",answer:"<p>We&rsquo;ve built a blockchain gaming architecture with a low fungibility token, similar to ERC 721. We built our own state channels. We&rsquo;ve also created offchain game logic, and can verify the game in a single state. Skyweaver.net was our very first game. All work will be open source, won&rsquo;t do an ICO.</p><p>Game is offchain, persist the awards on chain. Based on a finite state design.</p><p>Use Truffle, Ganache-cli, write the infrastructure in Go. Geth is written in Go, that&rsquo;s very nice.</p><p>Client side application, standardize on Ethers.js (Richard Moore). Without Metamask you lack adoption. Ethers.js is being ported to Typescript, excited about that!</p><p>Web3.js has a lot of dependencies, large in filesize, and the API is not as compelling as Ethers or productive. Just too bloaty. Was great that it exists, but want very very lean tools. Ethers is just so active and very tight. Following newest standards and practices. Back the guy with the deepest knowledge.</p><p>Truffle is really cool. Helps with Developer workflow, but we spin up own testRPC service with Ganache. Truffle helps with deployment of contracts as well as package management. Truffle is now a monorepo, I pushed them to become a monorepo.</p>"},{question:"testing",answer:"<p>Do it in Typescript with Ethers.js and Chai and Mocha. Use Remix Solidity IDE. Amazing IDE for testing little blocks of code. Testing would be another great things to see more examples of Ethers.js</p>"},{question:"smart_contract",answer:"<p>Obviously security audits, looking through network and past experienced colleagues. Don&rsquo;t see us using formal verification unless that process is made easy, but I don&rsquo;t think that will happen. We will stick to security audits. Thoughtful in how things fit together and are secure.</p>"},{question:"bounties",answer:"<p>Gas profiler 100%.</p><p>Would love to see an Ethereum Virtual Machine written in JavaScript. The Ethereum JS VM written but it&rsquo;s a little bit bulky. Important to offchain application, important for state channel applications. Richard Moore is writing this.</p>"},{question:"missing_tools",answer:"<p>Profiler at ETHDenver, to see gas costs.</p><p>eWasm will be game changing. Potential for having other languages target the EVM will create a more productive developer experience.</p><p>Vyper will be great. Their goals are twofold, improved security through usage of the language. Learning from Solidity. Security + productivity.</p><p>Really happy with seeing progression of Solidity. As cool as ewasm is, who knows when it will be ready.</p>"}]},{id:40,name:"James Prestwich",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Simple contracts to manage cross-chain swaps and contracts.</p>"},{question:"tooling",answer:"<p>Python ETH Library - ABI Parsing expects events to be in two different formats neither of which you expect - ecosystem standardizes on hex strings</p><p>RLP is a hot mess - why use a non-standard serialization format for everything</p><p>Ensures nobody understands what&rsquo;s going on and things aren&rsquo;t readable - serialization format for everything ETH - includes transaction data</p><p>As a human - can&rsquo;t reason very well about those blobs or what those structures will have</p><p>Developing contracts on Bitcoin first - Solidity, Script, Snark tidbits, IVY (compiles to bitcoin script)</p>"},{question:"testing",answer:"<p>Wrote tests with James on Integral stuff</p>"}]},{id:41,name:"João Gabriel Carvalho",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Contributed to OpenZeppelin and Aragon about 1.5 years ago, met an audit company called Solidify. Worked with them as a developer, and also have done a lot of audits securing smart contracts, now back to development. Things happening that will be public soon, stay tuned!</p>"},{question:"tooling",answer:"<p>Truffle.</p><p>Used a little bit of Embark but not a ton.</p><p>Use Mythril, Remix, TestRPC -> Ganache, Geth, also used a few Solidity flatteners.</p><p>Infura.</p><p>Web3.js.</p>"},{question:"testing",answer:"<p>Do it manually, 1000 accounts with 1000 Ether. A big loop and keep sending transactions</p><p>Do this multiple times with multiple states. A lot of handwork for not a lot of results.</p><p>Large scale testing is not really worth it.</p><p>Was testing an interactive ICO, very complicated process. State management was very hard, multiple states at same time. Made a loop to do it manually but was quite difficult.</p>"},{question:"smart_contract",answer:"<p>Every project I&rsquo;ve done will go through an external audit. As a developer, usually run Mythril and Remix (uses Oyente?). But these only find basic bugs, are years away from more complex stuff. These are just the most basic checks.</p><p>For Auditing, use a lot of Remix with manual testing as opposed to JavaScript tests. This is easier and less fake.</p><p>The harder thing is flattening files. People use OpenZeppelin, other frameworks. Have to go through a lot of different files to understand the logic. Tool to make understanding this easier.</p>"},{question:"bounties",answer:"<p>A really good IDE.Not a plug-in, but a full IDE. Best elements of Truffle, best elements of Remix. Could connect to Geth. More refined deployment options. Make compiling easy, knowing the gas prices easier. Debugging, deploying. Everything in one place.</p>"},{question:"missing_tools",answer:"<p>Love to see a premium version of Infura. Infura is public nodes. Has to sign tx&rsquo;s offline, has to sync my own Geth. I wans to have an Infura account. Infura is pretty good here but could be a bit better.</p><p>Lacking resources for other languages other than Solidity. Doing anything with any other language, there is not enough material and you can&rsquo;t find the answers. Creating a gigantic gap between Solidity and other languages. Usually use Solidity because it&rsquo;s way faster.</p>"}]},{id:42,name:"Andreas Wallendahl",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Kauri</p><p>Decentralized knowledge base built on Ethereum and IPFS</p><p>Github is for code, Kauri is for how to use it. Built in incentivization layer enabled by Ethereum, enables bounties for new content. No token, uses Ether/ERC-20 token.</p><p>Most popular tutorial is new content from Maker.</p>"},{question:"tooling",answer:"<p>Truffle</p><p>Geth nodes on Google Cloud</p><p>Eth.js</p><p>React</p>"},{question:"testing",answer:"<p>Needs to ask teammate (Josh Cassidy)</p>"},{question:"smart_contract",answer:"<p>Also Josh Cassidy</p>"},{question:"bounties",answer:"<p>In-browser signing. Would make new user onboarding much, much easier. Metamask works on it but a bounty might drive it through.</p><p>A lot of people have built interaction with IPFS, that&rsquo;s why we built IPFS-store and eventium.</p><p>Blockchaimulator for testing that runs through 100,000 blocks, somewhat instantly. We had to wait for blocks to be produced.</p>"},{question:"missing_tools",answer:"<p>Simple spin up of side-chain or scaling solution kind of like Heroku</p><p>Spankcard for counterfactual state channels is a good attempt at this</p><p>Omisego and Plasma team</p><p>Rapidly spin up and set criteria for Plasma chain</p><p>Gas costs</p><p>In web signing capability- I could preload Eth or fund with credit card. But, if users are used to this behavior there might be man in the middle attacks.</p>"}]},{id:43,name:"Clement Lesaege and Nico Wagner",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Working on dispute resolution through smart contracts</p><p>Arbitration - process to decide who is right/wrong. Looks more like an arbitration DAO - system of incentives.</p><p>Enforcement</p><p>Decision-making</p><p>Incentivising people</p>"},{question:"tooling",answer:"<p>Smart contracts - Remix</p><p>Being able to copy address directly is really cool now.</p><p>Stopped using remix core because writing tests in truffle is actually quicker than clicking everywhere through the `remix IDE.</p><p>Solidity - can&rsquo;t do operations in bytes. Want to split bytecode into address and integer and there is no easy way to do that. Could write some assembly (difficult to understand) or some hacky workaround that uses a lot of gas.</p><p>Byte manipulation is really needed in Solidity.</p><p>Add a solidity linter to Remix (already exists in Atom at least, but would be nice for having a properly integrated environment).</p><p>We really need a light client to use a DApp on a smartphone.</p><p>Truffle to run tests</p><p>Relying on other random libraries sometimes breaks things. If you use a library for tests that is not being used by your contract. I.e. it is very difficult to customise tests in truffle and you have to know some (undocumented) tricks in order to get around some basic stuff.</p><p>Better testing is required, more extensible and adaptable. We don&rsquo;t need over-engineer things, but a better debugger and a properly integrated environment is necessary.</p><p>Truffle doesn&rsquo;t work with latest solc - keeping all the tools in sync and up to date is a tough task and it delays and blocks developers from using the latest tools if they have not yet been supported across the ecosystem.</p><p>No warnings for deprecation!!</p><p>Frontend - ethers.js to communicate due to instability of web3. React, redux and redux-saga. Architecture with an API that is used to share methods needed to use Kleros easily.</p><p>Ethers.js is not well-known and it would be better to standardise things and have a  common library for everyone to use.</p><p>Main issue with web3 lies in callbacks. They don&rsquo;t use promises because the 1.0 version does not support them well.</p>"},{question:"smart_contract",answer:"<p>Write our own functional tests - but don&rsquo;t provide proper security against malicious actor (can&rsquo;t simulate those kind of network conditions easily). This is where fuzzing would be really, really useful. Try to understand how contracts could be exploited in ways that the developers can&rsquo;t directly specify in tests.</p>"},{question:"missing_tools",answer:"<p>A tool to analyse security of smart contracts better, especially complex smart contract suites. Very excited to see formal verification, whenever that comes out.</p><p>Fuzz testing is super important!!</p><p>Great to use truffle boxes, but all of them are unstable and not well maintained. Would be great to see more effort put in there.</p><p>Trying to implement chain-view: a tool to share the workflow of the ethereum protocol with the clients. Mostly used to analyse transactions (i.e whether they are successfully included in a  block) Can be very useful for client-side devs and i.t.o providing end users with transparency.</p><p>Not open source currently.</p>"}]},{id:44,name:"Dan Tsui",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>LLC that does consulting and builds projects</p><p>Their first crypto client was Metamask.</p><p>Other examples: build UI on top of the smart contracts; how to integrate with scaling solutions.</p><p>Working with state channels on wallet. Should be live on 1st or 2nd week of April</p><p>First: &ldquo;productionizing&rdquo; their library for micro payments.</p><p>Got into this space contributing to the EthereumJS ecosystem.</p><p>Within the team, I function as PM and do code reviews.</p>"}]},{id:45,name:"Jacky & Matthew",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Matthew:</p><p>Cofounder of Kyokan, CTO</p><p>Client work</p><p>Plasma and Plasma Chain.</p><p>State channels work with Spankchain.</p><p>Infrastructural work + Solidity.</p><p>Jacky:</p><p>Cofounder of Kyokan</p><p>Building / integrating with Ethereum wallets</p><p>Solidity</p>"},{question:"tooling",answer:"<p>Matthew:</p><p>Working on plasma and writing it in Go. Focussed on interoperability between Geth and smart contracts.</p><p>My development style:</p><p>I really like Java. &ndash; enterprise-y tools make me productive.</p><p>IDE could be really improved.</p><p>I use IntelliJ&rsquo;s Solidity plugin to edit Solidity.</p><p>&ldquo;Jump-to-def&rdquo;; &ldquo;jump-to-implementation&rdquo;; syntax highlighting</p><p>Big difference in productivity.</p><p>E.g. when I&rsquo;m writing Go code, I can jump to the Geth definition. This is amazing.</p><p>I&rsquo;m switching between Solidity / Go, or Solidity / Javascript</p><p>Solidity Javascript bindings through Truffle are good.</p><p>Integrating libraries designed for cryptocurrencies with front-end apps is hard:</p><p>Bundle sizing: different behavior if you&rsquo;re running in the browser or in the backend.</p><p>E.g. if you compile a contract with truffle, you get a JSON file &ndash; which has the bytecode and all this stuff beyond the ABI.</p><p>This is heavy and unused.</p><p>Crypto.js has unnecessary dependencies:</p><p>Eth.js includes an ASN.1 parser which parses digital certificates &ndash;&ndash; which isn&rsquo;t needed for any crypto.js uses.</p><p>Google Chrome places a size limit (3 MB) on service workers in Incognito mode.</p><p>Bundle sizing is important &ndash; need to take out dependencies.</p><p>Standardize the interfaces for all these libraries.</p><p>E.g. a standardize library to read BIP39 seed words &ndash; across different programming languages.</p><p>Is there a Javascript API to boot a testnet, deploy contracts, and run tests against it?</p><p>For running application tests &ndash;</p><p>I want integration tests that run against Truffle easily</p><p>Having the ability to do this via Javascript is important</p><p>E.g. automate this: https://github.com/machinomy/machinomy/blob/master/run_integration_tests.sh</p><p>People don&rsquo;t know how to productionize a geth node:</p><p>On Ubuntu: you can &lsquo;apt-get install geth&rsquo;</p><p>Now, how do you secure it, monitor it, etc?</p><p>People say: &ldquo;just use Infura&rdquo; &ndash; but then you&rsquo;re tied to Infura.</p><p>Some ideas:</p><p>Docker instances; Chef or Ansible scripts; that setup a Geth node which has a bunch of best practices around it.</p><p>As an example:</p><p>Your RPC port shouldn&rsquo;t be open to the external world, but should be accessible to the front-end.</p><p>You need a layer sitting between the geth node and the external world, and gives: 1) analytics, 2) authentication, and 3) audit logging.</p><p>The dashboard could configure geth on the fly.</p><p>How do you secure a geth node with an RPC port:</p><p>Need only certain keys to be allowed to interact with it</p><p>Jacky:</p><p>Integrating Metamask with Dapps</p><p>Building a new wallet for Spank;</p><p>It&rsquo;s a service worker</p><p>Three threads running at once:</p><p>Runs a bunch of background processes</p><p>The Wallet</p><p>The Dapp itself</p><p>The messaging between these three threads sucks.</p><p>Cross-window JSON RPC library.</p><p>Wallets are pushing the limits of what Chrome is capable of.</p><p>They&rsquo;ve had to file two bugs with Chrome in the last month.</p><p>Runs into the service worker size limit.</p><p>Mostly Javascript and Web3 work</p><p>Lot of code repetition in loading state and confirming transactions</p><p>Web3 is kinda hard to use &ndash; large ABIs</p><p>Biggest problem has been around event management.</p><p>Key management is not that complicated &ndash; Web3 has a good handle on it.</p><p>The Web 3 interaction with the wallet:</p><p>Web3 provider talks to the blockchain &ndash;</p><p>Spank and Metamask &ndash; the provider is an instance of the ZeroClientProvider &ndash; written by the Metamask team</p><p>The ZeroClient makes all calls when there&rsquo;s no key needed. When a key is needed, it calls into your codebase.</p><p>Biggest problem is around the communication of gas costs.</p><p>The UX around this.</p><p>Users pick really high or low gas costs.</p><p>There are better ways to estimate gas.</p><p>Would be nice: currency conversion utility tools.</p><p>Existing tools are pretty buggy.</p><p>ETH has many different units.</p><p>Units conversion.</p><p>Matthew:</p><p>I write all my own methods &ndash; other than lowdash where I pull specific utils out.</p><p>React / Redux.</p><p>Need a way of shoving Web3 stuff into your Redux state.</p><p>Managing the lock state of your wallet</p><p>E.g. you need the lock-state of the wallet, because the UI changes.</p><p>They written a util that queries the wallet, gets it&rsquo;s lock-state, and puts it into the Redux state.</p><p>Authentication: people have public/private keypair; use this data as login.</p><p>Having a canonical way to npm install and have authentication build off of Metamask.</p><p>Nice to haves:</p><p>Typescript typing for crypto libraries.</p><p>Postgres types to manage Ethereum stuff &ndash;&ndash; addresses, wei,</p><p>Have these methods: .toFinney</p>"}]},{id:46,name:"ANDREY PETROV",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>https://thousandetherhomepage.com/</p>"},{question:"tooling",answer:"<p>Truffle - not his favourite, but best thing out there right now</p><p>Vim for everything</p><p>Etherscan a lot</p><p>Remix IDE - trying this out sometimes, but also my own editor</p><p>Truffle</p><p>Also my own runner, written in go.</p>"},{question:"smart_contract",answer:"<p>Write a lot of tests myself. Get other people to read it. Keep it as simple as I humanly can.</p>"},{question:"missing_tools",answer:"<p>Things I want improved with truffle: it has a lot of moving pieces. Reliant on the nodejs ecosystem and all that. Would like to see a binary runner - want to be able to have a binary, give it some solidity, and it knows how to run it in a simulated environment. Really useful for deploying continuous integration and stuff.</p>"}]},{id:47,name:"Liam Horne",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Co-founder of L4 and Counterfactual.</p><p>Two main things:</p><p>Leading the development of counterfactual: a generalised state channels framework and protocol. It&rsquo;s a simple, intuitive framework for developing DApps using state channels - so we do a lot of work on Solidity code and general work around EVM interactions.</p><p>Co-founders of ETHGlobal - so I spend a bunch of time talking to hackers and making sure that these events represent genuine progress and that people aren&rsquo;t just stuck on bugs. The output to time ratio needs to be as high possible.</p>"},{question:"tooling",answer:"<p>Truffle suite.</p><p>Highest level comment: nice for specific use cases, but our use case does not match this. It&rsquo;s built for writing a bunch of contracts, deploying them and interacting.</p><p>Our whole framework is based around off-chain interactions, for which Truffle is not well suited.</p><p>The whole Truffle networks thing is kind of annoying. If you want to ship a simple build that you put in your browser and run, it doesn&rsquo;t work locally. You need to set up your own test environment.</p><p>Would be great to have a tool that could put together a super minified version of your ganache DB so that we could test across the same data.</p><p>We did some of this, but it&rsquo;s not well known and not the default across the ecosystem.</p><p>Use ethers.js a lot</p><p>ABI encoder v2</p><p>Not supported by truffle.</p><p>Ganache</p><p>Can be very unreliable for a lot of important things.</p><p>E.g. bug in ecrecover on bytes (even if signed correctly) it will not return the correct address, It is just not implemented correctly, so we had to port over to Parity.</p><p>However, the parity dev client doesn&rsquo;t throw errors on revert, it just logs them, and there is no option to change this.</p><p>The fact that the behaviours are different between these two things is concerning and frustrating.</p><p>Parity and Geth</p><p>I don&rsquo;t understand why there isn&rsquo;t just one-click Ganache replacement. If I just went to parity.heroku.app with a big button to launch an instance, that&rsquo;d be awesome. Seems like low hanging fruit that could really be quite easily worked on.</p><p>Getting around all the configuration details is such a headache.</p><p>I just want to launch testnets, and even do so locally in a way that actually works in practice.</p><p>Anything to do with solidity at all really.</p><p>Libraries and tools</p><p>Remix</p><p>Playing with rust for its ability to write once, run everywhere.</p><p>Tonne of JS tools to quickly iterate</p><p>Typescript  - state channels need to run in the client, you want to be able to have code client side to decide what to sign and whether it is safe, and this is easiest in typescript. Would be better in WASM, but it&rsquo;s not there yet.</p>"},{question:"missing_tools",answer:"<p>WASM is likely most useful for us medium term.</p><p>State channels are very light in terms of the actual contract code. But the off-chain contract code is a lot more complicated. It would be nice if all of the things we&rsquo;re doing were easily runnable in the browser.</p><p>We have this concept of a module, which is some software that wraps a particular state channel application. We need code running in the client that determines whether or not it is safe to sign the next transaction, and where you store it, if you show it to the user at all etc.</p><p>We then have to implement a copy of what the contract does in JS and it would be way nicer if we just had a local environment to run some eWASM code because then we wouldn&rsquo;t need to worry about the node at all. We wanna have it work in any random browser and WASm enables that.</p><p>Plasma and state channels require stripped and straight forward teams to work on this stuff that can build out all the tools we need.</p><p>Truebit is exciting.</p>"}]},{id:48,name:"RICHARD MOORE",matchedIndex:-1,interview:[{question:"tooling",answer:"<p>I use all my own stuff, mainly</p><p>Ethers.js</p><p>ethers.cli</p><p>Ethers.build</p><p>Parity</p><p>Node.js</p>"},{question:"testing",answer:"<p>Automated testing? How do the facilitate manual testing?</p><p>Ethers.build</p><p>Automated</p><p>Also facilitates manual testing</p><p>Rudimentary debugging</p>"},{question:"smart_contract",answer:"<p>Extensive testing!</p><p>Using ethers.build etc. code audits are usually from Yuet.</p><p>Usually just have someone else look it over.</p><p>More careful with blockchain-things esp once my money is in there.</p>"},{question:"missing_tools",answer:"<p>Events!!</p><p>There&rsquo;s definitely missing features of what ethereum actually stores in its DB.</p><p>I would love if infura enabled the trace API, which is hugely expensive, that&rsquo;s probably why they haven&rsquo;t, but for now there is no way to give it an address and find all the transaction (or even a transaction) from that address.</p><p>Would be great if you could just tell me the first tx hash that a given address ever made. Obviously this vastly increases cost of an ethereum node to run, but would be useful.</p><p>Events are just wildly unreliable. This is why ENS stores things on chain. Events don&rsquo;t work well enough to do what you need to do. If I need to look this up, I can&rsquo;t.</p><p>The main reason is if you indexed all that stuff all the time, it would constitute a huge load. So most people aren&rsquo;t doing that. Scarce details of how they aren&rsquo;t is the problem...</p><p>[Greg is working on something that will do this]</p>"}]},{id:49,name:"James Childs-Maidment",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Been building social apps on Ethereum. Leeroy.</p><p>Storing all posts and likes on-chain, syncing that with a centralized database and frontend.</p><p>I started with some little smart contract that saved a string to variable.</p><p>After that, just dove in on making Leroy over the next few months.</p><p>After getting a feel for solidity by playing with Remix.</p><p>Didn&rsquo;t really understand how expensive it would be to save everything on the blockchain. Solution was to store the hash of all the inputs.</p><p>From there, had to learn how to make things as cheap as possible.</p><p>Quite a bit of smart contract work on Leroy. Multiple versions of the contract along the way.</p><p>Because it&rsquo;s as cheap as possible, Leroy doesn&rsquo;t even fire events.</p>"},{question:"tooling",answer:"<p>React / Redux app, with a firebase backend</p><p>Truffle. Just deployed using Remix, and uses it for playing with the contracts in general.</p><p>If not already mentioned, are there any libraries you rely on regularly?</p><p>Web3JS</p><p>In a toy project, used MetaMask just for signing transactions. Had a separate web3 using Infura for other stuff.</p>"},{question:"testing",answer:"<p>Truffle for testing (JS unit tests).</p><p>Really enjoying writing async await tests with Truffle.</p><p>Automated testing? How do you facilitate manual testing?</p><p>Play with the contracts in Remix. Deploy the contracts to testrpc and then test manually using the UI.</p>"},{question:"smart_contract",answer:"<p>No process, but would love to have it.</p><p>Apart from testing, would be cool to have tools that analyze what you&rsquo;ve written and make sure you&rsquo;re not doing anything dumb.</p><p>Right now, using Remix is helpful for getting warnings and stuff.</p><p>Hasn&rsquo;t used Oyente</p>"},{question:"missing_tools",answer:"<p>When you use Web3 library with Metamask, it&rsquo;s really crappy getting events coming through.</p><p>Maybe will get fixed when moving to websockets with 1.0</p>"}]},{id:50,name:"Yondon Fu",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Previously: working on smart contracts.</p><p>Truffle, testrpc / ganache-cli.</p><p>Expanded our test suite so they could run on multiple clients: could point at testrpc, at geth or Parity on PoA mode.</p><p>Now: Golang for our node.</p><p>Integrating our smart contracts with their node that does video-processing.</p><p>Working with Geth. There&rsquo;s packages for interacting with EVM.</p>"}]},{id:51,name:"Eric",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Been working on Livepeer for 2 years, before this was an entrepreneur. Was interested in Bitcoin in 2015 and saw Ethereum launch in the same summer as Steemit. Those two things got my attention.</p><p>One of the things we found in web2 is that video facilitates transactions. Companies make a lot of money by charging a big premium for this transaction. 30-80%.</p><p>Started to get more familiar with decentralization, wanted to build a video protocol that is cryptonative. Crypto payment by the packet. No payment channel so needed a decentralized video infrastructure.</p>"},{question:"tooling",answer:"<p>Use web3js a lot, we use a lot of peer-to-peer networking in addition. First version of livepeer was a fork of Geth codebase and adding video streaming, since then we have a brand new code base.</p><p>Delegated proof-of-stake system for electing service providers in the network. All built in Solidity, use Truffle for this.</p><p>Use some Trail of Bits for security stuff</p><p>Use IPFS for storage</p><p>Truebit for decentralized computation verification</p><p>Collaborate with Swarm team for video distributions</p><p>The way our tech works is we depend on Ethereum for protocol but our own peer2peer network for delivering video. We create our own network while every node talks to Ethereum, can get complicated.</p>"},{question:"testing",answer:"<p>Do a lot of unit testing. Try to cover as many cases as possible to make sure the code quality is high. There is not a lot of guarantee in terms of testing for security.</p>"},{question:"smart_contract",answer:"<p>Internal security audits. Taking time to do thorough code reviews.</p><p>Trail of Bits did a security audit</p><p>Launch has been great, it&rsquo;s been a month and they&rsquo;ve learned a ton. Bigger and bigger community call, can test economic assumptions on the Mainnet.</p>"},{question:"bounties",answer:"<p>Identity solution. ENS exists but like a great solution that&rsquo;s built on top of ENS doesn&rsquo;t exist yet. Some solution around there is interesting</p><p>Reputation system on addresses. Addresses are participating in all these protocols. The network effect you have, the behavior of the one address in one protocol can predict in others. TrustDavis is an interesting paper on this.</p><p>Truebit is something that a lot of projects hope will exist. They are collaborating with them closely. They already have a prototype that&rsquo;s working and are excited about this</p>"},{question:"missing_tools",answer:"<p>Better Debugger comes to mind. Monitoring systems and alerting systems. Metrics gathering systems. No one has figured a great solution for this.</p><p>Where do all the data live? Can use IPFS but you have run IPFS yourself and the solution doesn&rsquo;t perform well. One big research question is data availability problem. A lot of protocols work because they depend on punishment for bad behavior. But to prove the punishment requires data. For Casper that&rsquo;s fine, but or other protocols that doesn&rsquo;t work. If you rely on off-chain data can make this data unavailable for an attack vector.</p><p>Transaction Attestation Platform (TAP). Different interfaces on a smart contract. How can people trust that the smart contract underneath is the thing that they&rsquo;re thinking about. Kind of anti-phishing. Give a reputation to a smart contract. Show this to a user in a standardized way. It is a decentralized platform that users can use to attest to the trustworthiness of smart contract functions that other users will have to invoke in order to interact with DApps. http://dappbench.com</p>"}]},{id:52,name:"James Duffy",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Hybrid online marketing + developer</p><p>Invested in Bitcoin since 2013, huge fan of the philosophy of crypto. I forgot about it during the 3-year bear market, then interest resurged in 2017 when I discovered Ethereum</p><p>My co-founder Luke was working as lead developer at crypto company called Block Mason</p><p>I wanted to build new project because I was running into scalability issues on Ethereum. Matt was running into same issues -- things were too expensive and some really bad UI in general.</p><p>The project evolved a lot: the initial idea was called ETHDeploy. We were giving people a way to spin up EVM-based side chains on private test networks for demo&rsquo;ing and user trials.</p><p>Digital Ocean style way to spin up ETH-based blockchains.</p><p>To get adoption, we needed to build up our own applications. When we started doing that, we realized it didn&rsquo;t make sense to build EVM stuff in Solidity and built in Go.</p><p>Need developers building on platform - so built CryptoZombies</p><p>First, we built ETHFiddle which is Fiddle for Solidity -- like JSFiddle (inbrowser IDE for Ethereum to share code. Like Remix, but you can quickly share code snippets.)</p>"},{question:"testing",answer:"<p>Truffle / Ganache. When it&rsquo;s time to test on a real network, sometimes just deployed to mainnet .</p><p>In-House guy out of NYC that does contract audits</p><p>Open Zeppelin stuff is awesome</p><p>Use own ETHFiddle to hack on code in the browser and share things with other people</p><p>Compiler output not good: just does a diff check.</p><p>Tried embedding Solidity Compiler, but errors weren&rsquo;t descriptive enough</p>"},{question:"bounties",answer:"<p>Some type of tool that would take ETH Smart contracts, pack them up and automatically deploy them to mainnet.</p><p>Heroku style CLI deployment tool or in-browser version.</p><p>Making deployment easier for testing and production.</p><p>Solidity is really &ldquo;bare bones&rdquo;</p><p>Hard to manipulate strings -- not present in Solidity</p><p>When trying to give examples in CryptoZombies -- couldn&rsquo;t do much</p><p>Comparing strings -- no substring function</p><p>Would be nice to have more &ldquo;Utils&rdquo;</p><p>Started Solidity X</p><p>Superset of Solidity that compiles to Solidity (intelligent defaults and prevents security issues)</p><p>Think coffee-script for Solidity -- plan to continue development in the future</p>"}]},{id:53,name:"Matthew Di Ferrante‏",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Audits</p><p>Some clients have their own testnets. Or some chain state that needs to be initialized before you can run the code.</p><p>Smart contract dev &ndash;</p><p>Decentralized exchange project &ndash;</p><p>Testing that is hard. You need to deploy on chain; there&rsquo;s a vault, ownership, hierarchy. How does the moving average work? You gotta run a 1000 trades and they have to be from the same account, etc etc</p><p>I wish these tools had a dev mode &ndash; where you can deterministically generate accounts</p><p>Geth & Truffle & etc should have a 1000 accounts that always show up as the first 1000 accounts.</p><p>E.g. for testing signatures.</p><p>There should be a templated test environment; that you can use across environments, installations, etc.</p><p>I find himself editing this a lot.</p><p>People often give me tests which have addresses hard-coded in. I then  have to set it up again.</p><p>Consistency:</p><p>Getting projects to sync up; or a tool to initialize the setup for different projects.</p><p>Can use ganache or testrpc upto a certain point, but then, it doesn&rsquo;t scale.</p><p>Something that takes one second to run in geth, takes 20-30s on ganache.</p><p>A tool that seeds the addresses, accounts &ndash; environment imaging.</p>"}]},{id:54,name:"Jenna Zenk, Travis Jacobs",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Decentralized asset management system. Smart contract that allows you to set up and manage digital assets.</p><p>Feature complete protocol going up to mainnet for short period of time for testing.</p>"},{question:"tooling",answer:"<p>Smart contract: Dapp by Dapphub. We manage packages with git modules. Includes Solidity compiler.</p><p>Subpackages delivered as git submodules i.e. safemath.</p><p>Used truffle in the past. When you make a large project of truffle it becomes too complex. Not a fan of the migrations script. Record migrations on blockchain with an actual contract. Can&rsquo;t run specific migration scripts, must run sequence of them. Need to recompile every time you do migrations even if contract code hasn&rsquo;t changed.</p><p>Parity.js used for testing and deployment. Doesn&rsquo;t have much error handling beyond what we&rsquo;ve requested. Uses parity specific JSON RPC calls- can&rsquo;t deploy to Geth or Ganache nodes. Looking to switch.</p><p>Didn&rsquo;t use metamask because idea was to have mobile compatibility- therefore didn&rsquo;t see the value of metamask and were less feature complete. Internally developed in-browser wallet with Ethers.js works on all devices</p><p>Ethers.js library- really great. Only used in front end stack. Great because it&rsquo;s not dependent on Metamask. More tools needed like Ethers.js that are maintained well.</p>"},{question:"testing",answer:"<p>Use Parity.js for deployment on test network</p><p>For testing- use Ava javascript framework</p>"},{question:"smart_contract",answer:"<p>Continuous integration with tests and Oyente integration</p><p>Use Oyente.js - Melonport has sponsored the development of. Knows certain set of issues that have occured in smart contracts.</p><p>Regular code audits (4). Before they go live next February, planning for 2 more audits. Audit from Nick Johnson and Martin Swende. Audit from Deja Vu. Last audit from bug bounty- Nick Munroz from Solidify. Also running a main net bug bounty.</p><p>Thinking about formal verification but costs associated with it is really high.</p>"},{question:"bounties",answer:"<p>Javascript library and</p><p>Light client</p>"},{question:"missing_tools",answer:"<p>Really good .js library, better standard. Our front-end would love to help with ideation/funding.</p><p>We almost have to ask users to run full parity node to not affect our Node, force downtime. More community-available Nodes or otherwise light clients. Infura is completely owned and limitations such as querying limits and looking far back into history.</p>"}]},{id:55,name:"Aaron Kumavis",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Whymarrh: contracting in the space, working on Metamask UI, working at Kyokan.</p><p>Kumavis: co-founder of MetaMask.</p><p>wallet functionality;</p><p>not losing your private keys;</p><p>showing you what you&rsquo;re signing, and what the side-effects of that are;</p><p>choosing a good gas price</p><p>Using Ethereum.js, Eth.js.</p><p>One thing we don&rsquo;t do well &ndash; conveying on-chain errors that happen during tx execution.</p><p>Want to be able to go deeper.</p><p>Source map tooling. Here&rsquo;s where it exactly went wrong.</p><p>Want: an API to get source maps for published contracts.</p><p>Source mapping tool already exists.</p><p>Give it the trace information. They can generate this themselves using the json rpc.</p><p>Find where it reverted.</p><p>Throw that into the source maps.</p><p>That&rsquo;ll give you the original line it was on.</p><p>Could do more fancy analysis: find what values in the state are.</p><p>Not sure how useful this would be the average user.</p>"},{question:"bounties",answer:"<p>We&rsquo;ve had good experience with bounties &ndash; Gitcoin,</p><p>One issue: bounties denominated in ETH or tokens, which leaves them open to volatility and potentially unhappy contributors.</p><p>Gitcoin, has ERC20 support, so you can use DAI now, which should help significantly.</p><p>People sometimes do crappy jobs, then get angry that they&rsquo;re bounty wasn&rsquo;t accepted. This is, in a general, a problem between intrinsic and extrinsic motivation which still needs to be solved.</p><p>Internally requirements change sometimes, leading us to not wanting to accept the solution even it abides by the initial spec, because we&rsquo;d need to do a refactor around it.</p>"}]},{id:56,name:"Dan Finlay",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>User interface platform apps - Apps that enable other apps.</p><p>A few gateway apps.</p><p>First layer of education making it easier for users to interact with other apps.</p><p>I started with the original &ldquo;Hello, World&rdquo; Greeter contract from ethereum.org.</p><p>I liked it so much I forked it.</p><p>Originally they had 3 tutorials: Greeter, Voting, and Crowd-funding - would be great to see that kept more up-to-date...</p>"},{question:"tooling",answer:"<p>React, gulp, javascript, browserify.</p><p>Mocha for testing, build live reloading.</p><p>web3 api and rpc api.</p><p>sinon mocks.</p><p>Create a UI for smart contracts, run testrpc, deploy contracts, and query it.</p><p>If not already mentioned, are there any libraries you rely on regularly?</p><p>web3, eth-js, provider engine deprecating for json rpc engine, react.</p><p>bip-39, web crypto libraries.</p><p>Currently developing eth-keyring-controller</p>"},{question:"testing",answer:"<p>Test network, mainchain, local test rpc, mocked user interface.</p>"},{question:"smart_contract",answer:"<p>Regularly TDD. Write a lot of tests. Truffle, dapphub etc.</p><p>eth-js or web3 to deploy contracts and write tests over to that.</p><p>Low-level js test. Thin wrapper around json-rpc, compile with solc, deploy straight to rpc. Used truffle v1 and they changed api, so truffle was behind. Switched to remix.</p><p>On metamask we use tests and QA. Automated tests and user tests.</p><p>Understanding the blockchain in the first place.</p><p>What&rsquo;s happening under the hood and why I would care.</p><p>A big challenge people hit the first time is reading from blockchain versus proposing a change.</p>"},{question:"bounties",answer:"<p>https://ethereum-magicians.org/t/strange-loop-an-ethereum-governance-framework-proposal/268/24</p><p>There&rsquo;s a road map that needs to be executed for this to work. If I had to guess, here&rsquo;s how it might unfold:</p><p>A client team with incentive to encourage a hard fork might implement &ldquo;accepting on-chain hard fork proposals with client parameters&rdquo; as a way to make it easier to develop the hard fork, in a community-focused way that gives users the power of choosing future forks in general, not merely supporting their own interests.</p><p>Once one client has implemented this, they should advertise their client as the client that gives the user the most control over the fork policy that their client uses, in hopes to either steal users to that client, or pressure other client developers to relinquish their own privileged decision making position by implementing support for the same.</p><p>There will probably be a friction period, either where some client devs don&rsquo;t want to support this feature (either out of conviction or seeing it as a waste of time, since they may not want or need any hard forks), and so it might come down to people who have the most at stake (for example, people hoping for a funds recovery) to fund the development of this general feature for all clients.</p><p>If core client developers aren&rsquo;t interested in supporting user-chosen hard fork policies, and refuse to review/merge these PRs, that might be a good reason to fork those clients, with hopes to merge after the changed version is proven stable.</p><p>IMO, any client not favorable to a user configured fork choice rule is entrenching their own power, and informed users should flock away from those clients as other alternatives emerge.</p>"},{question:"missing_tools",answer:"<p>The ability to make really lightweight user interfaces that subscribe to blockchain state.</p><p>Would prefer that json-rpc return promises.</p><p>json-rpc is unperformant, wish it was easier to contribute to.</p>"}]},{id:57,name:"Christopher Brown",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Full stack web dev, working in finance and some other industries. Started in Eth after reading WSJ after Frontiers release.</p><p>VM was interesting - run code in the blockchain is really interesting.</p><p>Modular.network - working on a hybrid solution with Blossom.</p><p>Several microservices in AWS that are coordinating with SCs on the blockchains - all that talk to a frontend dashboard</p><p>Token contracts</p><p>More extensive libraries now - we have an open source repository for ETH contracts.</p><p>Math</p><p>Token</p><p>Crowdsale</p><p>Array handlers</p><p>Linked lists handlers</p><p>Landed on Status repos first when looking at this stuff :)</p><p>Looking at zeppelin&rsquo;s libraries and they didn&rsquo;t seem as organised as other strong OSS libraries.</p><p>All about documentation!! Seemed lacking and this is the focus at modular.network.</p><p>Not deployed libraries you can link to.</p><p>Modular deploys on all networks and you can link to them specifically using delegatecall.</p><p>Take ERC20 - no reason to have 10000 Full implementations out there, just need contracts to hold their own storage and implement the right interface.</p><p>Bridging tech is most important for foreseeable future due to efficiency concerns on chain.</p><p>ETHPM required for graceful handling of libraries and packages, easily, securely etc. Really need to focus on that.</p><p>Have some thoughts about using on chain tests for upgradeability.</p>"},{question:"tooling",answer:"<p>Truffle for building, testing and compiling</p><p>Can be sketchy on deployments, though this has improved recently. Built our own deployment script to get around it though.</p><p>Test, compiling and running are cool, but none of them are linked very well.</p><p>Being the devs of both ganache and truffle -putting the scripts together that would run the whole suite would be awesome.</p><p>Needs easier integration with CI tools.</p><p>Test scripts from zeppelin (in the sol libraries that pulls up testrpc, gives it a bunch of accounts and then executes whatever you have written).</p><p>Dive into lower level Ethereum libraries a lot - ethjs-utils especially.</p><p>You have to understand what is going on and WHY you&rsquo;re doing it. This context is tough to get across and the libraries here are just not as well advertised, which is a pity.</p><p>It&rsquo;s a maturity thing: early on you&rsquo;re just trying to attract people and get them to get their hands dirty. As the community matures, you need more forward-facing, lower-level libraries that are well documented available is absolutely key. You can only do so much with vanilla web3..</p><p>One of their new implementations is a new multisig wallet, picking up some stuff from ERC 191, added some things to address security concerns.</p><p>None of that stuff is in web3, so using ecsign method from utils in order to avoid going onchain all the time to get info that is available elsewhere.</p><p>More attention around lower level components is useful as we mature.</p><p>Ethereumjs-tx, ethereumjs-wallet, solidity-sha3, to get identical hashes</p><p>Little bit more control to JS devs.</p><p>Web3 1 looks good</p><p>Biggest mistake: made it default installer when web3 v1-beta came out and this is a crucial error!!</p><p>But scrypt is such a heavy package to deal with. We use that for local encryption/decryption now. Can it even be compiled into an Electron app for instance?</p><p>Necessary because everyone running full nodes is never gonna happen.</p>"},{question:"testing",answer:"<p>Just Truffle for tests</p><p>Mocha for unit and functional tests. Use mocha across the whole application base.</p><p>Have run Mythril on some mission critical contracts</p><p>Was a pretty good experience</p><p>Stay away from monolithic code bases, iterate and test as regularly as possible!</p><p>Applies especially to smart contracts</p><p>Use event logging to debug contracts if possible</p><p>Getting invalid opcodes as feedback when your code doesn&rsquo;t run is the single most frustrating thing in the world!</p><p>This has now improved a lot, which is awesome! Not just OOG errors in solidity anymore.</p><p>Finished contracts a few months ago and now don&rsquo;t really want to touch them too much. However, solc moves on a lot and there is a tension there (especially after audits)</p><p>SC dev is much more like traditional application dev, not web dev. Updates are months apart and very purposeful, bundle a bunch of things etc.</p><p>We like solidity, and most problems are related to VM not being as capable as people currently want.</p><p>There&rsquo;s a language called Jelly with very purposeful functions that are then linked together to create compound functions.</p><p>Someone wanted trailing and leading 0&rsquo;s from contracts return data - seemed very easy to do in Jelly. Specifically, bytes are so valuable on the blockchain and we use more bytes than we need to.</p><p>Room for optimisation with bytecode there.</p>"},{question:"missing_tools",answer:"<p>The community is doing a good job and a lot of the stuff we need is already being worked on by someone.</p><p>ETHDenver and the gas visualisation tool that came out of that.</p><p>Became apparent that there are places where you see red and you can&rsquo;t change that and these sorts of insights are useful - do I really, really need to put this piece of data on chain etc.</p><p>More visual tools that you could wrap around smart contract code (that doesn&rsquo;t get compiled).</p><p>Has there been any thought around wrapper code for SCs for developer-specific tools or libraries that give you the visuals you need to understand more of what is going in.</p><p>Having a logger that works well and you get outputs similar to solidity-coverage and doesn&rsquo;t only point out errors, but also information - showing scope and which state variable it has access to etc.</p><p>Think about in context of Parity issues we had: the fact they tried to structure a lib as a contract could have been picked up by something like this.</p><p>Or, in Ownable contracts, specifically printing out a report that says &ldquo;The owner of this contract is the only one who can access this specific state, as opposed to other users&rdquo; etc. Point out how to establish an owner (if not already set in initialisation function).</p>"}]},{id:58,name:"Harry Denley",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>EAL: Ethereum Address Lookup to prevent phishing.</p><p>Back in June: chrome extension as a mini block explorer. Hover over any address, shows how many transactions it has etc.</p><p>Couple weeks later, dedicated himself to finding phishing sites and black-listing them with Metamask and his chrome extension.</p><p>Recently &ndash; added service every midnight to do data gathering on each domain.</p><p>There is a group working on anti-phishing. We share information and data through an established channel.</p><p>We now have a bot to run ops on domains (whois data gathering, DNS records, SSL dumps, Shodan data on the server)</p><p>We have also deployed an archive bot on Twitter @EthereumBadList</p><p>My main effort: to protect users.</p><p>In the start of 2017, I got into Ethereum development.</p><p>Met team at Myetherwallet (now MyCrypto). Introduced me to other people like Griff.</p>"},{question:"bounties",answer:"<p>Building a platform / website to educate people on how to stay safe. MyCrypto has some stuff.</p><p>I have a Twitter poll that described this idea.</p><p>Create a bounty around this.</p>"}]},{id:59,name:"Taylor Monahan",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Chaos. 2017 in one word.</p><p>Started off as a fun side project &ndash;&ndash; cofounder is Kosla &ndash; they were both working part-time.</p><p>Then it exploded &ndash;&ndash; the Ethereum price chart is a perfect representation of MEW growth. Kosla stopped being involved after it got chaotic, because it was no longer just a fun side project.</p><p>Ecosystem started going crazy &ndash;&ndash; she started leaning in.</p><p>Team growth &ndash; hired 2 devs in April/May. Hired Jordan in June. Hired a person / week in the summer. Hiring a ton of support people. Got a director of security. Trying to hire Harry in full-time. Team of ~ 20.</p><p>Growing a remote crypto team. How to incentivize them & keep them happy. Raises don&rsquo;t work in this space.</p>"},{question:"bounties",answer:"<p>Money is not their constraining resource. People, hiring, management are constraining.</p><p>Best thing for ecosystem right now is: educational, marketing, videos, tutorials, write-ups, explaining how things work.</p><p>E.g. when your mother hears about an ICO, and they google it, there&rsquo;s good resources available to educate them.</p><p>In the beginning, MEW was a stepping stone for people who already owned cryptocurrencies, before they started using geth or parity or etc.</p><p>Now, this is no longer the case, there&rsquo;s new people who don&rsquo;t know anything about cryptocurrencies at all..</p><p>Biggest phishing attacks they&rsquo;re seeing are airdrop sites. &ldquo;Free money??&rdquo; Typing your private key is not a good idea.</p><p>How does a project responsible onboard people onto Ethereum?</p><p>How does the experience look as dApps become more of a thing? How do people use this?</p><p>In a dApp, the wallet functionality should be completely abstracted away. The user shouldn&rsquo;t even know that there is a wallet.</p><p>If I had extra money, I would give 100% of it to educational resources, people designing infographics, videos, etc.</p>"}]},{id:60,name:"Nate Murray",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I started by creating my own token using the tutorial on Ethereum.org.</p><p>I also did some of the other tutorials on the Ethereum.org page.</p><p>Rich user-facing Dapps using a modern JS web tech stack.</p><p>Solidity for writing smart contracts and web3 for the connection to the blockchain.</p><p>Next thing I'm working on: solidity, truffle, javascript, ipfs.</p>"},{question:"tooling",answer:"<p>I use python for numeric analytics (not really around dapps).</p><p>For desktop apps I'll use Electron.</p><p>For contract development I use solidity, and web3.js for a connection to the blockchain.</p><p>Zeppelin's libraries for solidity.</p><p>0x has excellent repo for js.</p>"},{question:"testing",answer:"<p>At first, getting contract working use Remix or testing framework built into truffle.</p><p>I don't use Ganache.</p><p>I really like connecting my contracts a real instance, and I like using console to connect to node.</p><p>I do it in layers. First start developing against testrpc because its faster. Then use geth.</p>"},{question:"smart_contract",answer:"<p>Wish i knew better how to do audits. Would love to know list of auditors. However, even if I could get in touch with auditors it sounds expensive.</p><p>Use solc linter when developing.</p>"},{question:"missing_tools",answer:"<p>Logging within solidity is hard, you can emit an event.</p><p>Tools around gas are hard, its so opaque.</p><p>Remix and gas is maddening, different gas limits, might have contract call that works in one env that doesn't work in another.</p><p>Formal verification; we need something better than solidity. Bamboo seems cool.</p><p>interested in the successor to serpent - vyper.</p>"}]},{id:61,name:"Benjamin Bollen & Paruyr Gevorgyan",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>We are building a developer kit that builds a bridge from Web2 to Web3, nice interface so that people don&rsquo;t need to have understand blockchain to use it.. Need to get users on the technology.</p><p>We have to be very pragmatic. 3 core regions to be make technology accessible by millions:</p><p>Management for users and development</p><p>Define a token for an application, how would you use it for your company?</p><p>Being pragmatic about scaling, a Layer 2 Solution. Not really sidechains, all value is only defined as value of ERC20.</p><p>Circumvent boundary of the bridge with a business solution.</p><p>We put quite a lot of effort into this, they had 2 main concerns. Auxiliary systems, have to be natively compatible with many chains. And want to be token compatible first as opposed to be block first.</p><p>Had a bad experience with Ethereum Permission Client, had some incompatibilities on ABI level so had to do their own tooling.</p>"},{question:"tooling",answer:"<p>From an IDE perspective: Tried to use Remix, but not so easy to set up locally. No finalized IDE. It&rsquo;s powerful but not easy to set up, very complicated to set up and not so stable.</p><p>Web3.js Intense users, but don&rsquo;t like how they handle callbacks. New documentation is not yet complete. Want more examples on web3.js. Better documentation.</p><p>OpenOSTBase- a bunch of wrappers around the websockets around web3, make these more reliable and redundant. In production, things tend to break but this helps with that. Happy to contribute back :)</p><p>Web3.js is a first level API. First layer access to the technology, but want to have a more user friendly second layer that caters to the community needs. More user friendly, without having to do the same thing several times. We want a second level API, a helper or utility level API.</p><p>What tools don&rsquo;t exist at the moment?</p><p>Haven&rsquo;t super explored Ganache but is interested in more things done via command line. Any type of automation that can be done from the command line is cool and greatly helps with efficiency.</p><p>Biggest thing we are missing is an IDE suited for the ecosystem. Something that could do a gas function on Remix done on runtime, you could see security things happening on runtime. Integrating Remix with a different IDE, it&rsquo;s currently statically bound.</p><p>Clear explanation in Documentation.</p><p>General level: a big proponent of multiple chain universes. In OST users only really interact with Ethereum mainnet, only have tooling directed towards one chain.</p><p>Solidity perspective, have a diagram based solution to see all the connections. Solidity codebase diagram module would be very compelling.</p><p>How do you handle smart contract verification and security?</p><p>Guiding principles: observe standards and don&rsquo;t invent funny ways of doing things. Trying to reduce code to smaller components and go from there. Had 3 security auditors. Cure53 reviewed contracts and all traditional architecture. Zeppelin did audit for smart contracts.</p><p>Now working on the hardcore protocol. TrailOfBits builds a lot of interesting tools examining the bytecode. This is not an easy task. Trying to take very small steps one at a time and then go from there is the philosophy.</p><p>They are excited about ewasm. They respect work done with Solidity, but bytecode is the biggest thing. They have compiled with same Solidity on Mac and Linux for same thing and got different bytecode, this is a big concern.</p><p>Compiler, assembly tools, and debug tools are all major points of interest. Could be interesting if Solidity compiles to wasm, then you have portability.</p><p>What was the hardest part about learning to develop with Ethereum?</p><p>To set up the first private network was somewhat difficult. Didn&rsquo;t use Truffle, just Geth. Geth is very powerful but is missing good documentation and had to Google.</p><p>Solidity is good but needs better docs and better exampling. Very happy with CryptoZombies tutorials, want to see more things like this to help intro new users into the space.</p><p>Hardest thing when you deploy something is deploying a smart contract that intends to have value but not having a way to walk it back. In the last weeks running up until their deployment, did 8 dry tests with a self-destruct button. Ran this 8 times on Ropstein testnest, and then mainnet. Very interested in smart tooling to help in this process!</p><p>More tooling for testing of deployment. Testing where deployment happened properly to avoid situations like Parity Wallet. Had Monex with EthPM like tool. Scripting the deployment. Testing the deployment, could be a part of an automation toolset. Like fastlane for ios and android deployment.</p><p>What are you most excited about in the short term?</p><p>Getting OST to version 1.0 :) But beyond that most excited about ewasm. Also excited about Whisper and Swarm.</p>"},{question:"testing",answer:"<p>Using Truffle. Have a setup where for local dev purposes are tested on one chain. At a later layer they are tested on a testnet.</p><p>One cool thing we would be interested in: very close adaption between local environment and staging. Having a seamless way of transitioning from local to go to staging on Ropstein/other testnet, flip a an environment variable and go from local to staging.</p>"}]},{id:62,name:"Fredrik Harrysson",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Been a core dev on Parity for a few months.</p><p>Making the Ethereum client itself nice to use by developers.</p><p>Also building a solidity parser and linter</p><p>Building some JS libraries for developers to actually write dapps</p><p>Talk about the enterprise company dapp -- how did we scope, what tools, etc</p><p>All at a proof-of-concept stage. Probably 10 years before they can actually make it work in their business.</p><p>I set up the docker containers for the nodes, did the documentation, and built the React App</p>"},{question:"tooling",answer:"<p>Everything, even in dev environment is containerized</p><p>IPFS, React, Parity, ParityJS</p><p>Have some internal tools that generate javascript ABI&rsquo;s from the smart contract spec</p><p>Have an internal CLI for deployment</p><p>Deploys the contracts and then initializes some values</p><p>If you change your contract in development, re-running this tool takes a super long time, which is frustrating</p><p>If not already mentioned, are there any libraries you rely on regularly?</p><p>Main library they use for all dapp development is ParityJS, and their new library called Bonds/007 (React integrations)</p><p>Parity Ethereum node has pub/sub now</p>"},{question:"testing",answer:"<p>Use truffle internally for testing some contracts</p><p>Also write own own testing tools using Rust because we don&rsquo;t like javascript</p>"},{question:"smart_contract",answer:"<p>Internal audits.</p><p>We are introducing a checklist system for deployments.</p><p>Pre-, during, and post-deployment</p><p>Doing external audits on everything now. Even auditing Rust code right now.</p><p>External audits are great, but the average developer cannot afford that</p><p>***Teams have grown super fast without having time to document company knowledge so that all engineers know it*** (documentation includes process as well as code)</p>"},{question:"missing_tools",answer:"<p>Setting initial values after deploying a contract is important</p><p>Being able to roll back transactions would be really nice for dapps</p>"}]},{id:63,name:"Nicolay Wolf",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Not developing lots of dApps.</p><p>Foundational work for WASM:</p><p>WASM interpreter</p><p>Runtime environment &ndash; which allows to run wasm within any network.</p><p>Forking Kovan &ndash; allowing wasm contracts to run</p><p>Running wasm on private chains</p><p>WASM interpreter:</p><p>Main problem:</p><p>Making the Rust interpreter deterministic.</p><p>WASM is not strictly deterministic &ndash;&ndash; need to narrow down to deterministic opcodes.</p><p>Need to ban several opcodes, e.g. floating points. Simple solution: just parse WASM and fail if there&rsquo;s any floating point opcodes.</p><p>Other option: to canonicalize the NaN constant &ndash;&ndash; you need to bring all these flags under one definition.</p><p>One idea: you could check after each floating point opcode &ndash;&ndash; to see if its NaN and use canonical.</p><p>BUT this is not worth the effort, because no blockchains apps will have floating point anyway.</p><p>Other sources of determinism: deterministic stack for execution</p><p>WASM doesn&rsquo;t enforce size of the stack &ndash;&ndash;</p><p>When you get to JIT compilation of WASM, this compiles into using a register-machine specific to the hardware architecture; this process is actually deterministic.</p><p>But it&rsquo;s non-deterministic when you go to run it.</p><p>E.g. when a function uses a lot of stack &ndash;&ndash; e.g. a recursive function that calls itself and itself &ndash;&ndash; it can fail when it hits the stack limit of the operating system.</p><p>This can fail at different times for different machines. So, it&rsquo;s non-deterministic.</p><p>We&rsquo;re transforming existing WASM into this modified WASM that takes care of these issues.</p><p>Any WASM implementation that takes untrusted code from the network needs to have this stuff done.</p><p>eWASM collaboration will be helpful &ndash;&ndash;</p><p>Mozilla has a Rust-WebAssembly group.</p><p>Gas metering &ndash; not challenging but needs to be done</p><p>We have tools which transform WASM from free-form to gas-metered form.</p><p>Includes how much opcodes cost.</p><p>eWASM has this also &ndash;&ndash; we&rsquo;re taking a more scientific approach to this.</p><p>Parity simply uses the eWASM table.</p><p>Don&rsquo;t need to be super precise, just need to protect against malicious users.</p><p>Memory also costs gas.</p><p>Simple way is to charge for memory linearly.</p><p>The original idea is to charge for extra memory quadratically more given how much memory was allocated before &ndash; but you don&rsquo;t need to do this anymore, because there&rsquo;s new ways to allocate memory.</p><p>Gas costs are embedded into the bytecode.</p><p>Proving the correctness of implementation</p><p>Fuzz testing against various interpreters &ndash; spec implementation;</p><p>Fuzz test: allow the interpreter to run code; it should fail or do the same thing at exactly the same spots as other interpreters or existing codebases.</p><p>The interpreter should not panic in any case &ndash;&ndash; otherwise, malicious actor could crash certain nodes</p><p>They use cargo-fuzz for rust</p><p>There are also fuzzing tools for WebAssembly: which can generate randomized wasm modules &ndash;&ndash; can take this; put it into your implementation and the reference implementation; and see that they do the same thing.</p>"},{question:"bounties",answer:"<p>Research for cost of running WASM on different architectures and machines.</p><p>Scientific proofs on how this correlation works.</p><p>Or also computational analysis?</p><p>This will be used to assign costs to Opcodes, and also know exactly why.</p><p>Parity is using eWASM&rsquo;s results for this currently.</p>"}]},{id:64,name:"Peter Czaban",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I started out building some trading algorithm.</p><p>During the early foundation days, there were workshops in London, and during one of those workshops I was writing a dapp using Mist.</p><p>Then, later, I deployed a token contract for fun, and then basically started straight away with client development.</p><p>Been working on the core Parity client on the consensus algorithms. Consensus contracts in solidity. Proof of stake.</p>"},{question:"tooling",answer:"<p>Truffle, solidity syntax highlighter for VIM, Jupiter notebook for testing stuff</p><p>If not already mentioned, are there any libraries you rely on regularly?</p><p>EtherJS</p><p>In Rust similar libraries like @crypto and @key</p>"},{question:"testing",answer:"<p>Mostly truffle for testing. Also have some of my own custom tooling that works on RPC.</p>"},{question:"smart_contract",answer:"<p>First contracts were usually for prototypes.</p><p>I would write contract, write tests, then integration tests.</p><p>Then would go through a review process.</p><p>Sometimes would go to an external audit.</p><p>This only happened for a few projects.</p>"},{question:"missing_tools",answer:"<p>Being able to run things in exactly the same environment as the deployment environment (for me, it was necessary to have a custom client that I ran code against)</p><p>Parity / Truffle sometimes behave in different ways</p><p>Built a custom thing that had partial functionality to give a more consistent testing environment</p><p>Being able to track versioning of contracts from dev to deployment. Requires a lot of back and forth.</p><p>Pain points working with the language. I want a better type system!</p>"}]},{id:65,name:"Phil Castonguay",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Used to work for 0x, now I work as a SC dev and researcher independently.</p><p>I was the developer relations manager at 0x.</p><p>I am now focussing on state channels, signature-based improvements in general smart contracts, blockchain storage (utilising merkle trees and improving best practices).</p><p>Working with a gaming project that utilises state channels, unrelated to Raiden.</p><p>A lot of things that could be done off-chain by simply using different signatures: for crowdsales instead of using on-chain whitelist, you send a signed message for every participant and then they need to pass that message along with sending their Ether. Used by Polymath to get around the gas costs (could cost up to $15 000 just to whitelist everyone).</p><p>Working with chronologic on Ethereum Alarm Clock and other secondary markets, e.g. conditional execution where I want to make sure if x happens somewhere on chain, then do y.</p><p>Right now smart contracts don&rsquo;t listen to each other and require 3rd parties to watch the chain and inform them.</p>"},{question:"tooling",answer:"<p>Using Truffle, Ganache, testrpc</p><p>Most of the tests are not run in parallel, under-utilising my compute resources, can&rsquo;t be adapted easily or extended.</p><p>Remix for quick prototyping</p><p>Actually quite enjoy using the debugger - I find it fairly easy to use. Would be great to play with single function testing locally so that you don&rsquo;t have to run a full suite to test one or two things.</p><p>Typescript (mostly for testing)</p><p>Mostly following 0x standards - transcribing from typescript to js that make it really easy to define statically-typed tests.</p><p>Mocha, chai</p>"},{question:"testing",answer:"<p>I struggle with fuzzing: it&rsquo;s very useful for when different people are working on the same standards  - so we could easily run fuzzing between entirely different teams and see if the way they implement all the functions behave the same way and make sure the different implementations of the same standard are the same. Better standardisation is key.</p><p>Writes unit tests myself and try for 100% coverage.</p><p>I uses Mythril and am looking forward to formal verification.</p><p>Standards checking!! Here is a standard, put your contract next to it and check that it conforms to the standard implementation and then reuse a lot of the unit tests etc. that come with that standard.</p>"},{question:"missing_tools",answer:"<p>Nothing exists for state channels regarding how you pass messages and other p2p tools that allow different agents to communicate easily with each other.</p><p>Not easy to document this.</p><p>No easy way to test how peers are interacting with each other and you want to run simulations in state channels.</p><p>Scheduled transactions: we need a queue to avoid race transactions, can help lower gas costs. But we need off-chain system for nodes to communicate in order to implement that.</p><p>Easy to use and easy to test frameworks for this stuff is going to be super important.</p><p>Would be awesome to have some kind of simulation tool for multi-agent networks of this kind (even relevant for whisper and other parts of the Ethereum network, like zeppelin doing token mechanics simulations and analysis, especially around bad agents). More of a research tool than developer specific.</p><p>Simulator for the cross-client, cross-account signature schemes and management - right now the only way to test these schemes are to actually plug in a ledger and then test. Would be great to be able to test this from one place!</p><p>Couldn&rsquo;t make this work in Truffle, passing in byte code and passing. But then, using mycrypto or Remix, it failed because the encoding, libraries and dependencies are different!!</p><p>Very confusing how bytecode arrays are passed in different tools and how you can convert from one type to the other, how we could concatenate a range of arguments in a single contract and then vice versa. Figuring out how that works (argument encoding) is really difficult to get right.</p>"}]},{id:66,name:"Federico & Jaynti",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Trying to work on Plasma &ndash; white paper is unspecified; it is not clear yet.</p><p>Started Dagger project &ndash; to get events for our UI or backend.</p><p>Use cases:</p><p>If you want to send an email or notification to users.</p><p>If your multisig wallet has incoming or outgoing transaction.</p><p>UI for the front-end; a multisig wallet: sent a tx and see it real-time. Make UI/UX better in Ethereum.</p>"}]},{id:67,name:"Alex Leishman",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I am an engineer on the Polychain team, but come from the Bitcoin world. Used to work at a brokerage. Went back to grad school. Decent amount of experience in Bitcoin and Ethereum stuff over the years. I also have a cryptography background.</p><p>Doing a lot of lightning stuff right now, payment channels. Spending a lot of time investing companies in the space, doing due diligence.</p><p>Been deeper into the bitcoin world, a bit of an outsider in Ethereum.</p><p>I built a blockchain analytics tool called blockseer for bitcoin and Ethereum</p><p>Taught Bitcoin/Ethereum class at Stanford in 2015</p><p>Am really proud of the exchange and brokerage that I built in Taiwan.</p>"},{question:"tooling",answer:"<p>I don&rsquo;t do much eth-dev right now.</p>"},{question:"testing",answer:"<p>CI pipeline needed.</p><p>Testing and security audits are one and the same since you&rsquo;re deploying it once.</p><p>Few contracts are heavily audited, and ecosystem is built around those smart contracts.</p>"},{question:"smart_contract",answer:"<p>We refer companies to trail of bits/ other.</p><p>Formal verification handled by specialized firms. Important contracts will/should be audited by people.</p>"},{question:"bounties",answer:"<p>Large players funding bug bounties for public smart contracts.</p><p>Multisig is a pain in Ethereum. Multiparty signature with a single key from an account.</p>"},{question:"missing_tools",answer:"<p>Native chain improvements</p><p>Casper</p><p>Generalized staking system where you can sell your stake via a new token via smart contracts. Bond for staking.</p><p>Programming tool chains for web assembly. Being able to take advantage of multiple languages like C++ and Rust and have it compiled down to WA.</p><p>LLVM - any LL language could compile to web assembly.</p>"}]},{id:68,name:"JOHN PALMER",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Web applications that interact with smart contracts, usually through MetaMask or Infura.</p><p>We built www.hashheroes.com as our first dive into Ethereum.</p><p>We built www.withpragma.com to make Ethereum development easier.</p><p>We built www.onhexel.com to make it easier for anyone to experiment with tokens and try new ideas.</p>"},{question:"tooling",answer:"<p>Web3.js</p><p>0x.js</p><p>Truffle</p><p>Testrpc</p><p>Infura</p><p>Remix Solidity</p><p>Etherscan</p>"},{question:"testing",answer:"<p>First of all, I write unit tests in javascript and run those locally.</p><p>Interact with smart contract through remix solidity or Pragma.</p><p>Test my app in my own UI. Check etherscan to make sure that happened.</p>"},{question:"smart_contract",answer:"<p>Linting</p><p>Code review on my own and with other people. Check best practices from Consensys</p>"},{question:"missing_tools",answer:"<p>It&rsquo;s not possible to bundle two different transactions together and pay with them at the same time with MetaMask.</p><p>I wish errors in contracts were surfaced better. Generally, it is hard to know when things go wrong in contracts[a].</p><p>Gas limit</p><p>Wish I could do more within the fallback function. I know it&rsquo;s limited purposefully, but I would like a secure way to execute code in it.</p>"}]},{id:69,name:"Marcus Molchany",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Made a few standalone contracts for fun.</p><p>More full-fledged projects are web frontend with blockchain backend.</p><p>Web apps use Metamask to interact with blockchain. Infura as provider if MetaMask not installed.</p><p>We built www.hashheroes.com as our first dive into Ethereum</p>"},{question:"tooling",answer:"<p>Ethereum: Remix solidity, testrpc, truffle, web3 JS, Infura, Etherscan</p><p>Web: React / redux, create-react-app</p>"},{question:"testing",answer:"<p>For contracts, I use Remix Solidity with the Javascript VM. For unit tests, I write JS unit tests using truffle. Tried to write unit tests in solidity but it was difficult. Testrpc behaves strangely sometimes.</p><p>When developing a contract, I will write extra events just to make sure the right thing happened, and then will delete the events when contract is in production.</p><p>Automated testing?</p><p>Included above. Automated is unit tests with truffle. Manual is event logging, usually in Remix.</p>"},{question:"smart_contract",answer:"<p>Warning messages from Remix or solc.</p><p>Reading through Consensys best practices and making sure I use them in my contracts.</p><p>Asking for code review in subreddits.</p>"},{question:"missing_tools",answer:"<p>I really want a richer debugger. The one in remix is too hard to figure out[a].</p>"}]},{id:70,name:"Piper Merriam",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Trinity: new Python-based Ethereum node.</p><p>Py-EVM: python implementation of EVM in python.</p><p>Sharding & Casper research team are building on this.</p><p>Web3.py: python equivalent of web3.js</p><p>V4 is coming along nicely and is fairly solid right now.</p><p>Under the above &ndash; there are a myriad of base libraries that I&rsquo;m the developer &ndash;&ndash; i.e. side-effects of the work.</p><p>Package management</p><p>Similar to Populus &ndash;&ndash; but actually the underlying core package-management structure. The solution is ready, it just needs to be built.</p><p>It is project that I had to cut off, but wants to pick up again &ndash;&ndash; immediately came to mind for bounties.</p>"},{question:"bounties",answer:"<p>The Hive tests &ndash;</p><p>Framework that black-box tests EVM implementation.</p><p>Has had multiple conversations with cdetrio on Github.</p><p>Bounty: needs clear documentation: &ldquo;for your EVM to be included in the Hive tests, you need this stuff.&rdquo;</p><p>Maybe it&rsquo;s not super high impact and not crisply defined</p><p>Bounty: need a formal spec for the Json RPC api.</p><p>Have integrations tests in Web 3. Subtle differences across nodes, which make things confusing.</p><p>Somebody needs to shepherd the ERC spec through &ndash;&ndash; most of the work is done. Dan Finlay already hammered out most of the work.</p><p>Someone needs to write the schema for all Json RPC endpoints.</p><p>This is super well defined.</p>"}]},{id:71,name:"Richard Ma & Don Ho",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Focused on the security aspect of Ethereum. 3 main challenges for going mainstream:</p><p>1) security, 2) scalability, 3) usability.</p><p>Too many projects; audit talent is in low supply;</p><p>System to allow anyone to get a high-quality audit for teams.</p><p>Components:</p><p>Payment smart contract: deals w upgrades; governance</p><p>Verification node: software to verify smart contracts</p><p>Software library: formal verification, static analysis checks</p>"},{question:"bounties",answer:"<p>IDEs:</p><p>Remix is probably the best one. No support for quick-fixes (like you have in IDEs).</p><p>Better support for projects.</p><p>Manage dependencies.</p><p>Code coverage tools, to see how good your tests are. Integration would be good.</p><p>Existing tool: run this as a separate command & get results in a web ui.</p><p>Solidity-coverage.</p><p>Has some static analysis tools &ndash; more would be better.</p><p>Notes:</p><p>Web UI is weird. We don&rsquo;t use it, because of lack of project support.</p><p>We use sublime text / IntelliJ.</p><p>Better syntax coloring like Remix would be good.</p><p>Bounty for solidity support in Vim and/or Sublime.</p><p>Debugging</p><p>Half the time is always spent debugging.</p><p>Debugging with truffle & node-js is horrible.</p><p>Have to debug the JS and contract parts separately.</p><p>Different environments.</p><p>We do iterative development; somewhat test-driven; We&rsquo;re aiming for very good coverage.</p><p>What I&rsquo;m envisioning: putting a breakpoint into the smart contract or Javascript. Ideally, one breakpoint can step through all code.</p><p>Testrpc</p><p>Usable blockchain explorer for testrpc &ndash; to explore local data.</p><p>Would be great for learning as well.</p><p>Streamlining code export for Etherscan verification during contract deployment</p><p>Typically, you have to flatten all your imported contracts, it&rsquo;s a pain in the ass.</p><p>Would be good to have a place to do this. Assures that the version is consistent.</p><p>Sometimes you need update your contract &ndash;</p><p>Tools to evolve your old contract into your new one. Only deploy the additions.</p><p>We had this issue in their ICO: we wanted to change the end-date for the ICO.</p><p>There&rsquo;s a valuable data in the old contract.</p><p>Could run into problems with consistency.</p><p>More than &ldquo;library driven development&rdquo;, would be good to have tools that generate this for you.</p><p>My vision: refactorings like in Eclipse; pick refactorings (e.g. can split the class, etc). This would tie into the IDE.</p><p>Developer education programs</p><p>Lesson plans. Get each company to do one session</p><p>We went to a meetup for people who like to learn Ethereum. It was way oversubscribed.</p><p>Could be good for recruiting / onboarding.</p><p>We&rsquo;re putting together a &ldquo;minimum security standard&rdquo; after interviewing all auditing teams.</p><p>Existing auditing tools for Solidity are poor.</p><p>Read our Solidity analyzer: https://github.com/quantstamp/solidity-analyzer</p>"}]},{id:72,name:"Jay Rush",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>QuickBlocks works with the Ethereum blockchain from the data side. How does one get usable, fast data out of the blockchain (as opposed to putting into the blockchain with a smart contract for example). Our work is fully decentralized (gets all of its data directly and only from the node); We take a bottom-up approach. We run for particular accounts or groups of account, not necessarily chain-wide. We retrieve and store only what the end user asks for.</p>"},{question:"bounties",answer:"<p>The tracing API across the two clients is different and seems ad-hoc.</p><p>A common format for the tracing RPC calls, so tools such as QuickBlocks which rely on the traces would be easier to build.</p><p>I use Parity. I can&rsquo;t switch to Geth because they don&rsquo;t share the same interface for the traces.</p>"}]},{id:73,name:"Yann Levreau",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Working on dev tools for the Foundation for the last 2 years.</p><p>Working on Remix for the last 1.5 years.</p><p>Working alone for the last bit.</p><p>Over the last 6 months, there are more developers. Team is 4-5 people now.</p><p>Iuri Matias: dev of Embark &ndash;&ndash; he&rsquo;s on the Remix team.</p><p>Main scopes of work:</p><p>Improving the UX.</p><p>There&rsquo;s a Remix chat where some people were saying they were using it to deploy mainnet, and I was shocked, since this was not the intended use-case initially.</p><p>UX for people to use Remix and deploy contracts, and not make mistakes.</p><p>Adding static analysis</p><p>There is a new tab-based layout.</p><p>There are several modules.</p><p>Splitting Remix into different modules</p><p>Can now write contracts, debug, deploy, do static analysis &ndash;&ndash; this used to be all in one app. Now it&rsquo;s modular, so you can use these pieces in different apps. E.g. can use static analysis in VSCode.</p><p>He was in touch with Roan Blanco, developer of VSCode &ndash;&ndash; he started to integrate the debugging part of Remix as a plugin. Might do the same for static analysis.</p><p>Road is adding the static analysis.</p>"},{question:"tooling",answer:"<p>Focussed on Remix and improving the UX:</p><p>Remix is an entry point for users</p><p>But it&rsquo;s hard to use for beginners.</p><p>It&rsquo;s hard to use if you don&rsquo;t know blockchain or the tech behind it.</p><p>There&rsquo;s documentation and videos on youtube &ndash; still hard to use.</p><p>Idea: do UX user interviews</p><p>take a beginner developer or new user, and let them use Remix (or other tools), check out what the main flows are, what are their main questions,</p><p>They have two people &ndash; who come from front-end dev. When they started 6 months ago, they didn&rsquo;t know blockchains, so their feedback was helpful.</p><p>There are three kinds of blockchain users</p><p>1) front-end dev: wants to use the blockchain to build UI, but doesn&rsquo;t care about contracts.</p><p>2) contract developer</p><p>3) administrator: not writing code, but still needs to call contracts or send transactions to them.</p><p>Remix is not focused on front-end devs right now. They&rsquo;re not targeting these people. They target contract developers or admins who &ldquo;use&rdquo; contracts.</p><p>Is there a tutorial, or a beginner contract that it initializes:</p><p>Yes. There is a &ldquo;ballot&rdquo; contract &ndash; but it&rsquo;s kinda opaque and hard to understand.</p><p>Docs: remix.readthedocs.io</p><p>Has a quick start page.</p><p>Need to improve: onboarding for &ldquo;administrator&rdquo; users (above). So they can use Remix without making errors.</p><p>Two bounties</p><p>User testing for various blockchain-user personas (above).</p><p>Making tutorials or videos for beginners using Remix.</p><p>Building the static analysis tab:</p><p>Need to add more modules.</p><p>There will be a way to add plugins in Remix</p><p>Let&rsquo;s say you are an external contributor, you&rsquo;ll be able to add code, but the code won&rsquo;t be in the Remix github, but in its repo and it&rsquo;s added as a plugin.</p><p>E.g. Solium integration.</p><p>We are architecting the plugin API with the Solium team.</p><p>Another example: Oyente &ndash;&ndash; we&rsquo;re integrating it as a plugin.</p><p>Potential bounty in the future:</p><p>Writing good documentation around this. We&rsquo;re all super busy devs, and need people to help with documentation.</p><p>Last week &ndash; someone created an Electron app for Remix &ndash;&ndash; self-driven contributor; would be nice if they can post Github issues and have people contribute and get rewarded.</p>"},{question:"bounties",answer:"<p>Hard to make links between tools.</p><p>If you want to make a DAPP (truffle and remix, metamask for front-end), how can you aggregate all tools or write documentation?</p><p>Swarm integration for Remix?</p><p>Currently if you &ldquo;import&rdquo;, it imports from the Swarm gateway &ndash;- it&rsquo;s a basic integration, and can be improved to be really cool.</p><p>Frustrated developing on Swarm. Building Swarm integration, but not usable in production.</p><p>Was trying to fix a bug in Remix - but related to how they import Swarm file -- had trouble fixing bug because emix used Swarm gateway which was offline.</p><p>Swarm not in production environment yet -- looking forward to this.</p><p>Web3 library</p><p>In Web3 have send transaction method - no wrapper around it or other functions that people can use, and use more safely. Would like to see web3 safe send transaction (locate transaction in EVM to check if transaction passed. If its fine, transaction is sent, and if not there is a warning).</p><p>&ldquo;Wrapper around Send Transaction Function&rdquo;</p><p>Possible to develop transaction which fails. If you want to develop a transaction, you first have to send/execute it (but don&rsquo;t want to lose money). Execute transaction locally, wait for trace and then debug it. Think this is what Truffle is using.</p><p>Contract&rsquo;s with specific values: in code, write maximums to revert transactions - can this be added in front-end (ie. limiting contracts values so when transaction is sent there is a check beforehand so you can be sure you don&rsquo;t make mistakes).</p><p>Would require changes in solidity to provide this functionality to web3</p>"}]},{id:74,name:"Gustavo Guimarães",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Blockchain engineer, working in the space since 2016. Mostly as a freelancer, helping companies solve business problems using blockchains.</p><p>Middle of this year, started Samsara Protocol. Started with idea of selling real estate on chain, and decided to use a raffle based system to do this.</p><p>Abstract idea from property to raffling all kinds of assets.</p><p>Smart contract developer in general.</p>"},{question:"tooling",answer:"<p>Use Truffle heavily.</p><p>Still a long way away from good debugging tools.</p><p>Using Remix out of habit, especially to check and step through opcodes.</p><p>Remix to dig deeper into what is going on with my solidity code. Especially the debugger there to dive into the EVM.</p><p>Have got used to the debugger here, but it is still so obscure when something throws an exception and difficult to find out why.</p><p>I have developed some intuition for this, but it&rsquo;s really, really difficult for people just beginning.</p><p>No break points!</p><p>Use open zeppelin as reference for smart contracts - have worked on some educational projects with the Zeppelin team.</p><p>No issues with this. Haven&rsquo;t looked into zeppelin_os yet.</p><p>But the idea is quite interesting - upgradeability and on chain libraries are cool.</p><p>Truffle-flattener library - make all your modules into one file. Use this to deploy, rather than doing it file by file.</p><p>React for frontend stuff.</p><p>Web3 to hook it all together.</p><p>Websockets (wss) are tough to work with. Having difficulty connecting to them through the infura nodes.</p><p>Overall, really happy with the new version - it solves a lot of problems, particularly around signing transactions safely.</p>"},{question:"testing",answer:"<p>I test in JS - unit tests mostly.</p><p>On average the ratio is 15:1 testing to smart contract lines of code and this can cause things to be quite slow, but it&rsquo;s still good practice and seems necessary for immutable contracts.</p><p>Overall, quite happy with what comes out of the box with Truffle.</p><p>Have only added await async calls to make things easier to read. Have some Mocha extensions added for the same reason.</p><p>Prefer readable code, rather than fast code, especially when it comes to testing.</p>"},{question:"smart_contract",answer:"<p>Here in Berlin I have worked with solidity,berlin and they are amazing. Do really comprehensive audits.</p><p>Have also used formal verification tools: most often Mythril, sometimes Oyente.</p><p>I am also aware that the invariance checks etc. are also created by humans, so might not be entirely comprehensive.</p><p>3 levels of checks: write code, write tests for the code, pass to another engineer to check, then formal verification tools, lastly do the audit.</p>"},{question:"missing_tools",answer:"<p>Would be nice to have a tool that could get bytecode and re-engineer it into solidity code.</p><p>Sometimes I want to check if a function or some functionality and, if the contract has been deployed but not verified, it&rsquo;s not really possible.</p><p>Open source block explorer.</p>"}]},{id:75,name:"Scott Wright",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Just simple stuff - proofs of concept.</p><p>Working through course material</p><p>Building a token and a very minor escrow app</p><p>Timed auction.</p>"},{question:"tooling",answer:"<p>Remix</p><p>Geth obviously</p><p>SolC for compiling</p><p>Yarn is (apparently) standard now for js</p><p>If not already mentioned, are there any libraries you rely on regularly?</p><p>Web3</p>"},{question:"testing",answer:"<p>Automated testing?</p><p>There&rsquo;s an IDE that I&rsquo;ve used - Remix. Provides an interaction with Geth, create test accounts, and then I use that UI to launch a test application on testnet, play with it, see if it works&hellip;</p><p>I WANT an automated test suite, but nothing out there right now.</p>"},{question:"missing_tools",answer:"<p>Automated testing - I want a testing suite, a whole tool that is entirely focussed TDD. The work really corresponds to that. Clientless work with many test iterations.</p><p>A lot of uncertainty around how gas works.</p><p>What is it exactly, how does it get used, how do you optimize for it?</p><p>The basic idea is fine, but the details when you&rsquo;re building stuff are very hard to find out</p><p>What are the best design patterns for dealing with it, the strategies?</p><p>Also, you come up against issues when there&rsquo;s a withdrawal attack vector, where you try to send ether to them, and there&rsquo;s some sort of callback function and etc.</p><p>There&rsquo;s a design pattern that works around that, but my level of knowledge is just that someone TOLD me that, but what other things do I need to be aware of? How can I find out more? These are open questions for me right now.</p><p>Would love a list of things where I can go through check marks and say &ldquo;OK, I&rsquo;ve followed x and y&rdquo; and I&rsquo;ve watched out for the following 23 possible issues / attacks.</p>"}]},{id:76,name:"Felix Feng",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Founder of Set Protocol, wrote all the smart contract code/unit tests</p><p>Aims to build collateralized baskets of tokens. Bundle the world. In a tokenized world where tokens lie behind everything, we need to create abstractions that remove mental overload, improve transaction efficiency, and handle large amounts of tokens in general.</p><p>Just released token sets dapp for bundling/unbundling token sets. First use case- investment vehicle/product. Javascript library similar to 0x for interfacing with their smart contract code.</p>"},{question:"tooling",answer:"<p>Internal javascript library in Typescript for UI  interfacing with their protocol (bundle/unbundle)</p><p>Uses 0x ABI gen for automatically generating typed objects</p><p>Truffle for testing/ compiling</p><p>TruffleHD wallet provider repo</p><p>Infura for deploying code to Ropsten testnet, hitting services all the time. Easier to deploy to testnet.</p><p>For deploying to mainnet, they use Remix.</p>"},{question:"testing",answer:"<p>Started with truffle tests</p><p>Then converted tests to typescript for type safety (avoids host of potential errors, useful for building FE library as well) and used 0x ABI gen</p><p>Aim for 100% test coverage (~95%)</p>"},{question:"smart_contract",answer:"<p>Contracted security auditing firm before launching to mainnet and did it internally.</p><p>Introduced to firm through investors</p><p>Zeppelin and Consensys security etc. are super backlogged and can be highly expensive.</p><p>Tried automated tests for quantstamp but their compiler solidity version (4.2.3) wasn&rsquo;t supported.</p>"},{question:"bounties",answer:"<p>Debugger</p><p>More free automated formal verification</p><p>List i.e. Aggregated &ldquo;Awesome Ethereum&rdquo; for security (blog posts, tools, etc.)</p>"},{question:"missing_tools",answer:"<p>Debugger. Especially as contracts start linking to each other, stack trace gets more important.</p><p>Open source block explorer for any chain.</p><p>Lot more typescript tooling. 0x started the movement and built tooling around it.</p><p>People are building their own deployers/compilers. More standardization need here.</p>"}]},{id:77,name:"Simon Jentzsch",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>CTO of SlockIt.</p><p>Daily standups like any other startup, making sure all our tools work correctly</p><p>Part of day consists of update on new tools, libraries and their respective stability. Assessing trade-offs is difficult and time-consuming work.</p><p>Consulting work, experience with real customers</p><p>Connecting IOT devices to the blockchain</p><p>Energy Web foundation, smart meters</p><p>Smart contracts for data incoming from IOT</p><p>Determine what  type of hardware they should use</p><p>Building universal sharing network (USN) in-house.</p><p>Connect IOT devices, access control, rental and sharing settings</p><p>Launched MVP on Testnet and inviting beta users. Planning on deploying to Mainnet.</p><p>Public repo containing architecture and contracts</p><p>All smart contracts will be publicly available after security audit</p><p>Use Kovan since its compatible with most clients. Also on Rinkeby.</p><p>Using Parity for tests, but interoperability between clients is lacking badly.</p><p>Gives and recieves audit</p><p>First, internal security audit</p><p>Then, number of experts from different teams.</p>"},{question:"tooling",answer:"<p>Start with Truffle - mainly for testing and setting up environment</p><p>Doesn&rsquo;t produce/support typescript</p><p>Extended version we produced and use for</p><p>Typesafe contracts based on solidity contracts</p><p>Throws errors on incorrect smart contract types</p><p>Usually write tests with Travis CI, for all three browsers (GETH, TestRPC, Parity)</p><p>Use Remix for debugging</p><p>Wish we had a more stable and easier to use debugger!!</p><p>Test RPC vs Ganache</p><p>Many tiny differences (output syntax, JSON RPC error messages, etc.)  between clients makes testing very hard between clients</p><p>RPC Specs need to be tightened up so that we can communicate with them from whichever framework, write tests easily and actually understand the error messages that come back.</p><p>Not specific enough, too much room for divergence</p><p>Web3 library is trying to limit this</p>"},{question:"missing_tools",answer:"<p>Scalability is long-hoped for and looked forward to ;)</p><p>Mainnet as main authority,. For different devices, different chains.</p><p>Current work around could be  to use bridges (parity)</p><p>Micropayment, multiply party, state channel Solutions like Raiden up and coming, but not ready yet</p><p>Contracts that pay only for your devices from a certain account</p><p>They currently use libraries and packages to avoid security issues</p>"}]},{id:78,name:"Fernando G",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I am a developer, working in London for the last 4 years, I love coding in general, but also security. I am joining ConsenSys next week and I am working in several side-personal projects, including the solidity-graph-debugger</p>"},{question:"tooling",answer:"<p>Well, it depends, when I build tools related to Ethereum, I tend to use the Java ecosystem (Java8, Maven/Gradle, Spring if it is a web application, etc).</p><p>When I am writing Smart Contracts, I use truffle for building and testing, intellij with Solidity plugin as IDE, Ganache, Mythril for formal verification, etc.</p>"},{question:"testing",answer:"<p>For unit testing I use truffle, I write JavaScript tests, it works great. I use Mythril if I am auditing my contracts, I identify some really important invariant and I write a little script to formally verify it, and Mythril is great for that. Manticore can also do that, but didn't have the time to test their scripting APIs (something I have pending)</p>"},{question:"smart_contract",answer:"<p>I always try to keep myself on top of existing known vulnerabilities and the new ones. I have a repository with proof of concepts of most of them, and I run unit tests demonstrating the bug and the fix, in that way I have a practical view of the known security bugs. Then I try to audit my contracts using the knowledge I acquired and the tools available, mythril formal verification, mythril analysis, manticore, porosity</p>"},{question:"bounties",answer:"<p>I think anything related to ease the whole lifecycle of developing Smart Contracts is a good candidate. A good IDE (or plugins for existing matures IDEs), with integrations to common services and tools like embedded 1 click debugger, 1 click deployment with builtin interaction with on chain contracts would be a game changer.</p><p>And like I said, a good project that can make average users to use Smart Contracts without the need of handling the private key, secure it, go to an exchange and verify their identities to get ether, then use complicated processes to do a simple thing would help a lot to gain adoption, which is very important (even if the network and technology is not completely ready at the moment for that)</p>"},{question:"missing_tools",answer:"<p>Good question, there is a lot of ecosystem that has to be created. The most obvious thing, would be a graphical debugger that is what I am building, but also dependency management tools, good IDEs (intellij solidity plugin is cool, but like everything right now, it's a bit green), better documentation tools, clients for pretty much everything, an easier way to interact with contracts for the average non technical user...</p>"}]},{id:79,name:"Dandelion",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>SourcCred - bounties and reputation for open source work.</p><p>Earn ethereum cred - reputation in the eth ecosystem for different projects</p><p>Fair distro of tokens based on who developed the project</p><p>Analyse history and collect social feedback to refine the process</p><p>Currently a &ldquo;regular&rdquo; web front-end and back-end with plans to move the backend to blockchain in near future after proof-of-concept, doesn&rsquo;t want to host a centralized server</p><p>I am also currently trying to correctly map Github identities to Ethereum addresses. Was thinking about developing an ad hoc key-based style proof, post a specific gist so that you prove you hold the account.</p><p>IPFS & filecoin separate business layer (fs and file retrieval) from incentive layer. Same thing with SourceCred. We want tokens to flow according to a software infrastructure graph.</p><p>Tokens flow according to software dep graph</p><p>Need a fair transparent way for who determines credit for a project. How can we create tools for determining who earns credit in a fair way? Using algo and data collection. Been in Node ecosystem to parse data out of Github. Try to implement Pagerank on files, pull requests, function level, etc. Using TensorFlow for cred.</p><p>Connect GH ids to eth addresses eventually</p>"},{question:"missing_tools",answer:"<p>At core abstractions layer. If SourceCred depends on Foo library. Every time I mint SouceCred tokens, I want to give SourceGrain token to not only contributors to SourceCred but also the Foo library. But in Blockchain it is very difficult to Iterate over all of the objects.</p>"}]},{id:80,name:"David Wolever",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Been working with Spankchain team. Combination of state channels and smart contracts.</p><p>Also worked on smart contract for ICO auction.</p>"},{question:"tooling",answer:"<p>Vim editor, truffle. Metamask.</p><p>Switching over to onenet, using something called Vinos. Under the radar.</p><p>Vinos going to support state channels natively. Will be a little bit less terrible than Metamask.</p><p>Trouble with metamask.</p><p>Interface not well documented.</p><p>Doesn&rsquo;t have promises.</p><p>Had awful error reporting.</p><p>Don&rsquo;t know when someone closes metamask transaction. Had to write logic that says if they&rsquo;ve clicked the button 3 times and we haven&rsquo;t heard back, give them a tooltip. No documentation for that kind of thing.</p><p>Vinos will be iframed, not chrome extension.</p>"},{question:"testing",answer:"<p>First, use Truffle for unit testing.</p><p>Series of scripts for blockchain scraping. Call Truffle to send transactions to testrpc. Script connects to testrpc to make sure the state has been correctly changed.</p><p>Manual testing by running multiple test auctions. Just actually going through the process 40 or 50 times over the course of a week. Started on testrpc and then did it on a testnet with more test users. Even tested on the mainnet a few days before the real auction.</p><p>Tests on the mainnet actually revealed new problems that weren&rsquo;t revealed on testnet</p><p>Because there were hundreds of logs per block on the mainnet, it was too many</p><p>Had to go through and make performance better on mainnet</p>"},{question:"smart_contract",answer:"<p>Front end: nothing really</p><p>Dapp: went through intense reviews.</p><p>3-5 people on a call and would go line by line through the code</p><p>Also hired a couple external audits</p><p>Even after all that, found one bug right before launch (a few days before)</p>"},{question:"missing_tools",answer:"<p>Need a tool like metamask supporting state channels (Vinos will fix this)</p><p>So hard to get insights into what&rsquo;s going on in solidity.</p><p>Debuggers are really hard to use.</p><p>Debugging tests is a matter of just guessing why assertions failed.</p><p>Solidity interpreter would be awesome without having to compile each time, would make development much faster.</p>"}]},{id:81,name:"James Young",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Work primarily with Spankchain, doing state channel research/implementation. Also worked on Adtoken, first production release of TCR.</p><p>I can preface this by saying this was all informed initially by experience with online ads. In online advertising, I had to deal with scalability and scale. Helping run a video advertising exchange on the supply side, on a slow day did 4-5 billion events a day. In online advertising, had to start at scale.</p><p>Before online advertising was in gaming, needed to be 100% in uptime. Game used AWS/EC2 at the time.</p><p>Looked at Ethereum, had scaling problems. Looked at all these initial options early on. In Adtoken, for the TCR did the groundwork for serving ads. Had concept of verifiability.</p><p>Knew about the concept about state channels, was waiting for them. Ethereum community does a great job at being able to explain things and have docs, but lack of production projects.</p><p>Opportunity with Spank chain to hit the ground running and implement into production, learn by doing. Alternative approach with state channels and dove right in. So much invaluable info you learn when you have contact with reality.</p><p>Coming tools for layer 2 tooling. Need to have these standards, but don&rsquo;t quite exist yet.  This is all informed by practical implementation.</p><p>Also work on a DAO that helps multiple projects that need state channels.</p>"},{question:"tooling",answer:"<p>We use Truffle, and Ganache on the web3 blockchain side of things. On traditional web2, use node, Kubernetes, Docker (traditional scaling pipeline).</p><p>Etherscan to verify transactions</p><p>It&rsquo;s a lot of looking at Github issues. Have to support multisig contracts.</p><p>On the front-end React/Redux.</p><p>Rely heavily on Infura, Metamask. Have their own state channel wallet, users fund SpankWallet with Metamask and then they open these other state channel with card.</p>"},{question:"testing",answer:"<p>I test and retest. Wrote the auction contract in Spankchain, the only payment channel auction ever. The contract itself was 150-170 lines (including comments). Had to document well and had 3 audits, but tests were over 2200 lines long.</p><p>This became a distraction. Had to create a testing DSL. Had to test for success and for failure. Had to test for strange modifier behavior. Had to lock myself in a room for a few weeks and think of every possible scenario and test for itself.</p>"},{question:"smart_contract",answer:"<p>We had multiple audits at multiple periods of time. Had to just to make sure that to have a semblance of security, had a bug bounty. Left a subtle bug to make sure audit was legit.</p>"},{question:"bounties",answer:"<p>Getting mainstream users onboarded. Informed by practical problems, just getting ETH. Cold start problems. Ways of getting around this, using Gas Relay. What would be interesting iswhere dApps, applications have pre-funded. EIP-186 where you can have the dApp pay for gas.</p><p>It&rsquo;s going to delve more into identity based solutions. That&rsquo;s what really needs to be worked on, that first-time UX down so a mainstream user can use this. We need to figure out the UI/UX. One click Amazon shopping is the standard. We have to solve the problem.</p><p>This breaks down into two things, part of it is a multisig wallet solution. It&rsquo;s very scary and you have 0 Eth and you&rsquo;re interested in Ethereum, don&rsquo;t lose your private key! This is like Internet cash, but I&rsquo;m used to forgetting my password. Fund recovery for a new user. Once you have value, you can learn about private key, about mnemonic. Funding something that makes multisig easy to use.</p><p>The cold start problem, not having them to pay the initial gas costs when they don&rsquo;t have value. If you can solve those two things, mainstream adoption.</p><p>I think having a dedicated layer 2 talks specifically could be interesting. Layer 2 solutions are the solutions that scale. Get more Layer 2 solution widespread. And then a lot more collaboration between projects. Projects that need Layer 2 solutions could invest into a fund that is a common platform so not everyone does their own solution. To keep it very practical, want to incentivize everyone to share the knowledge. Could start a DAO to automate this, could get some funding via token inflation. They are working on this DAO on the side but there is still some aftermath for the DAO,. Providing this structure to have people come together on projects as opposed to one project.</p>"},{question:"missing_tools",answer:"<p>I wish and a hope there is bachelor&rsquo;s in blockchain. In blockchain, you have to know legal, economics, game theory, some coding, etc. Here&lsquo;s the best curriculum so you can understand for yourself, is this mechanism design good. Some cryptography. Need to be able to give people the fundamentals. Need a broader view, not just technical.</p><p>This is why it&rsquo;s so fascinating, you can go down so many rabbitholes. It&rsquo;s intimidating, if you had a set course curriculum with the basics. Here it is, it&rsquo;s starting to happen. Cryptoeconomic primitives. Teach people beyond the code. Allow people to draw their own conclusions.</p>"}]},{id:82,name:"Doug Hoyte",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Doug Hoyte, working on sportcrypt.com, a sports betting exchange. I've also consulted on a few other ethereum projects.</p>"},{question:"tooling",answer:"<p>web3.js, ethereumjs-util, solc, testrpc, parity --dev, metamask</p><p>Overall it's pretty easy to get started, which is nice. For dislikes see next question.</p>"},{question:"testing",answer:"<p>Custom test harness, could never figure out how to get truffle to do what I needed</p>"},{question:"smart_contract",answer:"<p>Trying to keep everything as simple as possible, reduce attack surface, minimise dependencies, the usual. We have a pretty comprehensive test-suite, and perform white-box invariant tests after every interaction.</p>"},{question:"missing_tools",answer:"<p>Hmmm, a good light client implementation so everyone doesn't centralise around infura/etherscan, although that ship has probably already sailed</p>"}]},{id:83,name:"Ricardo Guillerme Schmidt",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Development of smart contracts for Status.</p><p>Can also do some web3 integration with javascript, but I have not really dug deeply into that.</p><p>I want to work on DAO&rsquo;s that have delegation proxies so that you can trust an expert to vote for you.</p><p>Oraclize but too expensive.</p><p>TrueBit but not available.</p><p>Zokrates or some other solution also a possibility.</p>"},{question:"tooling",answer:"<p>Microsoft VS code, Git, Remix for manual tests, Truffle, Parity.chain for testing, Mist & Parity on Ropsten for development</p><p>I gave up on Ganache - too much variability between that and live environments.</p><p>If not already mentioned, are there any libraries you rely on regularly?</p><p>Not really, mostly backend.</p>"},{question:"testing",answer:"<p>Automated testing?</p><p>First develop the smart contract.</p><p>Manual test with Remix is the first step.</p><p>Ethercamp IDE was really good, but now it&rsquo;s too old.</p><p>The new tool for Eclipse might be good but it&rsquo;s only on Windows.</p><p>When it looks like it&rsquo;s working, write some truffle javascript unit tests.</p><p>Usually spotting bugs happens in manual tests and truffle unit tests are just for making sure it&rsquo;s good.</p><p>Remix debugger is very useful, but it&rsquo;s missing some features.</p>"},{question:"smart_contract",answer:"<p>No major process. &ldquo;This function should do one thing. Only that. If it can be used to do anything else, that&rsquo;s a problem.&rdquo;</p><p>I saw that the Parity library didn&rsquo;t have the owner set. But I think other developers should write the code so that this is impossible.</p>"},{question:"missing_tools",answer:"<p>Would be very good if VScode had the same thing that remix had - i.e. an actually Integrated IDE.</p><p>Would use only remix, but it&rsquo;s horrible to use with multiple folders and things like that. Remix is only good at small projects but wants it for big projects. Connecting with RemixD can often mess up all your files.</p><p>Solidity can&rsquo;t return arrays or variable length values. Knows there is some solution with assembly but it&rsquo;s too ugly.</p>"}]},{id:84,name:"Richard Ramos",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Smart contract developer at Status, also working a lot on Embark.</p><p>Background: I came out of TransUnion and the financial industry.</p><p>I write smart contracts mostly related to SNT use cases: Tribute to Talk; smart contracts to control spam; a set of contracts related to identity and recovery and to allow users to register their Status ENS domain.</p>"},{question:"tooling",answer:"<p>Embark, obviously!</p><p>Not just a framework for web applications - it lets you create properly decentralised applications.</p><p>You can build an app and then forget about the process of uploading to distributed file stores and setting up a lot of the infrastructure.</p><p>Embark uses web3js-1.0, which is useful because there are a lot improvement encapsulated in that library. I like the style of coding you have to use - promisfying everything, every communication with EVM is done asynchronously.</p><p>VS Code locally and Remix to test contracts.</p><p>Working between them and copy-pasting between can be a real hack though. So, I start on Remix and once I am sure it is working and stable enough, I move it into VS code.</p><p>Sometimes I also use Truffle because I like the debugger they have.</p><p>A lot of tools from the JS ecosystem: node-js, React, webpack.</p>"},{question:"testing",answer:"<p>Mostly through unit testing in Embark. I created a new feature for it (not yet released yet) that lets you create a small scaffold for the unit tests you need for any given contract.</p><p>After executing that functionality I can then populate the code for each individual test, and this saves a lot of time.</p><p>Not really using verification tools right now.</p><p>Handle code coverage with solcoverage.</p>"},{question:"missing_tools",answer:"<p>If I want to build things that are secure AND cheap to use, this is really difficult because we don&rsquo;t have an existing scaling solution.</p>"}]},{id:85,name:"Bob Summerwill",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Been involved with the Ethereum community since 2015. Worked for Foundation, and then for Consensys, then at Sweetbridge. Bootstrapping current efforts.</p>"},{question:"tooling",answer:"<p>Most of his work has been on the platform work itself or on the community side. Truffle and Remix are the leading things. Embark and Populus, a little bit. Metamask, very important. Mist not so much, it really needs a bullet in the head. Was a good idea 4 years ago. No one wants a desktop browser.</p><p>Mist was meant to have a dapp store and everything, and was meant to configure it. Brave killed it. MyCrypto and Metamask were really underestimated at the start.</p><p>Infura is absolutely essential, that&rsquo;s just fabulous.</p><p>Looking forward to in-browser client. Parity bridge that pushes block data into IPFS, JavaScript for IPFS. In-browser client, lightest of light client. Don&rsquo;t reconstruct the whole thing locally. Primarily Metamask driving this. Ride on top of libp2p instead of devp2p.</p>"},{question:"smart_contract",answer:"<p>As good as that gets right now, there are various guides to best practices. Consensys has a really good one. Leaning on Zeppelin, Consensys Diligence, zklabs. Fairly small amount of people that have expertise, real dearth of people.</p><p>Consensys Diligence was super swamped for requests right at the start. Pay someone to stop working on their project.</p>"},{question:"bounties",answer:"<p>Work for GUI&rsquo;s, development tools for GUI&rsquo;s. Can we get to a level where Visual Studio/Visual Studio Code/ Atom? Interactive debuggers is absolutely #1. Single stepping through it.</p><p>On Truffle, you can do with smart contract debugging. Because you don&rsquo;t have external inputs, you&rsquo;re not reading from inputs, no keyboard. The path is completely deterministic. Scrubbing backwards is quite simple, rewind is entirely possible. That kind of tooling could work.</p><p>Back in the day, there was Mix. Was a sort of debugger, but their own IDE really. But how much maintenance was this? But this is where Remix came in. With Truffle it&rsquo;s all low-level, command liney stuff. Need to add value for normal developers.</p>"},{question:"missing_tools",answer:"<p>Interactive debugging. Truffle and Remix have started to have little bits for that. What you really need is a nice GUI debugger. VSCode or Sublime, you need step-in debugging. Visual Studio would be ideal, step in and step out.</p><p>Profiling, gas counting. Doesn&rsquo;t exist. Anything with performance or gas counting, metrics and analysis stuff.</p><p>On FIFA, what was so incredibly involved was doing instrumented builds and then delta. Seeing memory use go up by this amount, objective before and after measurements. Having this instrumented data to go in. Automated builds is like &ldquo;Whoa, what the fuck happened to the gas count there?&rdquo; Some change was made. Costs are a huge consideration for smart contracts.</p><p>Standard libraries and frameworks. Need to not have people writing low level stuff, it should be common and it&rsquo;s hard and easy to fuck up. People shouldn&rsquo;t be writing this. The primary innovation for mature languages are the standard libraries, don&rsquo;t write a string class or math class.</p>"}]},{id:86,name:"Yaniv Tal and Brandon Ramirez",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Yaniv and Brandon from The Graph, query protocol for getting data off blockchains and storage networks</p><p>Focused on research and protocol design</p><p>The issue is that Ethereum nodes do not maintain a lot of indexes, if you&rsquo;re using the JSON RPC you can&rsquo;t run queries on smart contract state. A lot of time, people need to transform the data. The way they&rsquo;re storing data onchain is not how to they want to pull that data out</p><p>The Graph is a Layer 2 protocol that sits on top of Ethereum that builds those indexes that makes all that data available via GraphQL.</p><p>GraphQL has become really popular in the web and mobile community, substantial improvement over REST API&rsquo;s. Gives you flexibility so you can make changes to UI so you don&rsquo;t have to make changes to the back-end. Having this query language on Ethereum is great.</p><p>GraphQL is a natural fit for blockchain. If you don&rsquo;t have a centralized infrastructure in the mix, GraphQL can make a lot of sense for this.</p>"},{question:"tooling",answer:"<p>Been using Truffle for Solidity. Remix on occasion. Etherscan on occasion. Looking at already polished contracts.</p><p>Use Parity and Geth, use Parity a lot as a Rust shop.</p><p>All over the place with IDE, Atom, Visual Studio Code. Atom not good for writing a lot of Solidity code, only one guy is maintaining the linter for Solidity for Atom.</p><p>Haven&rsquo;t been doing so much dapp development recently. Are looking into ZeppelinOS contracts, started using Aragon for contract codes.</p><p>Struggled with Aragon at ETHBA hackathon, they made a lot of changes before the Hackathon that threw them off a lot. Overall like APM, spins up IPFS node, like the upgradeability.</p><p>APM (Aragon Package Manager) is not just for Aragon contracts, is statically linked to contracts on the blockchain.</p>"},{question:"testing",answer:"<p>Write a lot of tests, try to make them as comprehensive as we can.</p><p>Think we use Truffle for writing the tests, all in JavaScript. Home rolled their own utilities. Don&rsquo;t have anything for test coverage.</p><p>For end-to-end testing, would be nice for good tooling for this. Kind of pain in the ass to test other systems that interact with the blockchain.</p>"},{question:"smart_contract",answer:"<p>Instead of statically linking contracts, you find the library that already has what you want and you call functions on this blockchain. This is pragmatic from the gas standpoint but raises security questions on the dependency.</p><p>So far still statically including everything, would like to do more including things dynamically. But not comfortable with existing solutions.</p><p>But stuff we include statically we have to audit ourselves.</p><p>Haven&rsquo;t deployed anything on Mainnet for The Graph, but are talking to firms that specialize in auditing. Want to do a full rigorous auditing.</p><p>Do a little bit of social proof, use things widely used by the community.</p><p>For dependencies, still just in development so have been pretty loose with it. Have been using OpenZeppelin, widely used 3rd party libraries.</p>"},{question:"bounties",answer:"<p>We need to ask, what are the barriers to dapps going to mainstream? Scalability, and how to make transactions fast and cheaper.</p><p>Useability around things like wallets, like Metamask, is also a problem. As people have to approve things, it&rsquo;s not a good UX. Not designed for microtransactions or to handle cases where a bunch of transactions only go to 5 dollars worth of ETH. This would be tooling. Plugins that would support payment channels (like Next) and state channels with the recent L4 paper. This needs to be integrated into the UI/UX. Set the budget, authenticate in an easy way (finger print), and in a secure way to have it do a payment channel and eventually state channels.</p><p>LastPass or OnePass, weird to me that they haven&rsquo;t moved into this space yet. Status could solve this on mobile. 99% of mainstream people won&rsquo;t use Metamask.</p><p>For Open Source Block Explorer, the big problem is around collaboration. Problem is how to solve the problem around the nodes and to incentivize this.</p>"},{question:"missing_tools",answer:"<p>Pretty common for people to develop contracts locally but don&rsquo;t really know what gas costs are, and then they deploy to testnet and Mainnet and are surprised. Compile time tool for estimating gas. Embark 3.1 has a Profiler :)</p><p>I know people are working on different types of debuggers, that&rsquo;s a big one. It works well in Remix, but if someone integrated this in Atom that would be pretty great.</p>"}]},{id:87,name:"Sina Habibian",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I started in January or February of this year, and used a tutorial on Medium for creating a voting system.</p><p>Interesting because the tutorial was already out of date by that point.</p><p>Working on TrueBit. A few smart contracts:</p><p>TrueBit core incentive layer: tasks workers who do computation off-chain</p><p>Web-assembly interpreter in solidity</p><p>Building a bridge between dogecoin and Ethereum</p><p>Haven&rsquo;t really started on any front-end stuff for these things.</p><p>Interactive Coin Offering protocol that TrueBit did</p>"},{question:"tooling",answer:"<p>Vim with solidity syntax highlighter, truffle and travis for tests</p><p>Running into problems with truffle on the current project</p><p>Zeppelin&rsquo;s libraries for safe math and tokens. Using some JS state machine libraries for the client.</p>"},{question:"testing",answer:"<p>Truffle and Javascript unit tests</p><p>First person to build the contract didn&rsquo;t use truffle, so built his own complete testing system.</p><p>Built own testsuite because truffle wasn&rsquo;t configurable enough for my needs: it was running into issues as the complexity of the smart contracts grow</p><p>Deploy things to testnet. Though it&rsquo;s true that there is a limited amount of benefit from deploying to testnet. It that doesn&rsquo;t really test stuff like vulnerable attack vectors or incentive misalignments</p><p>Better to do real testing on the mainnet under a public Beta, using real ETH</p>"},{question:"smart_contract",answer:"<p>A bunch of upfront discussions and security analysis.</p><p>Then writing tests.</p><p>Security audit, bug bounties</p><p>Then, we will run a beta on the mainnet</p>"},{question:"missing_tools",answer:"<p>Testing is so important in this space, but testing is so painful and so slow.</p><p>No good debugger!!</p><p>Slow testing and debugging slow down your whole cycle.</p>"}]},{id:88,name:"Truffle Team",matchedIndex:-1,interview:[{question:"tooling",answer:"<p>Chris:</p><p>The closer you are the foundation of the stack, the less pain you feel.</p><p>We probably cause the pain.</p><p>There&rsquo;s a disparity between demand for infrastructure, and supply of engineers working on it.</p><p>I love web3 & Solidity &ndash; good open-source projects, fantastic engineers.</p><p>What I do day-to-day: development of Truffle.</p><p>Nick:</p><p>Disparity between engineers using the tools & engineers using them.</p><p>The demand for mature projects has stepped up</p><p>These tools, Truffle included, are struggling to handle mature projects, mature teams, mature practices. It&rsquo;s great when people are building proofs of concept though.</p><p>The requirements are coming in pretty fast</p><p>What I do day-to-day: Truffle debugger; development of Truffle</p>"},{question:"bounties",answer:"<p>Set of tools: linters & coverage tools</p><p>Critical, have mostly been worked on volunteer basis.</p><p>Needs ongoing support; needs to adapt to changes in the stack (Solidity, Web3, &hellip;)</p><p>Should be platform agnostic, should not assume that people are using Truffle, should work with dapphub.</p><p>Leonid Logvinov wrote a 0x code coverage tool.</p><p>bounty: making a next-gen coverage tool, that can be consumed by any platform or into your tooling.</p><p>Code coverage is absolutely critical from a security point of view.</p><p>The existing system is fragile, and only has two devs working on it part-time (?)</p><p>People to talk to: Christopher Gewecke, Alex Rea (works on Solidity coverage), Leonid Logvinov (0x coverage tool)</p><p>Chris wrote the code coverage tool before joining Consensys, it&rsquo;s a volunteer project.</p><p>There are also more sophisticated audit tools: Mythril by Consensys (Bernard Mueler), Oyente maintained by MelonPort is another one.</p><p>Tracing / gas-profiling?</p><p>We would like to add this kind of stuff to ganache.</p><p>Remco Bloemen working on gas-profiling.</p><p>Bounty: support for hardware wallets in Metamask</p><p>Web3 has their provider engine.</p><p>Better key management support on the web3 level.</p><p>Metamask also wants to have Ledger support.</p>"}]},{id:89,name:"Preethi Kasireddy",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I&rsquo;m the founder and CEO of Trustory, an app that&rsquo;s built on the blockchain. App for users to create stories, and stories get validated using a cryptoeconomic game. Stories are claims that people are making!</p><p>Before that, I was doing independent development and was an engineer at Coinbase for a while.</p>"},{question:"tooling",answer:"<p>With Ethereum, for Trustory, we will write smart contracts in Solidity but maybe also make extensive use of Go.</p><p>Tendermint Consensus engine to build our sidechain with.</p><p>Other Cryptolibs TBD.</p>"},{question:"testing",answer:"<p>For JS, Mocha/Chai. In the past, used py-ethereum. For now, TBD.</p>"},{question:"smart_contract",answer:"<p>In the past, OpenZeppelin. Don&rsquo;t think we&rsquo;ll use them again because they are a bit pricey.</p>"},{question:"bounties",answer:"<p>Testing and debugging!</p><p>Key management stuff.</p>"},{question:"missing_tools",answer:"<p>Debugging. We don&rsquo;t use Truffle, and if you&rsquo;re not using Truffle, it&rsquo;s kind of impossible to debug your contracts. Truffle is not the future, it feels very restrictive. If you&rsquo;re not using Truffle it&rsquo;s difficult.</p><p>Testing. Surprised that there is no native tester for Solidity yet. Good examples to test using pyethereum or some other library.</p><p>Key management and key generation, for people that are not security experts. Right now, some people are using BIP39, some people are using other stuff. It&rsquo;s a mess. We need to decide what the standard is and make the examples around it.</p>"}]},{id:90,name:"Alexey Akhunov",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Been in Ethereum since the beginning. Was following the PoC. Mined few blocks on his home computer.</p><p>Initially ran geth, then parity, then geth again.</p><p>Geth said it would be more like a library.</p><p>6 months ago, moved to doing Ethereum dev full time.</p><p>Did security audits &ndash; gets tedious &ndash; smart contract are usually short. But comes with more stuff &ndash; server-side, etc</p><p>Now: playing with the go-ethereum code, trying to optimize it.</p><p>People talk about sharding, Casper, etc will fix everything; but that won&rsquo;t solve everything without optimizing everything.</p>"},{question:"tooling",answer:"<p>Geth.</p><p>Can pass in --cpu-profile</p><p>Uses basic stuff that comes with Go: PProf.</p><p>Go has in-built tool to open this file.</p><p>Can generate dominator tree -> whole graph of traces vs times. Shows which nodes are dominating.</p><p>My workflow:</p><p>Change code.</p><p>Run geth with --cpu-prof</p><p>Generate graph from .prof file.</p><p>Run on cloud overnight.</p>"},{question:"bounties",answer:"<p>Unification of testnets[a].</p><p>Rinkeby & Kovan are still incompatible.</p><p>I wanted to write this myself, write Kovan implementation in Geth?</p><p>I hate that everything in the smart-contract ecosystem is written in Javascript &ndash; e.g. Truffle. People then use truffle bindings in production.</p><p>Native go tooling. Native go contracts.</p><p>I tried to do javascript auditing. And it is virtually impossible without safety of types. There&rsquo;s a lot of dependencies; it&rsquo;s really hard to check everything.</p><p>Specific: where the web-server is written, not in JS, but in a compiled language: should bind directly to the smart contracts, instead of going through JS bindings. Use go-bindings.</p>"}]},{id:91,name:"Simon de la Rouviere",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I have been in blockchain since 2013 working in BTC. I have always looked at this stuff as a tool to enable creators, so I built an app that let people sell digital goods for BTC.</p><p>Started building on Ethereum when it was announced in 2014, and then more actively late 2014, working in the stack.</p><p>Currently most time on: Ujo music - decentralized licensing platform for musicians.</p><p>30% of time on Curation Markets - monetize new networks of value and coordinate toward shared goals.</p>"},{question:"tooling",answer:"<p>I am the smart contract lead at Ujo, so spend most of my time writing Solidity and tests.</p><p>Writing tests in Truffle and to deploy contracts.</p><p>Generates helpful build file with info about deployment that can then be ported into any frontend app through a simple JSON file that can have multiple networks and contracts specified in it.</p><p>Sometimes use Remix, mainly for catching syntax errors more quickly (than Atom at least, my other IDE). Works well for quick interaction (using MetaMask) with smart contracts.</p><p>Just truffle&rsquo;s contract libraries to interact with frontend</p><p>Use Oraclize for on-chain price oracle for Ujo stores.</p><p>Strings library built by Nick Johnson that helps us parse strings in the registry more easily.</p><p>Wrote our own ERC-721 implementation as well.</p><p>After CK came out, there was no fully standardised implementation. The community was still iterating over the standard, OZ also wrote one. There were some stylistic changes that Consensys wanted over the OZ work, so we still needed our own implementation.</p><p>Also just helps with my own understanding to write this stuff myself.</p><p>Curation market specific tools?</p><p>Trent from Ocean Protocol is pioneering the engineering approach to analysing token systems using well known tools from his trade that I don&rsquo;t understand as well as he does.</p><p>We use a lot of different curves for curved bonding markets, and there are some curves that are more easily visualized and assessed.</p><p>xkcd graphs makes some interesting and easy to understand stuff.</p>"},{question:"testing",answer:"<p>Mythril is very useful and we use it.</p><p>Writing extensive unit tests in Truffle covers a lot of the low hanging fruit and gives you a great understanding of your contracts and how they really work.</p><p>It really depends on the use case: i.e. checking for over- or underflow means you sometimes need to be really careful.</p><p>Best resources to learn about tests?</p><p>The EVM is notoriously bad at providing good error reports.</p><p>Revert with reason will be really helpful for this. But there might still be edge cases where it is not certain what transpired.</p><p>You used to require a lot of context in order to sense what</p><p>A lot of my knowledge comes from debugging myself and following the traces through the EVM. Sometimes you just have to vasbyt (an Afrikaans word meaning, roughly, grit your teeth and just hold on).</p><p>Solidity is moving more towards safer defaults in general, which allows more advanced devs to take the guard rails off when we know what we are doing:</p><p>Explicitly setting the constructor (to avoid some of the Parity hacks)</p><p>Addition of transfer function to automatically check for failure of sends (which was previously manual).</p><p>After DAO hack, I started collecting information and Smart Contract best practices repo, which is now maintained by the Consensys Diligence team.</p><p>Infura uses a load balancer between multiple Eth clients, but these have different tx pools, so during the migration process, it is pinging infura, but it is shuffling the request to different node each time, which eventually cause the migration to fail.</p><p>However, the error reporting from the client claims that the nonce is too low, which is technically true, but not at all descriptive about why the migration actually failed.</p>"},{question:"bounties",answer:"<p>Autonomous artist blueprint has existed for more than a year. Someone just needs to copy-paste and build it: https://medium.com/@simondlr/lets-summon-an-autonomous-artist-a-bot-that-creates-owns-and-sells-its-own-art-ada1afad086a</p><p>A lot of curation market stuff: usage, governance and management of the community.</p><p>There are different interesting ideas around this. Dmitry from Ocean proposed a model where a bounty is funded collectively, then it graduates to an NFT after a certain threshold. Will go back to him for more details on this.</p><p>The usage of curved bonding for network effects on bounties: let&rsquo;s say Status wants to issue a bounty. The buy Status bounty tokens on a curved bond, backed by SNT or Eth. This is valuable because, over time, if Status only uses Status bounty tokens for their bounties, you slowly build up a network effect around that token. Can either sell out or hold the tokens if you believe more people will fund more bounties in the futures. This allows people to speculate on the work being done in Status - it is a really a super-powered donation though.</p><p>It&rsquo;s kind of like network effects for investment or VC.</p>"},{question:"missing_tools",answer:"<p>One thing that comes to mind is a mature, incentivized storage platform does not really exist, still. Swarm has never really answered my immediate needs, and I worry sometimes that it is a bit too similar to something like S3.</p><p>Wouldn&rsquo;t need to solve all problems immediately, just needs to be better than what we have today. Infura provides access to the IPFS network, and then backs them up themselves so that they have guaranteed access to it. Which is good enough, for now.</p><p>In the future, if you&rsquo;re going to have 1000&rsquo;s of GB of media, this will need to be looked at much more closely.</p><p>Protocols labs multi-hashing scheme is very useful in addressing the content.</p>"}]},{id:92,name:"Alvaro",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>VirtuePoker &ndash; offchain game, smart contracts to represent state of a poker game &ndash; offchain consensus of consensus, and submit to onchain.</p><p>Building poker with Ether, that can be played without an intermediary.</p><p>When you leave the table, you cash out with the stake which you have left</p>"}]},{id:93,name:"Javier Franco",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>VirtuePoker &ndash;&ndash; making the migration to the new problem.</p><p>We have a Proof-of-Concept on Python; implementing in Electron.</p><p>Talking to Plasma, to use for scaling and also gas costs. This is a big problem.</p><p>The poker game actions are all done off-chain; the money stuff is on-chain. The winner reports the results. This is on-chain and expensive. Even reporting on the results costs $1.</p><p>Offchain stuff:</p><p>P2P network between all the peers &ndash; just a centralized API right now. Later want to be p2p without a server, but could have attack vectors with people listening in.</p><p>Building the backend &ndash; regulatory process &ndash; if you lose a hand, but thought you won, you should be able to call in. Also to prevent collision. View patterns.</p>"},{question:"testing",answer:"<p>Testing our Dutch Auction ICO contract:</p><p>We were targeting 100% code coverage.</p><p>The contract allowed ICO to stop in two ways:</p><p>By hitting the market cap</p><p>By calling stop (?)</p><p>The time between the auction being finished, and the tokens being claimed, you want 7 days.</p><p>This is equivalent to 30k blocks.</p><p>How to test? You hardcode lower numbers, test (which is slow), then switch in the real numbers.</p><p>What a solution for this would look like:</p><p>These tools could have a way to mine the number of blocks you want, instead of block-by-block.</p><p>Stress-testing the economics & game theory of ICO contract:</p><p>To be able to bid, you need to be whitelisted. Then, the amount you bid is also limited.</p><p>Solidity:</p><p>It&rsquo;s a simple language. Not very complex. Problem is you have to be very strict about testing everything; not even leaving a single line of code without coverage.</p><p>E.g. Parity bug. All contracts where using the same contract.</p><p>E.g. if you want to use an external function of a contract, and that person kills the contract, you are screwed. Kinda like someone deleting an NPM package you depend on. But there&rsquo;s no roll back.</p><p>We are moving towards factory or library-driven contracts.</p><p>We will have a proxy contract.</p>"},{question:"bounties",answer:"<p>How to simplify the way to calculate the gasPrice.</p><p>Having an estimateGasCost when you send a transaction?</p><p>A lot of people have trouble when sending a transaction with a low gas cost, doesn&rsquo;t get accepted &ndash; but you can replay the same tx with the same nonce with higher gas price and overwrite</p><p>Wallets need to implement this, it would help a lot of people.</p>"}]},{id:94,name:"Rick Dudley",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I worked on EthPM briefly.</p><p>I gave up in frustration</p><p>I was working at Monax at the same time with RJ and Jan.</p><p>This is a good bounty that we&rsquo;re going after.</p><p>Bigger problems within EthPM:</p><p>Fundamentally, in Ethereum, we have contract immutability.</p><p>If I take the same bytecode and deploy it to two different networks, it&rsquo;s going to have different hashes. So how do I reference the code across my local, testnet, and mainnet environments? How do I reference that in my dev environment? -> the contract address won&rsquo;t be the same.</p><p>Working on at the moment?</p><p>VulcanizeDB with Maker as their client.</p><p>Steps:</p><p>Take IPFS (the content-address allows you to verify the content is correct) and retrieve the data</p><p>SQL query &ndash; you do a search given parameters and you get back a result set.</p><p>Because you trust the database is free of faults.</p><p>Vulcanize: our result-sets contain content-addressable data.</p><p>ETL system for blockchains.</p><p>Pull blockchain data into a Postgres database &ndash; load all blocks, transactions, tx receipts.</p><p>You as an engineer write a transformation &ndash; which also generates a GraphQL endpoint.</p><p>Your dapp can then pull that data on an ongoing basis live &ndash;&ndash; pubsub, polling, &hellip; The data is also content-addressable.</p><p>e.g. you put the events for a contract into a table, you have a block range, a contract, in this table</p><p>Then, you take that table, do a pg_dump, and put it into IPFS.</p><p>You can then verify that using your own client.</p><p>Github / vulcanize / vulcanize.db</p><p>Will be released soon.</p><p>Will eventually write a DSL for those transform.</p><p>Standalone vulcanize db reads from one node, but can gossip the transformed to other nodes.</p><p>Interactions with IPFS, Tendermint, Lightning, &hellip;</p><p>Federated exchange &ndash; decentralized exchange</p><p>Once you have that system; then the Tendermint validators can have a system marketing</p><p>Tendermint validators can be bonded on Ethereum AND they promise to route the Bitcoin HTLCs</p>"},{question:"testing",answer:"<p>I like the DappHub stuff; but it&rsquo;s not fully integrated.</p><p>There isn&rsquo;t a full testing suite; no way to go from the Solidity integration tests, to full-stack integration tests.</p><p>Casey Detrio worked on testing & fuzzing within Ethereum Foundation codebases.</p><p>But they don&rsquo;t run simulation networks on updates, so there could be consensus breaks.</p><p>For instance, the airline industry does this. Airlines use BFT within fly-by-wire systems.</p><p>Check out: videos from SQLite author explaining how they did testing.</p><p>Our testing:</p><p>We use both Zeppelin and Dapphub.</p><p>Phantom-js test of something that uses IPFS and Ethereum.</p><p>Monax had a lot of great tools, that didn&rsquo;t get the attention they deserved in the community:</p><p>Counterintuitively, the federated context has higher security requirements. Your clients ask tougher questions than ICO token buyers.</p>"}]},{id:95,name:"Evan Van Ness",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Have only ever played around very early, but never built anything seriously</p><p>Personality isn&rsquo;t suited to writing bug free software, which is what you have to write in this space, and not a serious enough developer</p><p>The idea of writing code with actual value attached to, direct value that you can never take back in the case of an error.</p><p>I&rsquo;m glad others are developing, but I would lose too much sleep.</p><p>I run the Week In Ethereum newsletter, and has become a full time job at Consensys.</p><p>Close to 40hrs a week to curate</p><p>Do a podcast as well.</p><p>Moderator of r/ethereum</p>"}]},{id:96,name:"William Entriken",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Started using Ethereum in December.</p><p>Created ERC721/161 to support my project. It was contentious, I won the fork wars.</p><p>Underestimated how crazy this ERC721 process was.</p><p>721 is the first standard that&rsquo;s actually an Interface.</p><p>Interfaces are broken in Solidity.</p><p>Started filling bugs in Solidity. &ndash;&ndash; interfaces should be able to inherit from interfaces.</p><p>External vs public in interfaces. I fixed it.</p><p>Fixing things in Solidity &ndash;&ndash; basically rewriting the whole inheritance model in Solidity.</p><p>In 721, I had a caveat section, &ldquo;errors in Solidity etc&rdquo; &ndash;&ndash;</p><p>People said: &ldquo;the standard shouldn&rsquo;t say a function is payable&rdquo; &ndash;&ndash; but I said that the interface needs to enforce this.</p><p>Got the attention of Christian, Alex, Hudson.</p><p>721 had a dependency on 165. So I started to fix 165.</p><p>Mainly occupied with full time job, speaking re: 721 and its use cases at conferences, evangelism, million dollar homepage, navy, google, hardware (semiconductors)</p><p>Big open-source guy, worked on KDE project, worked in semiconductors.</p>"}]},{id:97,name:"Christopher Goes",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Wyvern is an application agnostic protocol for exchange of transactions, not tokens</p><p>Parameterisable orders - kitties with blue eyes, discovery mechanism</p><p>NFT, bonds, collateralized debt obligations, pools of cats, where people care more about the  parameters of the asset</p><p>Buying and selling of smart contracts. Use case- rental of smart contracts in exchange for fees</p><p>Like the 0x for transactions, ethereum assets</p><p>Proxy account system where users create DEX orders that execute transactions under specified conditions.</p><p>Abstracting over Ethereum bytecode - anything you can send over eth transaction you can buy/sell</p><p>Mostly written in January 2018</p>"},{question:"tooling",answer:"<p>Solidity, Typescript, Truffle for deployment, JS front end</p><p>Bytecode checking handled by libraries</p><p>Bytecode of your order (constructed in UI) is checked vs orderbook</p><p>How are you building the front-end to construct bytecode?</p><p>https://exchange.projectwyvern.com/</p><p>Wyvern schemas library maps bytecode to visual representations</p>"},{question:"testing",answer:"<p>Oyente</p><p>SolCoverage is super useful</p><p>Javascript tests</p><p>Current experience writing tests in solidity is terrible. Could be better with a better interpreter.</p><p>Current static analysis tools focused too heavily on reentry bugs, post-DAO</p><p>Security audit on Wyvern revealed that a non-zero contract balance tool</p><p>More edge cases needed between Solidity and EVM gotchas</p>"},{question:"missing_tools",answer:"<p>Local, easy Solidity interpreter</p><p>Currently, tests are done on EVM through a blockchain</p><p>Most things you&rsquo;re testing don&rsquo;t rely on blockchain features (timestamps, block # etc.)</p><p>Easy interpreter that runs locally on computer not through ganache</p><p>Also, Better gas measurement- line by line gas cost analysis</p><p>His workaround was using solidity assembly code (well documented)</p><p>User account experience would be better if people used contracts instead of standard accounts</p><p>Wyvern already uses user-owned smart contracts as their user account</p><p>Instead of ERC-721 way (smart contract approved to spend your funds). If users had proxy accounts, they could create global limits on spending of tokens. Wouldn&rsquo;t need to track approvals via various individual contracts.</p><p>Custom rules for fraud detection/reversal could be set up (i.e. double confirmation/ time period required for transactions > $xxxxx)</p>"}]},{id:98,name:"Matt Condon",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Built a raffle contract, but didn&rsquo;t ship it because I didn&rsquo;t want to deal with real money in early 2017</p><p>First thing I shipped was steak.network</p><p>Now building XLNT and gnarly</p><p>Solidity contracts.</p><p>Off-chain clients.</p><p>Frontend interfaces for blockchain-backed stuff.</p>"},{question:"tooling",answer:"<p>Truffle, Infura, MetaMask, Etherscan, Remix, Solidity flattener.</p><p>If not already mentioned, are there any libraries you rely on regularly?</p><p>Web3, BigNum, moment, Numeral, Chai, Mocha</p>"},{question:"testing",answer:"<p>Try not use truffle test.</p><p>Never written a solidity test, but written a lot of JS tests.</p><p>Also do some manual integration tests using Remix to deploy to Ganache or something. Using remix for this testing.</p>"},{question:"smart_contract",answer:"<p>Nothing, no real process besides following best practices.</p><p>Gets auditing. Should be running Mythril but hasn&rsquo;t set it up yet. They have a great blogpost on finding unchecked self-destruct.</p>"},{question:"missing_tools",answer:"<p>Truffle has a lot of rough edges (documented elsewhere)</p><p>Gas profiling</p><p>Interactive debugger that works</p>"}]},{id:99,name:"Ramon Recuero",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Last summer, developed Redis on Ethereum. Simple to read & write data.</p>"},{question:"testing",answer:"<p>Redis had the smart contract. Made an npm library; had Truffle tests + npm tests.</p>"},{question:"smart_contract",answer:"<p>Found a list of the top 10 security vulnerabilities; reentrancy, math overflow, ...</p><p>You don&rsquo;t know what you don&rsquo;t know.</p><p>How to find info:</p><p>Google / reading about the DAO hack / Reddit.</p>"},{question:"bounties",answer:"<p>Having difficulty in hiring people &ndash; most engineers don&rsquo;t understand blockchain.</p><p>Don&rsquo;t have much to show for it right now.</p><p>SoV</p><p>Infrastructure needs to get exist first.</p><p>Lack of use-case, to be honest.</p><p>Explaining the data model for blockchains:</p><p>E.g. similar to: Dan Abramov: Redux devtools on the right.</p><p>Making an interactive demo of data flowing through.</p>"}]},{id:100,name:"Facu Spagnuolo",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I studied Computer Engineering and am a full stack dev. I started my career by programming web stuff and distributed systems.</p><p>A year ago I had heard a lot about BTC and &ldquo;blockchain&rdquo;, so I got involved.</p><p>My life goal is to build the technologies that will make people&rsquo;s lives easier and more free.</p><p>Cryptocurrencies clearly can do this, but Ethereum specifically - because of the community, and the fully functional VM on a chain - is clearly the best platform we have so far.</p><p>I knew Manuel from before, and so got together with him and decided to start building some tutorials and interaction guides to walk people through the same forests I was exploring. Started contributing to Zeppelin as a security researcher, because that is the major focus at the company.</p><p>This gave a lot of background as I really had to grasp how thing happen in the EVM. You have to be incredibly conscious and attentive about the stuff you&rsquo;re programming.</p><p>Auditing well-known projects also really helped me grow my knowledge of how the whole ecosystems works and what the best practices are.</p><p>I am now building Zeppelin OS - upgradable smart contracts, with a scheduler, and on chain standard libraries.</p><p>It&rsquo;s a huge challenge to build this on Ethereum currently, so I became a core member and we are releasing our first version today!!</p>"},{question:"tooling",answer:"<p>Truffle - I don&rsquo;t really like it, but have to use it.</p><p>We can improve a lot of things here and build some more things on top of it.</p><p>Testing your contracts easily across any network and setting your own defaults through the console is not as easy as it should be.</p><p>Truffle scripts allow you to deploy your application, but the truffle environment itself is very difficult to manage, especially if you need to modify it to fit your specific project. You can lose days trying to do that.</p><p>We should start thinking about providing an interface that can be consumed, extended and used by other cmd line tools, and things like zeppelin_OS.</p><p>The testing environment is really good, but could still provide some extra features (like better debugging and changing variable easily between tests without needing to recompile everything).</p><p>I haven&rsquo;t yet found one chance to run the debugger properly - but we really need that and it really needs to be easy to use.</p><p>When I try to debug my contracts on the network, I start logging events on the smart contract to see what is happening. This is really slow, it is a waste of gas and is not the way I want to handle things in the future.</p><p>We also use open zeppelin a lot in our own projects: i.e. DApps we build ourselves, and zeppelin_OS - an on chain version that can be used as a standard library for zeppelin OS.</p><p>Currently you have to deploy manually the smart contracts from our libraries that you want to use. But now, with zeppelin_OS, everyone can build a standard library that can be linked to a project that is using zeppelin_OS and everyone can use the same source code.</p><p>Say goodbye to all those deploy-time issues ;)</p><p>We use many small helper libraries: e.g. to do tricky things like testing low level calls, crafted transactions where you need to specify very small things to do with the data as an array of byte or whatever. Truffle provides no friendly way to do this, so you have to start playing with buffers of bytes and hashes and all sorts of nonsense.</p><p>Ethereumjs-abi, ethereumjs-utils etc.</p><p>Web3 is a great library. It&rsquo;s very simple, though it&rsquo;s been a long time that they have been promising a stable 1.0 version.</p><p>MetaMask is also really useful - makes life easier in so many ways.</p><p>We use both geth and parity as we have our own nodes to test things.</p><p>Remix is really cool and it works really well. I encourage people to use it and look forward to new releases from them.</p><p>Sharing sets/suites of contracts easily can be improved.</p>"},{question:"testing",answer:"<p>We use Travis CI.</p><p>Coverall for coverage tests, also for solidity coverage using solcoverage as a plugin. Super useful to us.</p><p>Write plain mocha tests (integration and unit) and we aim for 100% coverage always.</p><p>When working on DApps we usually have standard paths to test how the UI works.</p><p>This is another developer tool that is missing: a tool to test UIs when signing transactions.</p>"},{question:"bounties",answer:"<p>For governance:</p><p>We are still exploring which models are better for upgradeability. How to take into account the community, dev team, investors etc. We need a governance pattern that works specifically for upgradeability decisions, which tend to be more focussed than larger governance questions and might lend themselves to specific, narrow mechanisms.</p><p>It may be possible to modify the way the compiler maps state variable to storage, so that we can allow people to implement similar patterns to ours without all the inline assembly stuff. Might make a nice bounty - improving the compiler in general to allow new features specifically in terms of what you can do with the EVM.</p><p>Having a scheduler implies huge gas costs, so we need to find scheduling mechanisms that will allow the community to run transactions in a feature for you and be rewarded with tokens or Eth or whatever. (see chronologic for this kind of stuff too)</p><p>We are trying to see if there is anyway to use TCRs and token curation markets in order to handle on chain standard libraries and upgradeability too. The idea behind zeppelin OS is to encourage other teams to build their own on chain standard libraries and provide them through zeppelin OS to be used in other projects. We would love to see the community come forward with suggestions about how this could be best managed.</p>"}]},{id:101,name:"Manuel Araoz",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Open Zeppelin: open source smart contract framework</p><p>Currently working on building web app</p><p>On chain libraries with upgradability</p><p>Contract interaction</p><p>Marketplace</p><p>Scheduler for asynchronous execution.</p>"},{question:"tooling",answer:"<p>Use the truffle toolkit the entire way. Truffle for testing.</p><p>Publish on npm for users to use open zeppelin.</p><p>One of the first to try ethpm.</p><p>It was super buggy with IPFS errors and it couldn&rsquo;t find the resources and stuff</p>"},{question:"testing",answer:"<p>Truffle automated testing with javascript unit tests</p><p>Migrated to async/await style of tests</p><p>Mocha, Chai</p><p>Onchain bug bounties for finding implementation bugs.</p>"},{question:"smart_contract",answer:"<p>We design first then develop.</p><p>Sometimes they see other teams mix these two phases.</p><p>This is bad, because you can break your assumptions in nuanced ways..</p>"},{question:"missing_tools",answer:"<p>Upgradability</p><p>We&rsquo;re going to build an upgradable library, for the most used kinds of contracts. So that you can just use the library and it will be an upgradable form[a].</p><p>Upgradability requires governance mechanisms though, and these are more difficult to figure out, as it is not just about code.</p><p>We are not working on debugging, but would love to see someone solve it</p><p>We use the truffle debugger but it&rsquo;s not covering all their needs</p><p>Remix is good, but we would rather not use the web UI.</p><p>Better tools for deploying and managing contracts on the blockchain</p><p>We&rsquo;re building this (John & Marcus)</p><p>Tools to replay past transactions</p><p>E.g. for historical testing of upgrades.. replaying transactions from previous versions and making sure they don&rsquo;t break.</p><p>Stress-testing cryptoeconomic system: we only really do human analysis now.</p><p>Better tools &ndash; like simulations of the mechanism design to prevent game theoretic problems &ndash; would be cool. This can be a bounty[b].</p>"}]},{id:102,name:"Brendan Chou",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>On chain derivatives for erc-20 tokens</p><p>Open sourcing their code in next week or two</p><p>Only smart contracts protocol so far, no UX/Dapps</p>"},{question:"tooling",answer:"<p>Remix for smart contracts</p><p>Writing Javascript tests</p><p>Truffle for compiling and test, NPM to manage packages,</p><p>SolCoverage</p>"},{question:"testing",answer:"<p>Mocha, js unit tests on Truffle</p>"}]},{id:103,name:"Lane Rettig",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>Core developer for EWASM, but independent and works on a grant.</p><p>Doing a lot of governance-related stuff lately, EIP0, Fellowship of Ethereum Magicians</p><p>Runs a blockchain community and coworking space in NY called Crypto NYC (www.cryptonyc.org)</p><p>New project called Odin Protocol, an open data marketplace</p>"},{question:"tooling",answer:"<p>Use vim, tmux and work way down in the protocols - no web3 etc.</p><p>Lots and lots of helpful vim plugins: various language syntax plugins, version control, etc.</p><p>Writing web assembly itself (tests), Javascript and some C++: evm2wasm transpiler that can maintain backwards compatibility.</p>"},{question:"missing_tools",answer:"<p>Working on evm2wasm in JS - we need to be able to run all the tests using the new WASM infrastructure. I want something like a CI on my local machine, make a change, save the file and see whether the tests are passing or failing. Hot reloading for the whole test suite kind of thing. Local test harness that just works.</p>"}]},{id:104,name:"Kames",matchedIndex:-1,interview:[{question:"who_what",answer:"<p>I am working on uPort as a community a manager. The primary role is basically discovering how to empower developers to use uPort. uPort is a decentralized identity system.</p><p> Getting developers to understand how to implement this in the front-end environment, get people that are not used to Ethereum to understand this</p><p>Ask the right questions to get people thinking about this</p>"},{question:"tooling",answer:"<p>Eth.js, we use Nick Dodson&rsquo;s stuff. Inject web3js, but use more of the lightweight stuff for internal requirements. We use Truffle for tests. For the Buidlbox project, we use React-Redux. Mobile app is all react-native. Use React/redux everywhere, React sagas.</p><p>Use IPFS, use Infura. New spec puts us on IPFS, before we were just on Ethereum but this cost too much. Introduced IPFS to help with this, but it&rsquo;s a bottleneck point.</p>"},{question:"testing",answer:"<p>We run a lot of unit tests on the JavaScript, but don&rsquo;t do enough testing right now. For smart contracts, reach out internally at Consensys. But not baked out process. Could use a better audit process.</p><p>Could use a better audit tool. Can test smart contracts at a code level, formal verification but haven&rsquo;t researched this.</p>"},{question:"smart_contract",answer:"<p>The mainnet launch was very minimal. Using segregated accounts in uPort app, use proxy contracts that have been around like a year. These went through formal verification a while ago. We were confident with putting them on mainnet. Switching up in the future how we handle it.</p><p>Had them audited by Consensys internally, possibly by the diligence group.</p><p>Getting away from smart contracts, looking at a different identity protocol layer. If uPort was continuing in smart contracts  upgradeability via smart contracts (ZeppelinOS) would be interesting.</p><p>Deprecating our smart contracts, but using ether-did (decentralization identity). Just need a private key and a public key, so don&rsquo;t need a smart contract. Etherdid registry is a smart contract, but smart contracts are not the core protocol any more.</p>"},{question:"bounties",answer:"<p>Education platform that is not focused on a business model. Loom is doing a fantastic job of educating people, but it&rsquo;s a business. A great general education source that is not leading to some business. Online university or online education center would be fantastic.</p><p>Better UI/UX, thinking about this next layer. Get product people, designers, etc. involved. A Material design for dApps.</p>"},{question:"missing_tools",answer:"<p>Drag and drop website builder for dApps, I&rsquo;m working on this. Product people are not able to prototype the user experience is very detrimental to the long term growth of the ecosystem</p><p>Need tools that enable quick validation in the real world. Need better prototyping</p><p>Design systems, design patterns, how to handle long transaction times. New thinking in this regard.</p>"}]}]},259:function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var a=(i=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),r=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(r).concat([a]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},a=0;a<this.length;a++){var r=this[a][0];"number"==typeof r&&(o[r]=!0)}for(a=0;a<e.length;a++){var i=e[a];"number"==typeof i[0]&&o[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},26:function(e,t,n){"use strict";var o=n(211),a=n(219),r={decodeEntities:!0,lowerCaseAttributeNames:!1};e.exports=function(e,t){if("string"!=typeof e)throw new TypeError("First argument must be a string");return o(a(e,r),t)}},37:function(e,t,n){e.exports=n(101)},74:function(e,t,n){var o;o=function(e){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=n(1),r=(o=a)&&o.__esModule?o:{default:o};t.default=r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(2),s=(o=i)&&o.__esModule?o:{default:o};var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.smoothScroll=n.smoothScroll.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),r(t,[{key:"componentDidMount",value:function(){n(3).polyfill()}},{key:"smoothScroll",value:function(e){var t=this;e.preventDefault();var n=function(){return 0};void 0!==this.props.offset&&(n=this.props.offset&&this.props.offset.constructor&&this.props.offset.apply?this.props.offset:function(){return parseInt(t.props.offset)});var o=e.currentTarget.getAttribute("href").slice(1);window.scroll({top:document.getElementById(o).offsetTop-n(),behavior:"smooth"}),this.props.onClick&&this.props.onClick(e)}},{key:"render",value:function(){return s.default.createElement("a",a({},this.props,{onClick:this.smoothScroll}),this.props.children)}}]),t}();t.default=l},function(t,n){t.exports=e},function(e,t,n){!function(){"use strict";var t=window,n=document;function o(){if(!("scrollBehavior"in n.documentElement.style&&!0!==t.__forceSmoothScrollPolyfill__)){var e,o=t.HTMLElement||t.Element,a=468,r=(e=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(e)?1:0),i={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:o.prototype.scroll||l,scrollIntoView:o.prototype.scrollIntoView},s=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now;t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?f.call(t,n.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):i.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(p(arguments[0])?i.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):f.call(t,n.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==p(arguments[0])){var e=arguments[0].left,t=arguments[0].top;f.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===t?this.scrollTop:~~t)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value couldn't be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==p(arguments[0])){var e=function(e){var t;do{t=(e=e.parentNode)===n.body}while(!1===t&&!1===h(e));return t=null,e}(this),o=e.getBoundingClientRect(),a=this.getBoundingClientRect();e!==n.body?(f.call(this,e,e.scrollLeft+a.left-o.left,e.scrollTop+a.top-o.top),"fixed"!==t.getComputedStyle(e).position&&t.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):t.scrollBy({left:a.left,top:a.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(e,t){this.scrollLeft=e,this.scrollTop=t}function p(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function u(e,t){return"Y"===t?e.clientHeight+r<e.scrollHeight:"X"===t?e.clientWidth+r<e.scrollWidth:void 0}function c(e,n){var o=t.getComputedStyle(e,null)["overflow"+n];return"auto"===o||"scroll"===o}function h(e){var t=u(e,"Y")&&c(e,"Y"),n=u(e,"X")&&c(e,"X");return t||n}function d(e){var n,o,r,i,l=(s()-e.startTime)/a;i=l=l>1?1:l,n=.5*(1-Math.cos(Math.PI*i)),o=e.startX+(e.x-e.startX)*n,r=e.startY+(e.y-e.startY)*n,e.method.call(e.scrollable,o,r),o===e.x&&r===e.y||t.requestAnimationFrame(d.bind(t,e))}function f(e,o,a){var r,p,u,c,h=s();e===n.body?(r=t,p=t.scrollX||t.pageXOffset,u=t.scrollY||t.pageYOffset,c=i.scroll):(r=e,p=e.scrollLeft,u=e.scrollTop,c=l),d({scrollable:r,method:c,startTime:h,startX:p,startY:u,x:o,y:a})}}e.exports={polyfill:o}}()}])},e.exports=o(n(0))}},[197]).default}});